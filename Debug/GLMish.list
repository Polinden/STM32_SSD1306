
GLMish.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e50c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002834  0800e6a4  0800e6a4  0001e6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ed8  08010ed8  0003019c  2**0
                  CONTENTS
  4 .ARM          00000008  08010ed8  08010ed8  00020ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ee0  08010ee0  0003019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ee0  08010ee0  00020ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ee4  08010ee4  00020ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000019c  20000000  08010ee8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008894  2000019c  08011084  0003019c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008a30  08011084  00038a30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c47  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  00043e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00045f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  000468b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019031  00000000  00000000  00047150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc19  00000000  00000000  00060181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092e18  00000000  00000000  0006bd9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d2  00000000  00000000  000febb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000276c  00000000  00000000  000fec84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000019c 	.word	0x2000019c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e68c 	.word	0x0800e68c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001a0 	.word	0x200001a0
 80001d4:	0800e68c 	.word	0x0800e68c

080001d8 <strcmp>:
 80001d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e0:	2a01      	cmp	r2, #1
 80001e2:	bf28      	it	cs
 80001e4:	429a      	cmpcs	r2, r3
 80001e6:	d0f7      	beq.n	80001d8 <strcmp>
 80001e8:	1ad0      	subs	r0, r2, r3
 80001ea:	4770      	bx	lr

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <GUI_X_Config>:
*
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  //
  static U32 aMemory[GUI_NUMBYTES / 4];
  //
  // Assign memory to emWin
  //
  GUI_ALLOC_AssignMemory(aMemory, GUI_NUMBYTES);
 80004f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fc:	4803      	ldr	r0, [pc, #12]	; (800050c <GUI_X_Config+0x18>)
 80004fe:	f005 f98b 	bl	8005818 <GUI_ALLOC_AssignMemory>
  //
  // Set default font
  //
  GUI_SetDefaultFont(GUI_FONT_6X8);
 8000502:	4803      	ldr	r0, [pc, #12]	; (8000510 <GUI_X_Config+0x1c>)
 8000504:	f005 fe8e 	bl	8006224 <GUI_SetDefaultFont>
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000374 	.word	0x20000374
 8000510:	0800f780 	.word	0x0800f780

08000514 <GUI_X_GetTime>:
  Some timing dependent routines require a GetTime
  and delay function. Default time unit (tick), normally is
  1 ms.
*/

GUI_TIMER_TIME GUI_X_GetTime(void) { 
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return OS_TimeMS; 
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <GUI_X_GetTime+0x14>)
 800051a:	681b      	ldr	r3, [r3, #0]
}
 800051c:	4618      	mov	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000878c 	.word	0x2000878c

0800052c <GUI_X_Delay>:

void GUI_X_Delay(int ms) { 
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  int tEnd = OS_TimeMS + ms;
 8000534:	4b09      	ldr	r3, [pc, #36]	; (800055c <GUI_X_Delay+0x30>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	60fb      	str	r3, [r7, #12]
  while ((tEnd - OS_TimeMS) > 0);
 800053e:	bf00      	nop
 8000540:	4b06      	ldr	r3, [pc, #24]	; (800055c <GUI_X_Delay+0x30>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	dcf9      	bgt.n	8000540 <GUI_X_Delay+0x14>
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3714      	adds	r7, #20
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	2000878c 	.word	0x2000878c

08000560 <GUI_X_Init>:
*     GUI_X_Init() is called from GUI_Init is a possibility to init
*     some hardware which needs to be up and running before the GUI.
*     If not required, leave this routine blank.
*/

void GUI_X_Init(void) {}
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <_InitController>:
*
* Purpose:
*   Initializes the display controller
*/
static void _InitController(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <LCD_X_Config>:
*   Called during the initialization process in order to set up the
*   display driver configuration.
*
*/
void LCD_X_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b09e      	sub	sp, #120	; 0x78
 8000580:	af00      	add	r7, sp, #0
    CONFIG_SPAGE Config = {0};
 8000582:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
    GUI_DEVICE * pDevice;
    GUI_PORT_API PortAPI = {0};
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2268      	movs	r2, #104	; 0x68
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00d fff2 	bl	800e57c <memset>

    //
    // Set display driver and color conversion for 1st layer
    //
    pDevice = GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER, COLOR_CONVERSION, 0, 0);
 8000598:	2300      	movs	r3, #0
 800059a:	2200      	movs	r2, #0
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <LCD_X_Config+0x78>)
 800059e:	4816      	ldr	r0, [pc, #88]	; (80005f8 <LCD_X_Config+0x7c>)
 80005a0:	f005 ffb0 	bl	8006504 <GUI_DEVICE_CreateAndLink>
 80005a4:	6778      	str	r0, [r7, #116]	; 0x74
    //
    // Display size configuration
    //
    LCD_SetSizeEx (0, XSIZE_PHYS,   YSIZE_PHYS);
 80005a6:	2240      	movs	r2, #64	; 0x40
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	2000      	movs	r0, #0
 80005ac:	f008 fcbe 	bl	8008f2c <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, VXSIZE_PHYS,  VYSIZE_PHYS);
 80005b0:	2240      	movs	r2, #64	; 0x40
 80005b2:	2180      	movs	r1, #128	; 0x80
 80005b4:	2000      	movs	r0, #0
 80005b6:	f008 fcd1 	bl	8008f5c <LCD_SetVSizeEx>
    //
    // Driver configuration
    //
    Config.FirstSEG = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    Config.FirstCOM = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	673b      	str	r3, [r7, #112]	; 0x70
    GUIDRV_SPage_Config(pDevice, &Config);
 80005c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005c6:	4619      	mov	r1, r3
 80005c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80005ca:	f006 ff93 	bl	80074f4 <GUIDRV_SPage_Config>
    //
    // Configure hardware routines
    //
    PortAPI.pfWrite8_A0  = ssd1306_WriteCommand;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <LCD_X_Config+0x80>)
 80005d0:	607b      	str	r3, [r7, #4]
    PortAPI.pfWrite8_A1  = ssd1306_WriteData1;
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LCD_X_Config+0x84>)
 80005d4:	60bb      	str	r3, [r7, #8]
    PortAPI.pfWriteM8_A1 = ssd1306_WriteData2;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LCD_X_Config+0x88>)
 80005d8:	613b      	str	r3, [r7, #16]

    /* SSD1306 is not readable through i2c. Cache is enabled
    to use display without data read operations*/

    GUIDRV_SPage_SetBus8(pDevice, &PortAPI);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80005e0:	f006 ff95 	bl	800750e <GUIDRV_SPage_SetBus8>
    //
    // Controller configuration
    //
    GUIDRV_SPage_Set1510(pDevice);
 80005e4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80005e6:	f007 ff41 	bl	800846c <GUIDRV_SPage_Set1510>
}
 80005ea:	bf00      	nop
 80005ec:	3778      	adds	r7, #120	; 0x78
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08010c00 	.word	0x08010c00
 80005f8:	08010c18 	.word	0x08010c18
 80005fc:	08000e35 	.word	0x08000e35
 8000600:	08000e6d 	.word	0x08000e6d
 8000604:	08000e99 	.word	0x08000e99

08000608 <LCD_X_DisplayDriver>:
* Parameter:
*   LayerIndex - Index of layer to be configured
*   Cmd        - Please refer to the details in the switch statement below
*   pData      - Pointer to a LCD_X_DATA structure
*/
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) {
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
  int r;

  GUI_USE_PARA(LayerIndex);
  GUI_USE_PARA(pData);
  switch (Cmd)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	2b06      	cmp	r3, #6
 8000618:	d011      	beq.n	800063e <LCD_X_DisplayDriver+0x36>
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	2b06      	cmp	r3, #6
 800061e:	d811      	bhi.n	8000644 <LCD_X_DisplayDriver+0x3c>
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d003      	beq.n	800062e <LCD_X_DisplayDriver+0x26>
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	2b05      	cmp	r3, #5
 800062a:	d005      	beq.n	8000638 <LCD_X_DisplayDriver+0x30>
 800062c:	e00a      	b.n	8000644 <LCD_X_DisplayDriver+0x3c>
        // Called during the initialization process in order to set up the
        // display controller and put it into operation. If the display
        // controller is not initialized by any external routine this needs
        // to be adapted by the customer...
        //
        _InitController();
 800062e:	f7ff ff9e 	bl	800056e <_InitController>
        r = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
        break;
 8000636:	e009      	b.n	800064c <LCD_X_DisplayDriver+0x44>

    case LCD_X_ON:

        r = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
        break;
 800063c:	e006      	b.n	800064c <LCD_X_DisplayDriver+0x44>

    case LCD_X_OFF:

        r = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
        break;
 8000642:	e003      	b.n	800064c <LCD_X_DisplayDriver+0x44>

    default:
        r = -1;
 8000644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000648:	617b      	str	r3, [r7, #20]
        break;
 800064a:	bf00      	nop
  }
  return r;
 800064c:	697b      	ldr	r3, [r7, #20]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3718      	adds	r7, #24
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <main>:




int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065e:	f000 fc5f 	bl	8000f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000662:	f000 f865 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f921 	bl	80008ac <MX_GPIO_Init>
  MX_DMA_Init();
 800066a:	f000 f8f7 	bl	800085c <MX_DMA_Init>
  MX_I2C1_Init();
 800066e:	f000 f8c7 	bl	8000800 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  ssd1306_Init();
 8000672:	f000 fb0f 	bl	8000c94 <ssd1306_Init>
  GUI_Init();
 8000676:	f005 fe3b 	bl	80062f0 <GUI_Init>
  GUI_SetFont(&GUI_Font8x16);
 800067a:	4829      	ldr	r0, [pc, #164]	; (8000720 <main+0xc8>)
 800067c:	f005 fd44 	bl	8006108 <GUI_SetFont>
  GUI_SetBkColor(GUI_BLACK);
 8000680:	2000      	movs	r0, #0
 8000682:	f005 fd3a 	bl	80060fa <GUI_SetBkColor>
  GUI_Clear();
 8000686:	f005 fe03 	bl	8006290 <GUI_Clear>
  GUI_SetPenSize(2);
 800068a:	2002      	movs	r0, #2
 800068c:	f005 fcf2 	bl	8006074 <GUI_SetPenSize>
  GUI_SetColor(GUI_WHITE);
 8000690:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8000694:	f005 fd33 	bl	80060fe <GUI_SetColor>
  GUI_DrawLine(2, 2, 126, 62);
 8000698:	233e      	movs	r3, #62	; 0x3e
 800069a:	227e      	movs	r2, #126	; 0x7e
 800069c:	2102      	movs	r1, #2
 800069e:	2002      	movs	r0, #2
 80006a0:	f006 fcc8 	bl	8007034 <GUI_DrawLine>
  GUI_DrawLine(2, 62, 126, 2);
 80006a4:	2302      	movs	r3, #2
 80006a6:	227e      	movs	r2, #126	; 0x7e
 80006a8:	213e      	movs	r1, #62	; 0x3e
 80006aa:	2002      	movs	r0, #2
 80006ac:	f006 fcc2 	bl	8007034 <GUI_DrawLine>
  GUI_SetBkColor(GUI_BLACK);
 80006b0:	2000      	movs	r0, #0
 80006b2:	f005 fd22 	bl	80060fa <GUI_SetBkColor>
  GUI_SetColor(GUI_WHITE);
 80006b6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80006ba:	f005 fd20 	bl	80060fe <GUI_SetColor>
  GUI_DrawRect(10,10,118,54);
 80006be:	2336      	movs	r3, #54	; 0x36
 80006c0:	2276      	movs	r2, #118	; 0x76
 80006c2:	210a      	movs	r1, #10
 80006c4:	200a      	movs	r0, #10
 80006c6:	f004 fd67 	bl	8005198 <GUI_DrawRect>
  GUI_SetTextMode(GUI_TM_NORMAL);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f005 fd54 	bl	8006178 <GUI_SetTextMode>
  GUI_DispStringHCenterAt("MISHA HELLO!!", 64, 24);
 80006d0:	2218      	movs	r2, #24
 80006d2:	2140      	movs	r1, #64	; 0x40
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <main+0xcc>)
 80006d6:	f005 ffb3 	bl	8006640 <GUI_DispStringHCenterAt>

  BUTTON_Handle hButton, hButton1;
  hButton = BUTTON_Create(1, 1, 40, 15, GUI_ID_OK, WM_CF_SHOW);
 80006da:	2302      	movs	r3, #2
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	230f      	movs	r3, #15
 80006e4:	2228      	movs	r2, #40	; 0x28
 80006e6:	2101      	movs	r1, #1
 80006e8:	2001      	movs	r0, #1
 80006ea:	f004 fba3 	bl	8004e34 <BUTTON_Create>
 80006ee:	6078      	str	r0, [r7, #4]
  BUTTON_SetText(hButton, "YES");
 80006f0:	490d      	ldr	r1, [pc, #52]	; (8000728 <main+0xd0>)
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f004 fbab 	bl	8004e4e <BUTTON_SetText>
  hButton1 = BUTTON_Create(85, 1, 40, 15, GUI_ID_OK, WM_CF_SHOW);
 80006f8:	2302      	movs	r3, #2
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	230f      	movs	r3, #15
 8000702:	2228      	movs	r2, #40	; 0x28
 8000704:	2101      	movs	r1, #1
 8000706:	2055      	movs	r0, #85	; 0x55
 8000708:	f004 fb94 	bl	8004e34 <BUTTON_Create>
 800070c:	6038      	str	r0, [r7, #0]
  BUTTON_SetText(hButton1, "NO");
 800070e:	4907      	ldr	r1, [pc, #28]	; (800072c <main+0xd4>)
 8000710:	6838      	ldr	r0, [r7, #0]
 8000712:	f004 fb9c 	bl	8004e4e <BUTTON_SetText>

  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GUI_Delay(100);
 8000716:	2064      	movs	r0, #100	; 0x64
 8000718:	f006 fdd4 	bl	80072c4 <GUI_Delay>
 800071c:	e7fb      	b.n	8000716 <main+0xbe>
 800071e:	bf00      	nop
 8000720:	0800ff74 	.word	0x0800ff74
 8000724:	0800e6a4 	.word	0x0800e6a4
 8000728:	0800e6b4 	.word	0x0800e6b4
 800072c:	0800e6b8 	.word	0x0800e6b8

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f00d ff1c 	bl	800e57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemClock_Config+0xc8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a26      	ldr	r2, [pc, #152]	; (80007f8 <SystemClock_Config+0xc8>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <SystemClock_Config+0xc8>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b21      	ldr	r3, [pc, #132]	; (80007fc <SystemClock_Config+0xcc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a20      	ldr	r2, [pc, #128]	; (80007fc <SystemClock_Config+0xcc>)
 800077a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <SystemClock_Config+0xcc>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a0:	2310      	movs	r3, #16
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007a4:	23c0      	movs	r3, #192	; 0xc0
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a8:	2304      	movs	r3, #4
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fdfb 	bl	80043b0 <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f8aa 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2102      	movs	r1, #2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f004 f85d 	bl	80048a0 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007ec:	f000 f894 	bl	8000918 <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	; 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40007000 	.word	0x40007000

08000800 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f001 fa47 	bl	8001cd0 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f866 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200087f0 	.word	0x200087f0
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <MX_DMA_Init+0x4c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <MX_DMA_Init+0x4c>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <MX_DMA_Init+0x4c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200b      	movs	r0, #11
 8000884:	f000 fcbd 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000888:	200b      	movs	r0, #11
 800088a:	f000 fcd6 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	200c      	movs	r0, #12
 8000894:	f000 fcb5 	bl	8001202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000898:	200c      	movs	r0, #12
 800089a:	f000 fcce 	bl	800123a <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800

080008ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b085      	sub	sp, #20
 80008b0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_GPIO_Init+0x68>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <MX_GPIO_Init+0x68>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_GPIO_Init+0x68>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	4b10      	ldr	r3, [pc, #64]	; (8000914 <MX_GPIO_Init+0x68>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_GPIO_Init+0x68>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <MX_GPIO_Init+0x68>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_GPIO_Init+0x68>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <MX_GPIO_Init+0x68>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_GPIO_Init+0x68>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

}
 8000906:	bf00      	nop
 8000908:	3714      	adds	r7, #20
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a4f      	ldr	r2, [pc, #316]	; (8000ad0 <HAL_I2C_MspInit+0x15c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	f040 8097 	bne.w	8000ac6 <HAL_I2C_MspInit+0x152>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <HAL_I2C_MspInit+0x160>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_I2C_MspInit+0x160>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	6313      	str	r3, [r2, #48]	; 0x30
 80009a8:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <HAL_I2C_MspInit+0x160>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009b4:	23c0      	movs	r3, #192	; 0xc0
 80009b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b8:	2312      	movs	r3, #18
 80009ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c4:	2304      	movs	r3, #4
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4842      	ldr	r0, [pc, #264]	; (8000ad8 <HAL_I2C_MspInit+0x164>)
 80009d0:	f000 fffa 	bl	80019c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b3e      	ldr	r3, [pc, #248]	; (8000ad4 <HAL_I2C_MspInit+0x160>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a3d      	ldr	r2, [pc, #244]	; (8000ad4 <HAL_I2C_MspInit+0x160>)
 80009de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b3b      	ldr	r3, [pc, #236]	; (8000ad4 <HAL_I2C_MspInit+0x160>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80009f0:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <HAL_I2C_MspInit+0x168>)
 80009f2:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <HAL_I2C_MspInit+0x16c>)
 80009f4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80009f6:	4b39      	ldr	r3, [pc, #228]	; (8000adc <HAL_I2C_MspInit+0x168>)
 80009f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009fc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0a:	4b34      	ldr	r3, [pc, #208]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a1e:	4b2f      	ldr	r3, [pc, #188]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a2a:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a30:	482a      	ldr	r0, [pc, #168]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a32:	f000 fc1d 	bl	8001270 <HAL_DMA_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000a3c:	f7ff ff6c 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a26      	ldr	r2, [pc, #152]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a44:	639a      	str	r2, [r3, #56]	; 0x38
 8000a46:	4a25      	ldr	r2, [pc, #148]	; (8000adc <HAL_I2C_MspInit+0x168>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8000a4c:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <HAL_I2C_MspInit+0x174>)
 8000a50:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a5a:	2240      	movs	r2, #64	; 0x40
 8000a5c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a6a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a8c:	f000 fbf0 	bl	8001270 <HAL_DMA_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8000a96:	f7ff ff3f 	bl	8000918 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a11      	ldr	r2, [pc, #68]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000a9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_I2C_MspInit+0x170>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201f      	movs	r0, #31
 8000aac:	f000 fba9 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ab0:	201f      	movs	r0, #31
 8000ab2:	f000 fbc2 	bl	800123a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2020      	movs	r0, #32
 8000abc:	f000 fba1 	bl	8001202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ac0:	2020      	movs	r0, #32
 8000ac2:	f000 fbba 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	20008844 	.word	0x20008844
 8000ae0:	40026010 	.word	0x40026010
 8000ae4:	20008790 	.word	0x20008790
 8000ae8:	40026028 	.word	0x40026028

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 fa44 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000b44:	4802      	ldr	r0, [pc, #8]	; (8000b50 <DMA1_Stream0_IRQHandler+0x10>)
 8000b46:	f000 fcbb 	bl	80014c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20008844 	.word	0x20008844

08000b54 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000b58:	4802      	ldr	r0, [pc, #8]	; (8000b64 <DMA1_Stream1_IRQHandler+0x10>)
 8000b5a:	f000 fcb1 	bl	80014c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20008790 	.word	0x20008790

08000b68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <I2C1_EV_IRQHandler+0x10>)
 8000b6e:	f001 fc77 	bl	8002460 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200087f0 	.word	0x200087f0

08000b7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <I2C1_ER_IRQHandler+0x10>)
 8000b82:	f001 fdda 	bl	800273a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200087f0 	.word	0x200087f0

08000b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b98:	4a14      	ldr	r2, [pc, #80]	; (8000bec <_sbrk+0x5c>)
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <_sbrk+0x60>)
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <_sbrk+0x64>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <_sbrk+0x68>)
 8000bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d207      	bcs.n	8000bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc0:	f00d fc82 	bl	800e4c8 <__errno>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bce:	e009      	b.n	8000be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <_sbrk+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <_sbrk+0x64>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4413      	add	r3, r2
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <_sbrk+0x64>)
 8000be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3718      	adds	r7, #24
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20020000 	.word	0x20020000
 8000bf0:	00000400 	.word	0x00000400
 8000bf4:	20008374 	.word	0x20008374
 8000bf8:	20008a30 	.word	0x20008a30

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	; (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	; (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	; (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f00d fc41 	bl	800e4d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fd01 	bl	8000658 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 8000c64:	08010ee8 	.word	0x08010ee8
  ldr r2, =_sbss
 8000c68:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 8000c6c:	20008a30 	.word	0x20008a30

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>

08000c72 <width>:


static SSD1306_t SSD1306;
static uint8_t SSD1306_Buffer[SSD1306_BUFFER_SIZE];
SSD1306_Geometry display_geometry = SSD1306_GEOMETRY;
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	2380      	movs	r3, #128	; 0x80
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	2340      	movs	r3, #64	; 0x40
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <ssd1306_Init>:
	SSD1306.Color = color;
}

//	Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	2178      	movs	r1, #120	; 0x78
 8000ca0:	4846      	ldr	r0, [pc, #280]	; (8000dbc <ssd1306_Init+0x128>)
 8000ca2:	f001 faaf 	bl	8002204 <HAL_I2C_IsDeviceReady>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d004      	beq.n	8000cb6 <ssd1306_Init+0x22>
	{
		SSD1306.Initialized = 0;
 8000cac:	4b44      	ldr	r3, [pc, #272]	; (8000dc0 <ssd1306_Init+0x12c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	719a      	strb	r2, [r3, #6]
		/* Return false */
		return 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e07f      	b.n	8000db6 <ssd1306_Init+0x122>
	}

	// Wait for the screen to boot
	HAL_Delay(100);
 8000cb6:	2064      	movs	r0, #100	; 0x64
 8000cb8:	f000 f9a4 	bl	8001004 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(DISPLAYOFF);
 8000cbc:	20ae      	movs	r0, #174	; 0xae
 8000cbe:	f000 f8b9 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8000cc2:	20d5      	movs	r0, #213	; 0xd5
 8000cc4:	f000 f8b6 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8000cc8:	20f0      	movs	r0, #240	; 0xf0
 8000cca:	f000 f8b3 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8000cce:	20a8      	movs	r0, #168	; 0xa8
 8000cd0:	f000 f8b0 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8000cd4:	f7ff ffd5 	bl	8000c82 <height>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	3b01      	subs	r3, #1
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f8a7 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8000ce6:	20d3      	movs	r0, #211	; 0xd3
 8000ce8:	f000 f8a4 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 f8a1 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8000cf2:	2040      	movs	r0, #64	; 0x40
 8000cf4:	f000 f89e 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8000cf8:	208d      	movs	r0, #141	; 0x8d
 8000cfa:	f000 f89b 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8000cfe:	2014      	movs	r0, #20
 8000d00:	f000 f898 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8000d04:	2020      	movs	r0, #32
 8000d06:	f000 f895 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 f892 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8000d10:	20a0      	movs	r0, #160	; 0xa0
 8000d12:	f000 f88f 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8000d16:	20c0      	movs	r0, #192	; 0xc0
 8000d18:	f000 f88c 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8000d1c:	20da      	movs	r0, #218	; 0xda
 8000d1e:	f000 f889 	bl	8000e34 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <ssd1306_Init+0x130>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d103      	bne.n	8000d32 <ssd1306_Init+0x9e>
	{
	  ssd1306_WriteCommand(0x12);
 8000d2a:	2012      	movs	r0, #18
 8000d2c:	f000 f882 	bl	8000e34 <ssd1306_WriteCommand>
 8000d30:	e006      	b.n	8000d40 <ssd1306_Init+0xac>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000d32:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <ssd1306_Init+0x130>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <ssd1306_Init+0xac>
	{
	  ssd1306_WriteCommand(0x02);
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	f000 f87a 	bl	8000e34 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETCONTRAST);
 8000d40:	2081      	movs	r0, #129	; 0x81
 8000d42:	f000 f877 	bl	8000e34 <ssd1306_WriteCommand>

	if (display_geometry == GEOMETRY_128_64)
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <ssd1306_Init+0x130>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d103      	bne.n	8000d56 <ssd1306_Init+0xc2>
	{
	  ssd1306_WriteCommand(0xCF);
 8000d4e:	20cf      	movs	r0, #207	; 0xcf
 8000d50:	f000 f870 	bl	8000e34 <ssd1306_WriteCommand>
 8000d54:	e006      	b.n	8000d64 <ssd1306_Init+0xd0>
	}
	else if (display_geometry == GEOMETRY_128_32)
 8000d56:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <ssd1306_Init+0x130>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d102      	bne.n	8000d64 <ssd1306_Init+0xd0>
	{
	  ssd1306_WriteCommand(0x8F);
 8000d5e:	208f      	movs	r0, #143	; 0x8f
 8000d60:	f000 f868 	bl	8000e34 <ssd1306_WriteCommand>
	}

	ssd1306_WriteCommand(SETPRECHARGE);
 8000d64:	20d9      	movs	r0, #217	; 0xd9
 8000d66:	f000 f865 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8000d6a:	20f1      	movs	r0, #241	; 0xf1
 8000d6c:	f000 f862 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8000d70:	20db      	movs	r0, #219	; 0xdb
 8000d72:	f000 f85f 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8000d76:	2040      	movs	r0, #64	; 0x40
 8000d78:	f000 f85c 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8000d7c:	20a4      	movs	r0, #164	; 0xa4
 8000d7e:	f000 f859 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8000d82:	20a6      	movs	r0, #166	; 0xa6
 8000d84:	f000 f856 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8000d88:	202e      	movs	r0, #46	; 0x2e
 8000d8a:	f000 f853 	bl	8000e34 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8000d8e:	20af      	movs	r0, #175	; 0xaf
 8000d90:	f000 f850 	bl	8000e34 <ssd1306_WriteCommand>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <ssd1306_Init+0x12c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <ssd1306_Init+0x12c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	805a      	strh	r2, [r3, #2]
	SSD1306.Color = White;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <ssd1306_Init+0x12c>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	715a      	strb	r2, [r3, #5]

	// Clear screen
	ssd1306_Clear();
 8000da6:	f000 f839 	bl	8000e1c <ssd1306_Clear>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000daa:	f000 f80d 	bl	8000dc8 <ssd1306_UpdateScreen>

	SSD1306.Initialized = 1;
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <ssd1306_Init+0x12c>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	719a      	strb	r2, [r3, #6]

	/* Return OK */
	return 1;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200087f0 	.word	0x200087f0
 8000dc0:	20008378 	.word	0x20008378
 8000dc4:	20008780 	.word	0x20008780

08000dc8 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	71fb      	strb	r3, [r7, #7]
 8000dd2:	e019      	b.n	8000e08 <ssd1306_UpdateScreen+0x40>
	{
		ssd1306_WriteCommand(0xB0 + i);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	3b50      	subs	r3, #80	; 0x50
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f82a 	bl	8000e34 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 f827 	bl	8000e34 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8000de6:	2010      	movs	r0, #16
 8000de8:	f000 f824 	bl	8000e34 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <ssd1306_UpdateScreen+0x50>)
 8000df2:	189c      	adds	r4, r3, r2
 8000df4:	f7ff ff3d 	bl	8000c72 <width>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f000 f867 	bl	8000ed0 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3301      	adds	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9e2      	bls.n	8000dd4 <ssd1306_UpdateScreen+0xc>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	bf00      	nop
 8000e12:	370c      	adds	r7, #12
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	20008380 	.word	0x20008380

08000e1c <ssd1306_Clear>:
	ssd1306_WriteCommand(SEGREMAP);
	ssd1306_WriteCommand(COMSCANDEC);           //Mirror screen
}

void ssd1306_Clear()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	2100      	movs	r1, #0
 8000e26:	4802      	ldr	r0, [pc, #8]	; (8000e30 <ssd1306_Clear+0x14>)
 8000e28:	f00d fba8 	bl	800e57c <memset>
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20008380 	.word	0x20008380

08000e34 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8000e3e:	bf00      	nop
 8000e40:	4809      	ldr	r0, [pc, #36]	; (8000e68 <ssd1306_WriteCommand+0x34>)
 8000e42:	f001 fd7f 	bl	8002944 <HAL_I2C_GetState>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d1f9      	bne.n	8000e40 <ssd1306_WriteCommand+0xc>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	9301      	str	r3, [sp, #4]
 8000e50:	1dfb      	adds	r3, r7, #7
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2301      	movs	r3, #1
 8000e56:	2200      	movs	r2, #0
 8000e58:	2178      	movs	r1, #120	; 0x78
 8000e5a:	4803      	ldr	r0, [pc, #12]	; (8000e68 <ssd1306_WriteCommand+0x34>)
 8000e5c:	f001 f87c 	bl	8001f58 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
#endif
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200087f0 	.word	0x200087f0

08000e6c <ssd1306_WriteData1>:

void ssd1306_WriteData1(unsigned char pData){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	uint8_t* buff = (uint8_t*)malloc(1);
 8000e76:	2001      	movs	r0, #1
 8000e78:	f00d fb50 	bl	800e51c <malloc>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60fb      	str	r3, [r7, #12]
	memcpy(&buff[0], pData, 1);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	701a      	strb	r2, [r3, #0]
	ssd1306_WriteData(buff, 1);
 8000e88:	2101      	movs	r1, #1
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f000 f820 	bl	8000ed0 <ssd1306_WriteData>
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <ssd1306_WriteData2>:

void ssd1306_WriteData2(unsigned char * pData, int numBytes){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	uint8_t* buff = (uint8_t*)malloc(numBytes);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f00d fb39 	bl	800e51c <malloc>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
	memcpy(&buff[0], pData, numBytes);
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f00d fb39 	bl	800e52c <memcpy>
	ssd1306_WriteData(buff, numBytes);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f000 f805 	bl	8000ed0 <ssd1306_WriteData>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <ssd1306_WriteData>:

void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af02      	add	r7, sp, #8
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
 8000edc:	bf00      	nop
 8000ede:	480a      	ldr	r0, [pc, #40]	; (8000f08 <ssd1306_WriteData+0x38>)
 8000ee0:	f001 fd30 	bl	8002944 <HAL_I2C_GetState>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b20      	cmp	r3, #32
 8000ee8:	d1f9      	bne.n	8000ede <ssd1306_WriteData+0xe>
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
 8000eea:	887b      	ldrh	r3, [r7, #2]
 8000eec:	9301      	str	r3, [sp, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	2240      	movs	r2, #64	; 0x40
 8000ef6:	2178      	movs	r1, #120	; 0x78
 8000ef8:	4803      	ldr	r0, [pc, #12]	; (8000f08 <ssd1306_WriteData+0x38>)
 8000efa:	f001 f82d 	bl	8001f58 <HAL_I2C_Mem_Write_DMA>
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
#endif
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200087f0 	.word	0x200087f0

08000f0c <HAL_I2C_MemTxCpltCallback>:

#ifdef USE_DMA
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == SSD1306_I2C_PORT.Instance)
	{
		//TODO:
	}
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_Init+0x40>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0d      	ldr	r2, [pc, #52]	; (8000f60 <HAL_Init+0x40>)
 8000f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_Init+0x40>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <HAL_Init+0x40>)
 8000f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_Init+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_Init+0x40>)
 8000f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 f94f 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f808 	bl	8000f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f54:	f7ff fce6 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023c00 	.word	0x40023c00

08000f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x54>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <HAL_InitTick+0x58>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4619      	mov	r1, r3
 8000f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 f967 	bl	8001256 <HAL_SYSTICK_Config>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00e      	b.n	8000fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	d80a      	bhi.n	8000fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	f000 f92f 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <HAL_InitTick+0x5c>)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000012c 	.word	0x2000012c
 8000fbc:	20000134 	.word	0x20000134
 8000fc0:	20000130 	.word	0x20000130

08000fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <HAL_IncTick+0x24>)
 8000fd6:	6013      	str	r3, [r2, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000134 	.word	0x20000134
 8000fe8:	200088a4 	.word	0x200088a4

08000fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_GetTick+0x14>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	200088a4 	.word	0x200088a4

08001004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800100c:	f7ff ffee 	bl	8000fec <HAL_GetTick>
 8001010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800101c:	d005      	beq.n	800102a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_Delay+0x44>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102a:	bf00      	nop
 800102c:	f7ff ffde 	bl	8000fec <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	429a      	cmp	r2, r3
 800103a:	d8f7      	bhi.n	800102c <HAL_Delay+0x28>
  {
  }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000134 	.word	0x20000134

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff29 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff3e 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff31 	bl	80010b0 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa2 	bl	80011a8 <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff feb6 	bl	8000fec <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d101      	bne.n	800128c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e099      	b.n	80013c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2202      	movs	r2, #2
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ac:	e00f      	b.n	80012ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ae:	f7ff fe9d 	bl	8000fec <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b05      	cmp	r3, #5
 80012ba:	d908      	bls.n	80012ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2220      	movs	r2, #32
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e078      	b.n	80013c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1e8      	bne.n	80012ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4b38      	ldr	r3, [pc, #224]	; (80013c8 <HAL_DMA_Init+0x158>)
 80012e8:	4013      	ands	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689b      	ldr	r3, [r3, #8]
 80012f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	4313      	orrs	r3, r2
 800131e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b04      	cmp	r3, #4
 8001326:	d107      	bne.n	8001338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001330:	4313      	orrs	r3, r2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	697a      	ldr	r2, [r7, #20]
 800133e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f023 0307 	bic.w	r3, r3, #7
 800134e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	4313      	orrs	r3, r2
 8001358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	2b04      	cmp	r3, #4
 8001360:	d117      	bne.n	8001392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4313      	orrs	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00e      	beq.n	8001392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 faab 	bl	80018d0 <DMA_CheckFifoParam>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800138e:	2301      	movs	r3, #1
 8001390:	e016      	b.n	80013c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fa62 	bl	8001864 <DMA_CalcBaseAndBitshift>
 80013a0:	4603      	mov	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a8:	223f      	movs	r2, #63	; 0x3f
 80013aa:	409a      	lsls	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	f010803f 	.word	0xf010803f

080013cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d101      	bne.n	80013f2 <HAL_DMA_Start_IT+0x26>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e040      	b.n	8001474 <HAL_DMA_Start_IT+0xa8>
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b01      	cmp	r3, #1
 8001404:	d12f      	bne.n	8001466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2202      	movs	r2, #2
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	68f8      	ldr	r0, [r7, #12]
 800141c:	f000 f9f4 	bl	8001808 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	223f      	movs	r2, #63	; 0x3f
 8001426:	409a      	lsls	r2, r3
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0216 	orr.w	r2, r2, #22
 800143a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f042 0208 	orr.w	r2, r2, #8
 8001452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	e005      	b.n	8001472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800146e:	2302      	movs	r3, #2
 8001470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001472:	7dfb      	ldrb	r3, [r7, #23]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800148a:	b2db      	uxtb	r3, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d004      	beq.n	800149a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2280      	movs	r2, #128	; 0x80
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00c      	b.n	80014b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2205      	movs	r2, #5
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0201 	bic.w	r2, r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014cc:	4b92      	ldr	r3, [pc, #584]	; (8001718 <HAL_DMA_IRQHandler+0x258>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a92      	ldr	r2, [pc, #584]	; (800171c <HAL_DMA_IRQHandler+0x25c>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	0a9b      	lsrs	r3, r3, #10
 80014d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ea:	2208      	movs	r2, #8
 80014ec:	409a      	lsls	r2, r3
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4013      	ands	r3, r2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d01a      	beq.n	800152c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d013      	beq.n	800152c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0204 	bic.w	r2, r2, #4
 8001512:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	2208      	movs	r2, #8
 800151a:	409a      	lsls	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001530:	2201      	movs	r2, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4013      	ands	r3, r2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d012      	beq.n	8001562 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	2201      	movs	r2, #1
 8001550:	409a      	lsls	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155a:	f043 0202 	orr.w	r2, r3, #2
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001566:	2204      	movs	r2, #4
 8001568:	409a      	lsls	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4013      	ands	r3, r2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d012      	beq.n	8001598 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d00b      	beq.n	8001598 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001584:	2204      	movs	r2, #4
 8001586:	409a      	lsls	r2, r3
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001590:	f043 0204 	orr.w	r2, r3, #4
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159c:	2210      	movs	r2, #16
 800159e:	409a      	lsls	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4013      	ands	r3, r2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d043      	beq.n	8001630 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0308 	and.w	r3, r3, #8
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d03c      	beq.n	8001630 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ba:	2210      	movs	r2, #16
 80015bc:	409a      	lsls	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d018      	beq.n	8001602 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d108      	bne.n	80015f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d024      	beq.n	8001630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4798      	blx	r3
 80015ee:	e01f      	b.n	8001630 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01b      	beq.n	8001630 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	4798      	blx	r3
 8001600:	e016      	b.n	8001630 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d107      	bne.n	8001620 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f022 0208 	bic.w	r2, r2, #8
 800161e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2220      	movs	r2, #32
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 808e 	beq.w	800175e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 8086 	beq.w	800175e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	2220      	movs	r2, #32
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b05      	cmp	r3, #5
 8001668:	d136      	bne.n	80016d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0216 	bic.w	r2, r2, #22
 8001678:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001688:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_DMA_IRQHandler+0x1da>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0208 	bic.w	r2, r2, #8
 80016a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	223f      	movs	r2, #63	; 0x3f
 80016b0:	409a      	lsls	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d07d      	beq.n	80017ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	4798      	blx	r3
        }
        return;
 80016d6:	e078      	b.n	80017ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01c      	beq.n	8001720 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d108      	bne.n	8001706 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d030      	beq.n	800175e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
 8001704:	e02b      	b.n	800175e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2b00      	cmp	r3, #0
 800170c:	d027      	beq.n	800175e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	4798      	blx	r3
 8001716:	e022      	b.n	800175e <HAL_DMA_IRQHandler+0x29e>
 8001718:	2000012c 	.word	0x2000012c
 800171c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800172a:	2b00      	cmp	r3, #0
 800172c:	d10f      	bne.n	800174e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 0210 	bic.w	r2, r2, #16
 800173c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	2b00      	cmp	r3, #0
 8001764:	d032      	beq.n	80017cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d022      	beq.n	80017b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2205      	movs	r2, #5
 8001776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0201 	bic.w	r2, r2, #1
 8001788:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	3301      	adds	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	429a      	cmp	r2, r3
 8001794:	d307      	bcc.n	80017a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f2      	bne.n	800178a <HAL_DMA_IRQHandler+0x2ca>
 80017a4:	e000      	b.n	80017a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017a6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4798      	blx	r3
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80017ca:	bf00      	nop
    }
  }
}
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop

080017d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017e2:	b2db      	uxtb	r3, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001824:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	2b40      	cmp	r3, #64	; 0x40
 8001834:	d108      	bne.n	8001848 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001846:	e007      	b.n	8001858 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	3b10      	subs	r3, #16
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <DMA_CalcBaseAndBitshift+0x64>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <DMA_CalcBaseAndBitshift+0x68>)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2b03      	cmp	r3, #3
 8001890:	d909      	bls.n	80018a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	1d1a      	adds	r2, r3, #4
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	659a      	str	r2, [r3, #88]	; 0x58
 80018a4:	e007      	b.n	80018b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	aaaaaaab 	.word	0xaaaaaaab
 80018cc:	08010ebc 	.word	0x08010ebc

080018d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11f      	bne.n	800192a <DMA_CheckFifoParam+0x5a>
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d856      	bhi.n	800199e <DMA_CheckFifoParam+0xce>
 80018f0:	a201      	add	r2, pc, #4	; (adr r2, 80018f8 <DMA_CheckFifoParam+0x28>)
 80018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f6:	bf00      	nop
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800191b 	.word	0x0800191b
 8001900:	08001909 	.word	0x08001909
 8001904:	0800199f 	.word	0x0800199f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d046      	beq.n	80019a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001918:	e043      	b.n	80019a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001922:	d140      	bne.n	80019a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001928:	e03d      	b.n	80019a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001932:	d121      	bne.n	8001978 <DMA_CheckFifoParam+0xa8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	2b03      	cmp	r3, #3
 8001938:	d837      	bhi.n	80019aa <DMA_CheckFifoParam+0xda>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <DMA_CheckFifoParam+0x70>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001951 	.word	0x08001951
 8001944:	08001957 	.word	0x08001957
 8001948:	08001951 	.word	0x08001951
 800194c:	08001969 	.word	0x08001969
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
      break;
 8001954:	e030      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d025      	beq.n	80019ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001966:	e022      	b.n	80019ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001970:	d11f      	bne.n	80019b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001976:	e01c      	b.n	80019b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d903      	bls.n	8001986 <DMA_CheckFifoParam+0xb6>
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2b03      	cmp	r3, #3
 8001982:	d003      	beq.n	800198c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001984:	e018      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	73fb      	strb	r3, [r7, #15]
      break;
 800198a:	e015      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
      break;
 800199c:	e00b      	b.n	80019b6 <DMA_CheckFifoParam+0xe6>
      break;
 800199e:	bf00      	nop
 80019a0:	e00a      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a2:	bf00      	nop
 80019a4:	e008      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e006      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e004      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e002      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;   
 80019b2:	bf00      	nop
 80019b4:	e000      	b.n	80019b8 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
    }
  } 
  
  return status; 
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	e159      	b.n	8001c98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e4:	2201      	movs	r2, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f040 8148 	bne.w	8001c92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d130      	bne.n	8001a7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	2203      	movs	r2, #3
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68da      	ldr	r2, [r3, #12]
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a50:	2201      	movs	r2, #1
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 0201 	and.w	r2, r3, #1
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b03      	cmp	r3, #3
 8001a86:	d017      	beq.n	8001ab8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	2203      	movs	r2, #3
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d123      	bne.n	8001b0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	08da      	lsrs	r2, r3, #3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3208      	adds	r2, #8
 8001acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	220f      	movs	r2, #15
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	69b9      	ldr	r1, [r7, #24]
 8001b08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	2203      	movs	r2, #3
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0203 	and.w	r2, r3, #3
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	f000 80a2 	beq.w	8001c92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b57      	ldr	r3, [pc, #348]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a56      	ldr	r2, [pc, #344]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_GPIO_Init+0x2e8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6a:	4a52      	ldr	r2, [pc, #328]	; (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	220f      	movs	r2, #15
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x2f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d019      	beq.n	8001bca <HAL_GPIO_Init+0x202>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2f4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0x1fe>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a47      	ldr	r2, [pc, #284]	; (8001cc0 <HAL_GPIO_Init+0x2f8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d00d      	beq.n	8001bc2 <HAL_GPIO_Init+0x1fa>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a46      	ldr	r2, [pc, #280]	; (8001cc4 <HAL_GPIO_Init+0x2fc>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d007      	beq.n	8001bbe <HAL_GPIO_Init+0x1f6>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a45      	ldr	r2, [pc, #276]	; (8001cc8 <HAL_GPIO_Init+0x300>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d101      	bne.n	8001bba <HAL_GPIO_Init+0x1f2>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e008      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bba:	2307      	movs	r3, #7
 8001bbc:	e006      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e004      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e002      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_GPIO_Init+0x204>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	69fa      	ldr	r2, [r7, #28]
 8001bce:	f002 0203 	and.w	r2, r2, #3
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	4093      	lsls	r3, r2
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bdc:	4935      	ldr	r1, [pc, #212]	; (8001cb4 <HAL_GPIO_Init+0x2ec>)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	089b      	lsrs	r3, r3, #2
 8001be2:	3302      	adds	r3, #2
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bea:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c0e:	4a2f      	ldr	r2, [pc, #188]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c38:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c62:	4a1a      	ldr	r2, [pc, #104]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ccc <HAL_GPIO_Init+0x304>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3301      	adds	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b0f      	cmp	r3, #15
 8001c9c:	f67f aea2 	bls.w	80019e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3724      	adds	r7, #36	; 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	40020000 	.word	0x40020000
 8001cbc:	40020400 	.word	0x40020400
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40013c00 	.word	0x40013c00

08001cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e12b      	b.n	8001f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fe3c 	bl	8000974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2224      	movs	r2, #36	; 0x24
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0201 	bic.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d34:	f002 ff5c 	bl	8004bf0 <HAL_RCC_GetPCLK1Freq>
 8001d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a81      	ldr	r2, [pc, #516]	; (8001f44 <HAL_I2C_Init+0x274>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d807      	bhi.n	8001d54 <HAL_I2C_Init+0x84>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a80      	ldr	r2, [pc, #512]	; (8001f48 <HAL_I2C_Init+0x278>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	2300      	movhi	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	e006      	b.n	8001d62 <HAL_I2C_Init+0x92>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a7d      	ldr	r2, [pc, #500]	; (8001f4c <HAL_I2C_Init+0x27c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	bf94      	ite	ls
 8001d5c:	2301      	movls	r3, #1
 8001d5e:	2300      	movhi	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e0e7      	b.n	8001f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	4a78      	ldr	r2, [pc, #480]	; (8001f50 <HAL_I2C_Init+0x280>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0c9b      	lsrs	r3, r3, #18
 8001d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4a6a      	ldr	r2, [pc, #424]	; (8001f44 <HAL_I2C_Init+0x274>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d802      	bhi.n	8001da4 <HAL_I2C_Init+0xd4>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	3301      	adds	r3, #1
 8001da2:	e009      	b.n	8001db8 <HAL_I2C_Init+0xe8>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	4a69      	ldr	r2, [pc, #420]	; (8001f54 <HAL_I2C_Init+0x284>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	099b      	lsrs	r3, r3, #6
 8001db6:	3301      	adds	r3, #1
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	430b      	orrs	r3, r1
 8001dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	495c      	ldr	r1, [pc, #368]	; (8001f44 <HAL_I2C_Init+0x274>)
 8001dd4:	428b      	cmp	r3, r1
 8001dd6:	d819      	bhi.n	8001e0c <HAL_I2C_Init+0x13c>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	1e59      	subs	r1, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001de6:	1c59      	adds	r1, r3, #1
 8001de8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001dec:	400b      	ands	r3, r1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_I2C_Init+0x138>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1e59      	subs	r1, r3, #1
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e06:	e051      	b.n	8001eac <HAL_I2C_Init+0x1dc>
 8001e08:	2304      	movs	r3, #4
 8001e0a:	e04f      	b.n	8001eac <HAL_I2C_Init+0x1dc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d111      	bne.n	8001e38 <HAL_I2C_Init+0x168>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	1e58      	subs	r0, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	440b      	add	r3, r1
 8001e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e26:	3301      	adds	r3, #1
 8001e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf0c      	ite	eq
 8001e30:	2301      	moveq	r3, #1
 8001e32:	2300      	movne	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	e012      	b.n	8001e5e <HAL_I2C_Init+0x18e>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1e58      	subs	r0, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	0099      	lsls	r1, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bf0c      	ite	eq
 8001e58:	2301      	moveq	r3, #1
 8001e5a:	2300      	movne	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_I2C_Init+0x196>
 8001e62:	2301      	movs	r3, #1
 8001e64:	e022      	b.n	8001eac <HAL_I2C_Init+0x1dc>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10e      	bne.n	8001e8c <HAL_I2C_Init+0x1bc>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1e58      	subs	r0, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	440b      	add	r3, r1
 8001e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e80:	3301      	adds	r3, #1
 8001e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	e00f      	b.n	8001eac <HAL_I2C_Init+0x1dc>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	1e58      	subs	r0, r3, #1
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	0099      	lsls	r1, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	6809      	ldr	r1, [r1, #0]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6911      	ldr	r1, [r2, #16]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68d2      	ldr	r2, [r2, #12]
 8001ee6:	4311      	orrs	r1, r2
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	000186a0 	.word	0x000186a0
 8001f48:	001e847f 	.word	0x001e847f
 8001f4c:	003d08ff 	.word	0x003d08ff
 8001f50:	431bde83 	.word	0x431bde83
 8001f54:	10624dd3 	.word	0x10624dd3

08001f58 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	; 0x28
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	813b      	strh	r3, [r7, #8]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f76:	f7ff f839 	bl	8000fec <HAL_GetTick>
 8001f7a:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 812e 	bne.w	80021e6 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f8a:	4b99      	ldr	r3, [pc, #612]	; (80021f0 <HAL_I2C_Mem_Write_DMA+0x298>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	08db      	lsrs	r3, r3, #3
 8001f90:	4a98      	ldr	r2, [pc, #608]	; (80021f4 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a1a      	lsrs	r2, r3, #8
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009a      	lsls	r2, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d116      	bne.n	8001fde <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2220      	movs	r2, #32
 8001fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f043 0220 	orr.w	r2, r3, #32
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e104      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d0db      	beq.n	8001fa4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_I2C_Mem_Write_DMA+0xa2>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0f6      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d007      	beq.n	8002020 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0201 	orr.w	r2, r2, #1
 800201e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2221      	movs	r2, #33	; 0x21
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2240      	movs	r2, #64	; 0x40
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800204a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8002050:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->XferSize > 0U)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80a9 	beq.w	80021be <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002070:	2b00      	cmp	r3, #0
 8002072:	d02a      	beq.n	80020ca <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	4a60      	ldr	r2, [pc, #384]	; (80021fc <HAL_I2C_Mem_Write_DMA+0x2a4>)
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002080:	4a5f      	ldr	r2, [pc, #380]	; (8002200 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002088:	2200      	movs	r2, #0
 800208a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	2200      	movs	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002098:	2200      	movs	r2, #0
 800209a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a0:	2200      	movs	r2, #0
 80020a2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	4619      	mov	r1, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3310      	adds	r3, #16
 80020b4:	461a      	mov	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	f7ff f987 	bl	80013cc <HAL_DMA_Start_IT>
 80020be:	4603      	mov	r3, r0
 80020c0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80020c2:	7efb      	ldrb	r3, [r7, #27]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d166      	bne.n	8002196 <HAL_I2C_Mem_Write_DMA+0x23e>
 80020c8:	e013      	b.n	80020f2 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e07a      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80020f2:	88f8      	ldrh	r0, [r7, #6]
 80020f4:	893a      	ldrh	r2, [r7, #8]
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	9301      	str	r3, [sp, #4]
 80020fc:	2323      	movs	r3, #35	; 0x23
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4603      	mov	r3, r0
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f001 fd70 	bl	8003be8 <I2C_RequestMemoryWrite>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d022      	beq.n	8002154 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9b2 	bl	800147c <HAL_DMA_Abort_IT>
 8002118:	4603      	mov	r3, r0
 800211a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002120:	2200      	movs	r2, #0
 8002122:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002132:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2200      	movs	r2, #0
 8002138:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0201 	bic.w	r2, r2, #1
 800214e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e049      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002180:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002190:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e028      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2220      	movs	r2, #32
 800219a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0210 	orr.w	r2, r3, #16
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e014      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2220      	movs	r2, #32
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 80021e6:	2302      	movs	r3, #2
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000012c 	.word	0x2000012c
 80021f4:	14f8b589 	.word	0x14f8b589
 80021f8:	ffff0000 	.word	0xffff0000
 80021fc:	08003d15 	.word	0x08003d15
 8002200:	08003ebf 	.word	0x08003ebf

08002204 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	460b      	mov	r3, r1
 8002212:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7fe feea 	bl	8000fec <HAL_GetTick>
 8002218:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b20      	cmp	r3, #32
 8002228:	f040 8111 	bne.w	800244e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	2319      	movs	r3, #25
 8002232:	2201      	movs	r2, #1
 8002234:	4988      	ldr	r1, [pc, #544]	; (8002458 <HAL_I2C_IsDeviceReady+0x254>)
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f001 ff26 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002242:	2302      	movs	r3, #2
 8002244:	e104      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_IsDeviceReady+0x50>
 8002250:	2302      	movs	r3, #2
 8002252:	e0fd      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b01      	cmp	r3, #1
 8002268:	d007      	beq.n	800227a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002288:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2224      	movs	r2, #36	; 0x24
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4a70      	ldr	r2, [pc, #448]	; (800245c <HAL_I2C_IsDeviceReady+0x258>)
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022ac:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f001 fee4 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00d      	beq.n	80022e2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022d4:	d103      	bne.n	80022de <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e0b6      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022e2:	897b      	ldrh	r3, [r7, #10]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	461a      	mov	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022f0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fe7b 	bl	8000fec <HAL_GetTick>
 80022f6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b02      	cmp	r3, #2
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
 8002324:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002326:	e025      	b.n	8002374 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002328:	f7fe fe60 	bl	8000fec <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d302      	bcc.n	800233e <HAL_I2C_IsDeviceReady+0x13a>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22a0      	movs	r2, #160	; 0xa0
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b02      	cmp	r3, #2
 8002352:	bf0c      	ite	eq
 8002354:	2301      	moveq	r3, #1
 8002356:	2300      	movne	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2ba0      	cmp	r3, #160	; 0xa0
 800237e:	d005      	beq.n	800238c <HAL_I2C_IsDeviceReady+0x188>
 8002380:	7dfb      	ldrb	r3, [r7, #23]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d102      	bne.n	800238c <HAL_I2C_IsDeviceReady+0x188>
 8002386:	7dbb      	ldrb	r3, [r7, #22]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0cd      	beq.n	8002328 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d129      	bne.n	80023f6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b2:	2300      	movs	r3, #0
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	613b      	str	r3, [r7, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	2319      	movs	r3, #25
 80023ce:	2201      	movs	r2, #1
 80023d0:	4921      	ldr	r1, [pc, #132]	; (8002458 <HAL_I2C_IsDeviceReady+0x254>)
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f001 fe58 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e036      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e02c      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800240e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	490f      	ldr	r1, [pc, #60]	; (8002458 <HAL_I2C_IsDeviceReady+0x254>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f001 fe34 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e012      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	3301      	adds	r3, #1
 800242e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	429a      	cmp	r2, r3
 8002436:	f4ff af32 	bcc.w	800229e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	00100002 	.word	0x00100002
 800245c:	ffff0000 	.word	0xffff0000

08002460 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002480:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b10      	cmp	r3, #16
 800248e:	d003      	beq.n	8002498 <HAL_I2C_EV_IRQHandler+0x38>
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	f040 80bd 	bne.w	8002612 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_I2C_EV_IRQHandler+0x6e>
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80024b8:	d003      	beq.n	80024c2 <HAL_I2C_EV_IRQHandler+0x62>
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80024c0:	d101      	bne.n	80024c6 <HAL_I2C_EV_IRQHandler+0x66>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_I2C_EV_IRQHandler+0x68>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	f000 812e 	beq.w	800272a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00c      	beq.n	80024f2 <HAL_I2C_EV_IRQHandler+0x92>
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	0a5b      	lsrs	r3, r3, #9
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f001 ff48 	bl	800437a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fd66 	bl	8002fbc <I2C_Master_SB>
 80024f0:	e08e      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_I2C_EV_IRQHandler+0xb2>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	0a5b      	lsrs	r3, r3, #9
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fddc 	bl	80030c8 <I2C_Master_ADD10>
 8002510:	e07e      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	085b      	lsrs	r3, r3, #1
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d009      	beq.n	8002532 <HAL_I2C_EV_IRQHandler+0xd2>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	0a5b      	lsrs	r3, r3, #9
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 fdf6 	bl	800311c <I2C_Master_ADDR>
 8002530:	e06e      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d037      	beq.n	80025ae <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800254c:	f000 80ef 	beq.w	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	09db      	lsrs	r3, r3, #7
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00f      	beq.n	800257c <HAL_I2C_EV_IRQHandler+0x11c>
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	0a9b      	lsrs	r3, r3, #10
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d009      	beq.n	800257c <HAL_I2C_EV_IRQHandler+0x11c>
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f9f3 	bl	8002960 <I2C_MasterTransmit_TXE>
 800257a:	e049      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80d2 	beq.w	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	0a5b      	lsrs	r3, r3, #9
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	f000 80cb 	beq.w	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b10      	cmp	r3, #16
 800259c:	d103      	bne.n	80025a6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fa7a 	bl	8002a98 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025a4:	e0c3      	b.n	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fade 	bl	8002b68 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ac:	e0bf      	b.n	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025bc:	f000 80b7 	beq.w	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00f      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x18c>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d009      	beq.n	80025ec <HAL_I2C_EV_IRQHandler+0x18c>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d103      	bne.n	80025ec <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fb4e 	bl	8002c86 <I2C_MasterReceive_RXNE>
 80025ea:	e011      	b.n	8002610 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 809a 	beq.w	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	0a5b      	lsrs	r3, r3, #9
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8093 	beq.w	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fbed 	bl	8002de8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800260e:	e08e      	b.n	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
 8002610:	e08d      	b.n	800272e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e007      	b.n	8002634 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	085b      	lsrs	r3, r3, #1
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <HAL_I2C_EV_IRQHandler+0x206>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	0a5b      	lsrs	r3, r3, #9
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 ffab 	bl	80035ba <I2C_Slave_ADDR>
 8002664:	e066      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d009      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x226>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	0a5b      	lsrs	r3, r3, #9
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 ffe0 	bl	8003644 <I2C_Slave_STOPF>
 8002684:	e056      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002686:	7bbb      	ldrb	r3, [r7, #14]
 8002688:	2b21      	cmp	r3, #33	; 0x21
 800268a:	d002      	beq.n	8002692 <HAL_I2C_EV_IRQHandler+0x232>
 800268c:	7bbb      	ldrb	r3, [r7, #14]
 800268e:	2b29      	cmp	r3, #41	; 0x29
 8002690:	d125      	bne.n	80026de <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	09db      	lsrs	r3, r3, #7
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00f      	beq.n	80026be <HAL_I2C_EV_IRQHandler+0x25e>
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	0a9b      	lsrs	r3, r3, #10
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <HAL_I2C_EV_IRQHandler+0x25e>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 fec1 	bl	800343e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026bc:	e039      	b.n	8002732 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d033      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0x2d2>
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	0a5b      	lsrs	r3, r3, #9
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d02d      	beq.n	8002732 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 feee 	bl	80034b8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026dc:	e029      	b.n	8002732 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	099b      	lsrs	r3, r3, #6
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00f      	beq.n	800270a <HAL_I2C_EV_IRQHandler+0x2aa>
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	0a9b      	lsrs	r3, r3, #10
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_I2C_EV_IRQHandler+0x2aa>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fef9 	bl	80034fa <I2C_SlaveReceive_RXNE>
 8002708:	e014      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00e      	beq.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	0a5b      	lsrs	r3, r3, #9
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 ff27 	bl	8003576 <I2C_SlaveReceive_BTF>
 8002728:	e004      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800272a:	bf00      	nop
 800272c:	e002      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800272e:	bf00      	nop
 8002730:	e000      	b.n	8002734 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002732:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002734:	3720      	adds	r7, #32
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08a      	sub	sp, #40	; 0x28
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800275c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <HAL_I2C_ER_IRQHandler+0x4e>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002786:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	0a5b      	lsrs	r3, r3, #9
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <HAL_I2C_ER_IRQHandler+0x78>
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f043 0302 	orr.w	r3, r3, #2
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80027b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	0a9b      	lsrs	r3, r3, #10
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03f      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0x104>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	0a1b      	lsrs	r3, r3, #8
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d039      	beq.n	800283e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80027ca:	7efb      	ldrb	r3, [r7, #27]
 80027cc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027e4:	7ebb      	ldrb	r3, [r7, #26]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d112      	bne.n	8002810 <HAL_I2C_ER_IRQHandler+0xd6>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10f      	bne.n	8002810 <HAL_I2C_ER_IRQHandler+0xd6>
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b21      	cmp	r3, #33	; 0x21
 80027f4:	d008      	beq.n	8002808 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b29      	cmp	r3, #41	; 0x29
 80027fa:	d005      	beq.n	8002808 <HAL_I2C_ER_IRQHandler+0xce>
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b28      	cmp	r3, #40	; 0x28
 8002800:	d106      	bne.n	8002810 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b21      	cmp	r3, #33	; 0x21
 8002806:	d103      	bne.n	8002810 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f001 f84b 	bl	80038a4 <I2C_Slave_AF>
 800280e:	e016      	b.n	800283e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002818:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f043 0304 	orr.w	r3, r3, #4
 8002820:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002822:	7efb      	ldrb	r3, [r7, #27]
 8002824:	2b10      	cmp	r3, #16
 8002826:	d002      	beq.n	800282e <HAL_I2C_ER_IRQHandler+0xf4>
 8002828:	7efb      	ldrb	r3, [r7, #27]
 800282a:	2b40      	cmp	r3, #64	; 0x40
 800282c:	d107      	bne.n	800283e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	0adb      	lsrs	r3, r3, #11
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00e      	beq.n	8002868 <HAL_I2C_ER_IRQHandler+0x12e>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d008      	beq.n	8002868 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	f043 0308 	orr.w	r3, r3, #8
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8002866:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f001 f882 	bl	8003984 <I2C_ITError>
  }
}
 8002880:	bf00      	nop
 8002882:	3728      	adds	r7, #40	; 0x28
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
 80028e4:	4613      	mov	r3, r2
 80028e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002952:	b2db      	uxtb	r3, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002976:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b00      	cmp	r3, #0
 8002984:	d150      	bne.n	8002a28 <I2C_MasterTransmit_TXE+0xc8>
 8002986:	7bfb      	ldrb	r3, [r7, #15]
 8002988:	2b21      	cmp	r3, #33	; 0x21
 800298a:	d14d      	bne.n	8002a28 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b08      	cmp	r3, #8
 8002990:	d01d      	beq.n	80029ce <I2C_MasterTransmit_TXE+0x6e>
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b20      	cmp	r3, #32
 8002996:	d01a      	beq.n	80029ce <I2C_MasterTransmit_TXE+0x6e>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800299e:	d016      	beq.n	80029ce <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029ae:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2211      	movs	r2, #17
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2220      	movs	r2, #32
 80029c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff5e 	bl	8002888 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029cc:	e060      	b.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80029dc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b40      	cmp	r3, #64	; 0x40
 8002a06:	d107      	bne.n	8002a18 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7fe fa7b 	bl	8000f0c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a16:	e03b      	b.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff31 	bl	8002888 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a26:	e033      	b.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b21      	cmp	r3, #33	; 0x21
 8002a2c:	d005      	beq.n	8002a3a <I2C_MasterTransmit_TXE+0xda>
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	2b40      	cmp	r3, #64	; 0x40
 8002a32:	d12d      	bne.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	2b22      	cmp	r3, #34	; 0x22
 8002a38:	d12a      	bne.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d108      	bne.n	8002a56 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a52:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a54:	e01c      	b.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d103      	bne.n	8002a6a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f880 	bl	8002b68 <I2C_MemoryTransmit_TXE_BTF>
}
 8002a68:	e012      	b.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	781a      	ldrb	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a8e:	e7ff      	b.n	8002a90 <I2C_MasterTransmit_TXE+0x130>
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b21      	cmp	r3, #33	; 0x21
 8002ab0:	d156      	bne.n	8002b60 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002ae0:	e03e      	b.n	8002b60 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	d01d      	beq.n	8002b24 <I2C_MasterTransmit_BTF+0x8c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d01a      	beq.n	8002b24 <I2C_MasterTransmit_BTF+0x8c>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af4:	d016      	beq.n	8002b24 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b04:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2211      	movs	r2, #17
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f7ff feb3 	bl	8002888 <HAL_I2C_MasterTxCpltCallback>
}
 8002b22:	e01d      	b.n	8002b60 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b32:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b42:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff fe94 	bl	8002888 <HAL_I2C_MasterTxCpltCallback>
}
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b76:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d11d      	bne.n	8002bbc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d10b      	bne.n	8002ba0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b98:	1c9a      	adds	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002b9e:	e06e      	b.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	121b      	asrs	r3, r3, #8
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bba:	e060      	b.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d10b      	bne.n	8002bdc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bda:	e050      	b.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d14c      	bne.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b22      	cmp	r3, #34	; 0x22
 8002be8:	d108      	bne.n	8002bfc <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf8:	601a      	str	r2, [r3, #0]
}
 8002bfa:	e040      	b.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	2b21      	cmp	r3, #33	; 0x21
 8002c0a:	d112      	bne.n	8002c32 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	781a      	ldrb	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c30:	e025      	b.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d120      	bne.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b21      	cmp	r3, #33	; 0x21
 8002c40:	d11d      	bne.n	8002c7e <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c50:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c60:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fe f947 	bl	8000f0c <HAL_I2C_MemTxCpltCallback>
}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b22      	cmp	r3, #34	; 0x22
 8002c98:	f040 80a2 	bne.w	8002de0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d921      	bls.n	8002cee <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	691a      	ldr	r2, [r3, #16]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	f040 8082 	bne.w	8002de0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cea:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002cec:	e078      	b.n	8002de0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d074      	beq.n	8002de0 <I2C_MasterReceive_RXNE+0x15a>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d002      	beq.n	8002d02 <I2C_MasterReceive_RXNE+0x7c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d16e      	bne.n	8002de0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f001 fad8 	bl	80042b8 <I2C_WaitOnSTOPRequestThroughIT>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d142      	bne.n	8002d94 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d2c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	1c5a      	adds	r2, r3, #1
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b40      	cmp	r3, #64	; 0x40
 8002d66:	d10a      	bne.n	8002d7e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fdc6 	bl	8002908 <HAL_I2C_MemRxCpltCallback>
}
 8002d7c:	e030      	b.n	8002de0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2212      	movs	r2, #18
 8002d8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fd85 	bl	800289c <HAL_I2C_MasterRxCpltCallback>
}
 8002d92:	e025      	b.n	8002de0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002da2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	b29a      	uxth	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff fd9e 	bl	800291c <HAL_I2C_ErrorCallback>
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d11b      	bne.n	8002e38 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e36:	e0bd      	b.n	8002fb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d129      	bne.n	8002e96 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d00a      	beq.n	8002e6e <I2C_MasterReceive_BTF+0x86>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d007      	beq.n	8002e6e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e94:	e08e      	b.n	8002fb4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d176      	bne.n	8002f8e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <I2C_MasterReceive_BTF+0xc4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d108      	bne.n	8002ebe <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e019      	b.n	8002ef2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d002      	beq.n	8002eca <I2C_MasterReceive_BTF+0xe2>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d108      	bne.n	8002edc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	e00a      	b.n	8002ef2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b10      	cmp	r3, #16
 8002ee0:	d007      	beq.n	8002ef2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	3b01      	subs	r3, #1
 8002f38:	b29a      	uxth	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f4c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b40      	cmp	r3, #64	; 0x40
 8002f60:	d10a      	bne.n	8002f78 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff fcc9 	bl	8002908 <HAL_I2C_MemRxCpltCallback>
}
 8002f76:	e01d      	b.n	8002fb4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2212      	movs	r2, #18
 8002f84:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7ff fc88 	bl	800289c <HAL_I2C_MasterRxCpltCallback>
}
 8002f8c:	e012      	b.n	8002fb4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fb4:	bf00      	nop
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b40      	cmp	r3, #64	; 0x40
 8002fce:	d117      	bne.n	8003000 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002fea:	e067      	b.n	80030bc <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	611a      	str	r2, [r3, #16]
}
 8002ffe:	e05d      	b.n	80030bc <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d133      	bne.n	8003072 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b21      	cmp	r3, #33	; 0x21
 8003014:	d109      	bne.n	800302a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003026:	611a      	str	r2, [r3, #16]
 8003028:	e008      	b.n	800303c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	2b00      	cmp	r3, #0
 8003042:	d004      	beq.n	800304e <I2C_Master_SB+0x92>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	2b00      	cmp	r3, #0
 8003054:	d032      	beq.n	80030bc <I2C_Master_SB+0x100>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d02d      	beq.n	80030bc <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800306e:	605a      	str	r2, [r3, #4]
}
 8003070:	e024      	b.n	80030bc <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	b29b      	uxth	r3, r3
 8003080:	11db      	asrs	r3, r3, #7
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 0306 	and.w	r3, r3, #6
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f063 030f 	orn	r3, r3, #15
 800308e:	b2da      	uxtb	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	611a      	str	r2, [r3, #16]
}
 8003096:	e011      	b.n	80030bc <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	11db      	asrs	r3, r3, #7
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f003 0306 	and.w	r3, r3, #6
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f063 030e 	orn	r3, r3, #14
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d004      	beq.n	80030ee <I2C_Master_ADD10+0x26>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <I2C_Master_ADD10+0x48>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800310e:	605a      	str	r2, [r3, #4]
  }
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800311c:	b480      	push	{r7}
 800311e:	b091      	sub	sp, #68	; 0x44
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800312a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b22      	cmp	r3, #34	; 0x22
 8003144:	f040 8169 	bne.w	800341a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10f      	bne.n	8003170 <I2C_Master_ADDR+0x54>
 8003150:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	d10b      	bne.n	8003170 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003158:	2300      	movs	r3, #0
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	e160      	b.n	8003432 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003174:	2b00      	cmp	r3, #0
 8003176:	d11d      	bne.n	80031b4 <I2C_Master_ADDR+0x98>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003180:	d118      	bne.n	80031b4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003196:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031a6:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50
 80031b2:	e13e      	b.n	8003432 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d113      	bne.n	80031e6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e115      	b.n	8003412 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	f040 808a 	bne.w	8003306 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d137      	bne.n	800326a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003208:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003218:	d113      	bne.n	8003242 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003228:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	e0e7      	b.n	8003412 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003242:	2300      	movs	r3, #0
 8003244:	623b      	str	r3, [r7, #32]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	623b      	str	r3, [r7, #32]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e0d3      	b.n	8003412 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800326a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326c:	2b08      	cmp	r3, #8
 800326e:	d02e      	beq.n	80032ce <I2C_Master_ADDR+0x1b2>
 8003270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003272:	2b20      	cmp	r3, #32
 8003274:	d02b      	beq.n	80032ce <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2b12      	cmp	r3, #18
 800327a:	d102      	bne.n	8003282 <I2C_Master_ADDR+0x166>
 800327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327e:	2b01      	cmp	r3, #1
 8003280:	d125      	bne.n	80032ce <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	2b04      	cmp	r3, #4
 8003286:	d00e      	beq.n	80032a6 <I2C_Master_ADDR+0x18a>
 8003288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328a:	2b02      	cmp	r3, #2
 800328c:	d00b      	beq.n	80032a6 <I2C_Master_ADDR+0x18a>
 800328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003290:	2b10      	cmp	r3, #16
 8003292:	d008      	beq.n	80032a6 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e007      	b.n	80032b6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	e0a1      	b.n	8003412 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032dc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	e085      	b.n	8003412 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330a:	b29b      	uxth	r3, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d14d      	bne.n	80033ac <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003312:	2b04      	cmp	r3, #4
 8003314:	d016      	beq.n	8003344 <I2C_Master_ADDR+0x228>
 8003316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003318:	2b02      	cmp	r3, #2
 800331a:	d013      	beq.n	8003344 <I2C_Master_ADDR+0x228>
 800331c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331e:	2b10      	cmp	r3, #16
 8003320:	d010      	beq.n	8003344 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003330:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e007      	b.n	8003354 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003352:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800335e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003362:	d117      	bne.n	8003394 <I2C_Master_ADDR+0x278>
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800336a:	d00b      	beq.n	8003384 <I2C_Master_ADDR+0x268>
 800336c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336e:	2b01      	cmp	r3, #1
 8003370:	d008      	beq.n	8003384 <I2C_Master_ADDR+0x268>
 8003372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003374:	2b08      	cmp	r3, #8
 8003376:	d005      	beq.n	8003384 <I2C_Master_ADDR+0x268>
 8003378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800337a:	2b10      	cmp	r3, #16
 800337c:	d002      	beq.n	8003384 <I2C_Master_ADDR+0x268>
 800337e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003380:	2b20      	cmp	r3, #32
 8003382:	d107      	bne.n	8003394 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003392:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	617b      	str	r3, [r7, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	e032      	b.n	8003412 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033ba:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ca:	d117      	bne.n	80033fc <I2C_Master_ADDR+0x2e0>
 80033cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d2:	d00b      	beq.n	80033ec <I2C_Master_ADDR+0x2d0>
 80033d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d008      	beq.n	80033ec <I2C_Master_ADDR+0x2d0>
 80033da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d005      	beq.n	80033ec <I2C_Master_ADDR+0x2d0>
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d002      	beq.n	80033ec <I2C_Master_ADDR+0x2d0>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	d107      	bne.n	80033fc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033fa:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	613b      	str	r3, [r7, #16]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003418:	e00b      	b.n	8003432 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	60fb      	str	r3, [r7, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	e7ff      	b.n	8003432 <I2C_Master_ADDR+0x316>
 8003432:	bf00      	nop
 8003434:	3744      	adds	r7, #68	; 0x44
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800344c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d02b      	beq.n	80034b0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	781a      	ldrb	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b01      	subs	r3, #1
 8003476:	b29a      	uxth	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d114      	bne.n	80034b0 <I2C_SlaveTransmit_TXE+0x72>
 8003486:	7bfb      	ldrb	r3, [r7, #15]
 8003488:	2b29      	cmp	r3, #41	; 0x29
 800348a:	d111      	bne.n	80034b0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2221      	movs	r2, #33	; 0x21
 80034a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2228      	movs	r2, #40	; 0x28
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff fa00 	bl	80028b0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034b0:	bf00      	nop
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d011      	beq.n	80034ee <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b084      	sub	sp, #16
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350e:	b29b      	uxth	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02c      	beq.n	800356e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	d114      	bne.n	800356e <I2C_SlaveReceive_RXNE+0x74>
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b2a      	cmp	r3, #42	; 0x2a
 8003548:	d111      	bne.n	800356e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003558:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2222      	movs	r2, #34	; 0x22
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2228      	movs	r2, #40	; 0x28
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff f9ab 	bl	80028c4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d012      	beq.n	80035ae <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691a      	ldr	r2, [r3, #16]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	1c5a      	adds	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	3b01      	subs	r3, #1
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035d4:	2b28      	cmp	r3, #40	; 0x28
 80035d6:	d127      	bne.n	8003628 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035e6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	089b      	lsrs	r3, r3, #2
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035f4:	2301      	movs	r3, #1
 80035f6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	09db      	lsrs	r3, r3, #7
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d103      	bne.n	800360c <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	81bb      	strh	r3, [r7, #12]
 800360a:	e002      	b.n	8003612 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800361a:	89ba      	ldrh	r2, [r7, #12]
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff f959 	bl	80028d8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003626:	e008      	b.n	800363a <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0202 	mvn.w	r2, #2
 8003630:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003652:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003662:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003664:	2300      	movs	r3, #0
 8003666:	60bb      	str	r3, [r7, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003690:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036a0:	d172      	bne.n	8003788 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b22      	cmp	r3, #34	; 0x22
 80036a6:	d002      	beq.n	80036ae <I2C_Slave_STOPF+0x6a>
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b2a      	cmp	r3, #42	; 0x2a
 80036ac:	d135      	bne.n	800371a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036e0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe f874 	bl	80017d4 <HAL_DMA_GetState>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d049      	beq.n	8003786 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	4a69      	ldr	r2, [pc, #420]	; (800389c <I2C_Slave_STOPF+0x258>)
 80036f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd febc 	bl	800147c <HAL_DMA_Abort_IT>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d03d      	beq.n	8003786 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003714:	4610      	mov	r0, r2
 8003716:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003718:	e035      	b.n	8003786 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	b29a      	uxth	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f043 0204 	orr.w	r2, r3, #4
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800374c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe f83e 	bl	80017d4 <HAL_DMA_GetState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d014      	beq.n	8003788 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	4a4e      	ldr	r2, [pc, #312]	; (800389c <I2C_Slave_STOPF+0x258>)
 8003764:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fe86 	bl	800147c <HAL_DMA_Abort_IT>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003780:	4610      	mov	r0, r2
 8003782:	4798      	blx	r3
 8003784:	e000      	b.n	8003788 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003786:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d03e      	beq.n	8003810 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b04      	cmp	r3, #4
 800379e:	d112      	bne.n	80037c6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d112      	bne.n	80037fa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691a      	ldr	r2, [r3, #16]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f043 0204 	orr.w	r2, r3, #4
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f8b3 	bl	8003984 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800381e:	e039      	b.n	8003894 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	2b2a      	cmp	r3, #42	; 0x2a
 8003824:	d109      	bne.n	800383a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2228      	movs	r2, #40	; 0x28
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff f845 	bl	80028c4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b28      	cmp	r3, #40	; 0x28
 8003844:	d111      	bne.n	800386a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a15      	ldr	r2, [pc, #84]	; (80038a0 <I2C_Slave_STOPF+0x25c>)
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff f846 	bl	80028f4 <HAL_I2C_ListenCpltCallback>
}
 8003868:	e014      	b.n	8003894 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	2b22      	cmp	r3, #34	; 0x22
 8003870:	d002      	beq.n	8003878 <I2C_Slave_STOPF+0x234>
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b22      	cmp	r3, #34	; 0x22
 8003876:	d10d      	bne.n	8003894 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2220      	movs	r2, #32
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff f818 	bl	80028c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8003894:	bf00      	nop
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	08003f39 	.word	0x08003f39
 80038a0:	ffff0000 	.word	0xffff0000

080038a4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d002      	beq.n	80038c6 <I2C_Slave_AF+0x22>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d129      	bne.n	800391a <I2C_Slave_AF+0x76>
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b28      	cmp	r3, #40	; 0x28
 80038ca:	d126      	bne.n	800391a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <I2C_Slave_AF+0xdc>)
 80038d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038e0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ea:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fe ffee 	bl	80028f4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003918:	e02e      	b.n	8003978 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	2b21      	cmp	r3, #33	; 0x21
 800391e:	d126      	bne.n	800396e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <I2C_Slave_AF+0xdc>)
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2221      	movs	r2, #33	; 0x21
 800392a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800394a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003954:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003964:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fe ffa2 	bl	80028b0 <HAL_I2C_SlaveTxCpltCallback>
}
 800396c:	e004      	b.n	8003978 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003976:	615a      	str	r2, [r3, #20]
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	ffff0000 	.word	0xffff0000

08003984 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003992:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800399c:	7bbb      	ldrb	r3, [r7, #14]
 800399e:	2b10      	cmp	r3, #16
 80039a0:	d002      	beq.n	80039a8 <I2C_ITError+0x24>
 80039a2:	7bbb      	ldrb	r3, [r7, #14]
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d10a      	bne.n	80039be <I2C_ITError+0x3a>
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b22      	cmp	r3, #34	; 0x22
 80039ac:	d107      	bne.n	80039be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039c4:	2b28      	cmp	r3, #40	; 0x28
 80039c6:	d107      	bne.n	80039d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2228      	movs	r2, #40	; 0x28
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039d6:	e015      	b.n	8003a04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e6:	d00a      	beq.n	80039fe <I2C_ITError+0x7a>
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	2b60      	cmp	r3, #96	; 0x60
 80039ec:	d007      	beq.n	80039fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a12:	d162      	bne.n	8003ada <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d020      	beq.n	8003a74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a36:	4a6a      	ldr	r2, [pc, #424]	; (8003be0 <I2C_ITError+0x25c>)
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fd1c 	bl	800147c <HAL_DMA_Abort_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 8089 	beq.w	8003b5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0201 	bic.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4798      	blx	r3
 8003a72:	e074      	b.n	8003b5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	4a59      	ldr	r2, [pc, #356]	; (8003be0 <I2C_ITError+0x25c>)
 8003a7a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fd fcfb 	bl	800147c <HAL_DMA_Abort_IT>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d068      	beq.n	8003b5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a96:	2b40      	cmp	r3, #64	; 0x40
 8003a98:	d10b      	bne.n	8003ab2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4798      	blx	r3
 8003ad8:	e041      	b.n	8003b5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b60      	cmp	r3, #96	; 0x60
 8003ae4:	d125      	bne.n	8003b32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d10b      	bne.n	8003b1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fe ff00 	bl	8002930 <HAL_I2C_AbortCpltCallback>
 8003b30:	e015      	b.n	8003b5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d10b      	bne.n	8003b58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7fe fedf 	bl	800291c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10e      	bne.n	8003b8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d113      	bne.n	8003bd8 <I2C_ITError+0x254>
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b28      	cmp	r3, #40	; 0x28
 8003bb4:	d110      	bne.n	8003bd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <I2C_ITError+0x260>)
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fe fe8e 	bl	80028f4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bd8:	bf00      	nop
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	08003f39 	.word	0x08003f39
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	6a3b      	ldr	r3, [r7, #32]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fa32 	bl	8004088 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00d      	beq.n	8003c46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c38:	d103      	bne.n	8003c42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e05f      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c46:	897b      	ldrh	r3, [r7, #10]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	6a3a      	ldr	r2, [r7, #32]
 8003c5a:	492d      	ldr	r1, [pc, #180]	; (8003d10 <I2C_RequestMemoryWrite+0x128>)
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fa6a 	bl	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e04c      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c84:	6a39      	ldr	r1, [r7, #32]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fad4 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d107      	bne.n	8003caa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e02b      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cae:	88fb      	ldrh	r3, [r7, #6]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb4:	893b      	ldrh	r3, [r7, #8]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	611a      	str	r2, [r3, #16]
 8003cbe:	e021      	b.n	8003d04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cc0:	893b      	ldrh	r3, [r7, #8]
 8003cc2:	0a1b      	lsrs	r3, r3, #8
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	6a39      	ldr	r1, [r7, #32]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 faae 	bl	8004234 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00d      	beq.n	8003cfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d107      	bne.n	8003cf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e005      	b.n	8003d06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cfa:	893b      	ldrh	r3, [r7, #8]
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	00010002 	.word	0x00010002

08003d14 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d30:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d46:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d54:	2200      	movs	r2, #0
 8003d56:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	2200      	movs	r2, #0
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003d6e:	2b21      	cmp	r3, #33	; 0x21
 8003d70:	d007      	beq.n	8003d82 <I2C_DMAXferCplt+0x6e>
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8003d78:	2b22      	cmp	r3, #34	; 0x22
 8003d7a:	d131      	bne.n	8003de0 <I2C_DMAXferCplt+0xcc>
 8003d7c:	7cbb      	ldrb	r3, [r7, #18]
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d12e      	bne.n	8003de0 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d90:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003d98:	7cfb      	ldrb	r3, [r7, #19]
 8003d9a:	2b29      	cmp	r3, #41	; 0x29
 8003d9c:	d10a      	bne.n	8003db4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2221      	movs	r2, #33	; 0x21
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2228      	movs	r2, #40	; 0x28
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f7fe fd7f 	bl	80028b0 <HAL_I2C_SlaveTxCpltCallback>
 8003db2:	e00c      	b.n	8003dce <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003db4:	7cfb      	ldrb	r3, [r7, #19]
 8003db6:	2b2a      	cmp	r3, #42	; 0x2a
 8003db8:	d109      	bne.n	8003dce <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2222      	movs	r2, #34	; 0x22
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2228      	movs	r2, #40	; 0x28
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003dc8:	6978      	ldr	r0, [r7, #20]
 8003dca:	f7fe fd7b 	bl	80028c4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003ddc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003dde:	e06a      	b.n	8003eb6 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d064      	beq.n	8003eb6 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e04:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003e14:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e1c:	d009      	beq.n	8003e32 <I2C_DMAXferCplt+0x11e>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d006      	beq.n	8003e32 <I2C_DMAXferCplt+0x11e>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003e2a:	d002      	beq.n	8003e32 <I2C_DMAXferCplt+0x11e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d107      	bne.n	8003e42 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e40:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e50:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e60:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003e70:	6978      	ldr	r0, [r7, #20]
 8003e72:	f7fe fd53 	bl	800291c <HAL_I2C_ErrorCallback>
}
 8003e76:	e01e      	b.n	8003eb6 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b40      	cmp	r3, #64	; 0x40
 8003e8a:	d10a      	bne.n	8003ea2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003e9a:	6978      	ldr	r0, [r7, #20]
 8003e9c:	f7fe fd34 	bl	8002908 <HAL_I2C_MemRxCpltCallback>
}
 8003ea0:	e009      	b.n	8003eb6 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2212      	movs	r2, #18
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003eb0:	6978      	ldr	r0, [r7, #20]
 8003eb2:	f7fe fcf3 	bl	800289c <HAL_I2C_MasterRxCpltCallback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	2200      	movs	r2, #0
 8003eda:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	2200      	movs	r2, #0
 8003eea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7fd fc7f 	bl	80017f0 <HAL_DMA_GetError>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d01b      	beq.n	8003f30 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f043 0210 	orr.w	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7fe fcf6 	bl	800291c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f52:	4b4b      	ldr	r3, [pc, #300]	; (8004080 <I2C_DMAAbort+0x148>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	08db      	lsrs	r3, r3, #3
 8003f58:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <I2C_DMAAbort+0x14c>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a1a      	lsrs	r2, r3, #8
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	00da      	lsls	r2, r3, #3
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d106      	bne.n	8003f80 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0220 	orr.w	r2, r3, #32
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f7e:	e00a      	b.n	8003f96 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f94:	d0ea      	beq.n	8003f6c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	2200      	movs	r2, #0
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	2200      	movs	r2, #0
 8003fea:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0201 	bic.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b60      	cmp	r3, #96	; 0x60
 8004006:	d10e      	bne.n	8004026 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	2200      	movs	r2, #0
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800401e:	6978      	ldr	r0, [r7, #20]
 8004020:	f7fe fc86 	bl	8002930 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004024:	e027      	b.n	8004076 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800402c:	2b28      	cmp	r3, #40	; 0x28
 800402e:	d117      	bne.n	8004060 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800404e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	2228      	movs	r2, #40	; 0x28
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800405e:	e007      	b.n	8004070 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004070:	6978      	ldr	r0, [r7, #20]
 8004072:	f7fe fc53 	bl	800291c <HAL_I2C_ErrorCallback>
}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	2000012c 	.word	0x2000012c
 8004084:	14f8b589 	.word	0x14f8b589

08004088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004098:	e025      	b.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040a0:	d021      	beq.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a2:	f7fc ffa3 	bl	8000fec <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d116      	bne.n	80040e6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d2:	f043 0220 	orr.w	r2, r3, #32
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e023      	b.n	800412e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10d      	bne.n	800410c <I2C_WaitOnFlagUntilTimeout+0x84>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	43da      	mvns	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	e00c      	b.n	8004126 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	43da      	mvns	r2, r3
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	4013      	ands	r3, r2
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf0c      	ite	eq
 800411e:	2301      	moveq	r3, #1
 8004120:	2300      	movne	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	461a      	mov	r2, r3
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	429a      	cmp	r2, r3
 800412a:	d0b6      	beq.n	800409a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004144:	e051      	b.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d123      	bne.n	800419e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004164:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800416e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f043 0204 	orr.w	r2, r3, #4
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e046      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041a4:	d021      	beq.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041a6:	f7fc ff21 	bl	8000fec <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d302      	bcc.n	80041bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	f043 0220 	orr.w	r2, r3, #32
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e020      	b.n	800422c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	0c1b      	lsrs	r3, r3, #16
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d10c      	bne.n	800420e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	43da      	mvns	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4013      	ands	r3, r2
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	bf14      	ite	ne
 8004206:	2301      	movne	r3, #1
 8004208:	2300      	moveq	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	e00b      	b.n	8004226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	43da      	mvns	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	bf14      	ite	ne
 8004220:	2301      	movne	r3, #1
 8004222:	2300      	moveq	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d18d      	bne.n	8004146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004240:	e02d      	b.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f86a 	bl	800431c <I2C_IsAcknowledgeFailed>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e02d      	b.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004258:	d021      	beq.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fc fec7 	bl	8000fec <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d116      	bne.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f043 0220 	orr.w	r2, r3, #32
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e007      	b.n	80042ae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b80      	cmp	r3, #128	; 0x80
 80042aa:	d1ca      	bne.n	8004242 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80042c4:	4b13      	ldr	r3, [pc, #76]	; (8004314 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	4a13      	ldr	r2, [pc, #76]	; (8004318 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80042cc:	fba2 2303 	umull	r2, r3, r2, r3
 80042d0:	0a1a      	lsrs	r2, r3, #8
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3b01      	subs	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e008      	b.n	8004308 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004304:	d0e9      	beq.n	80042da <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	2000012c 	.word	0x2000012c
 8004318:	14f8b589 	.word	0x14f8b589

0800431c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004332:	d11b      	bne.n	800436c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800433c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	f043 0204 	orr.w	r2, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800438a:	d103      	bne.n	8004394 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004392:	e007      	b.n	80043a4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800439c:	d102      	bne.n	80043a4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2208      	movs	r2, #8
 80043a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e264      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d075      	beq.n	80044ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ce:	4ba3      	ldr	r3, [pc, #652]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d00c      	beq.n	80043f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043da:	4ba0      	ldr	r3, [pc, #640]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d112      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043e6:	4b9d      	ldr	r3, [pc, #628]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f2:	d10b      	bne.n	800440c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	4b99      	ldr	r3, [pc, #612]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d05b      	beq.n	80044b8 <HAL_RCC_OscConfig+0x108>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d157      	bne.n	80044b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e23f      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004414:	d106      	bne.n	8004424 <HAL_RCC_OscConfig+0x74>
 8004416:	4b91      	ldr	r3, [pc, #580]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a90      	ldr	r2, [pc, #576]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	e01d      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x98>
 800442e:	4b8b      	ldr	r3, [pc, #556]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a8a      	ldr	r2, [pc, #552]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	4b88      	ldr	r3, [pc, #544]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a87      	ldr	r2, [pc, #540]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0xb0>
 8004448:	4b84      	ldr	r3, [pc, #528]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a83      	ldr	r2, [pc, #524]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800444e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b81      	ldr	r3, [pc, #516]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a80      	ldr	r2, [pc, #512]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800445a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800445e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d013      	beq.n	8004490 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004468:	f7fc fdc0 	bl	8000fec <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004470:	f7fc fdbc 	bl	8000fec <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e204      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004482:	4b76      	ldr	r3, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0xc0>
 800448e:	e014      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004490:	f7fc fdac 	bl	8000fec <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004498:	f7fc fda8 	bl	8000fec <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b64      	cmp	r3, #100	; 0x64
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e1f0      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044aa:	4b6c      	ldr	r3, [pc, #432]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0xe8>
 80044b6:	e000      	b.n	80044ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d063      	beq.n	800458e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c6:	4b65      	ldr	r3, [pc, #404]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 030c 	and.w	r3, r3, #12
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d2:	4b62      	ldr	r3, [pc, #392]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d11c      	bne.n	8004518 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <HAL_RCC_OscConfig+0x152>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e1c4      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004502:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4952      	ldr	r1, [pc, #328]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004512:	4313      	orrs	r3, r2
 8004514:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e03a      	b.n	800458e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d020      	beq.n	8004562 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b4f      	ldr	r3, [pc, #316]	; (8004660 <HAL_RCC_OscConfig+0x2b0>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004526:	f7fc fd61 	bl	8000fec <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800452e:	f7fc fd5d 	bl	8000fec <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1a5      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004540:	4b46      	ldr	r3, [pc, #280]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	4940      	ldr	r1, [pc, #256]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800455c:	4313      	orrs	r3, r2
 800455e:	600b      	str	r3, [r1, #0]
 8004560:	e015      	b.n	800458e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004562:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x2b0>)
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fc fd40 	bl	8000fec <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004570:	f7fc fd3c 	bl	8000fec <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e184      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	4b36      	ldr	r3, [pc, #216]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1f0      	bne.n	8004570 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d030      	beq.n	80045fc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a2:	4b30      	ldr	r3, [pc, #192]	; (8004664 <HAL_RCC_OscConfig+0x2b4>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a8:	f7fc fd20 	bl	8000fec <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045b0:	f7fc fd1c 	bl	8000fec <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e164      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80045c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x200>
 80045ce:	e015      	b.n	80045fc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045d0:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_OscConfig+0x2b4>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d6:	f7fc fd09 	bl	8000fec <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045de:	f7fc fd05 	bl	8000fec <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e14d      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f0:	4b1a      	ldr	r3, [pc, #104]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 80045f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 80a0 	beq.w	800474a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461a:	2300      	movs	r3, #0
 800461c:	60bb      	str	r3, [r7, #8]
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a0e      	ldr	r2, [pc, #56]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b0c      	ldr	r3, [pc, #48]	; (800465c <HAL_RCC_OscConfig+0x2ac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_OscConfig+0x2b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d121      	bne.n	800468a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <HAL_RCC_OscConfig+0x2b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a07      	ldr	r2, [pc, #28]	; (8004668 <HAL_RCC_OscConfig+0x2b8>)
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fc fccb 	bl	8000fec <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	e011      	b.n	800467e <HAL_RCC_OscConfig+0x2ce>
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	42470000 	.word	0x42470000
 8004664:	42470e80 	.word	0x42470e80
 8004668:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466c:	f7fc fcbe 	bl	8000fec <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e106      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800467e:	4b85      	ldr	r3, [pc, #532]	; (8004894 <HAL_RCC_OscConfig+0x4e4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d106      	bne.n	80046a0 <HAL_RCC_OscConfig+0x2f0>
 8004692:	4b81      	ldr	r3, [pc, #516]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a80      	ldr	r2, [pc, #512]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
 800469e:	e01c      	b.n	80046da <HAL_RCC_OscConfig+0x32a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	d10c      	bne.n	80046c2 <HAL_RCC_OscConfig+0x312>
 80046a8:	4b7b      	ldr	r3, [pc, #492]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ac:	4a7a      	ldr	r2, [pc, #488]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046ae:	f043 0304 	orr.w	r3, r3, #4
 80046b2:	6713      	str	r3, [r2, #112]	; 0x70
 80046b4:	4b78      	ldr	r3, [pc, #480]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a77      	ldr	r2, [pc, #476]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046ba:	f043 0301 	orr.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	e00b      	b.n	80046da <HAL_RCC_OscConfig+0x32a>
 80046c2:	4b75      	ldr	r3, [pc, #468]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a74      	ldr	r2, [pc, #464]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70
 80046ce:	4b72      	ldr	r3, [pc, #456]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	4a71      	ldr	r2, [pc, #452]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d015      	beq.n	800470e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e2:	f7fc fc83 	bl	8000fec <HAL_GetTick>
 80046e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fc fc7f 	bl	8000fec <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e0c5      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ee      	beq.n	80046ea <HAL_RCC_OscConfig+0x33a>
 800470c:	e014      	b.n	8004738 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470e:	f7fc fc6d 	bl	8000fec <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fc fc69 	bl	8000fec <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0af      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472c:	4b5a      	ldr	r3, [pc, #360]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1ee      	bne.n	8004716 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d105      	bne.n	800474a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800473e:	4b56      	ldr	r3, [pc, #344]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a55      	ldr	r2, [pc, #340]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 809b 	beq.w	800488a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d05c      	beq.n	800481a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d141      	bne.n	80047ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004768:	4b4c      	ldr	r3, [pc, #304]	; (800489c <HAL_RCC_OscConfig+0x4ec>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800476e:	f7fc fc3d 	bl	8000fec <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004776:	f7fc fc39 	bl	8000fec <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e081      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004788:	4b43      	ldr	r3, [pc, #268]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	019b      	lsls	r3, r3, #6
 80047a4:	431a      	orrs	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	3b01      	subs	r3, #1
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	061b      	lsls	r3, r3, #24
 80047b8:	4937      	ldr	r1, [pc, #220]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047be:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCC_OscConfig+0x4ec>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c4:	f7fc fc12 	bl	8000fec <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047cc:	f7fc fc0e 	bl	8000fec <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e056      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0f0      	beq.n	80047cc <HAL_RCC_OscConfig+0x41c>
 80047ea:	e04e      	b.n	800488a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ec:	4b2b      	ldr	r3, [pc, #172]	; (800489c <HAL_RCC_OscConfig+0x4ec>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f2:	f7fc fbfb 	bl	8000fec <HAL_GetTick>
 80047f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fc fbf7 	bl	8000fec <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e03f      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480c:	4b22      	ldr	r3, [pc, #136]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f0      	bne.n	80047fa <HAL_RCC_OscConfig+0x44a>
 8004818:	e037      	b.n	800488a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e032      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004826:	4b1c      	ldr	r3, [pc, #112]	; (8004898 <HAL_RCC_OscConfig+0x4e8>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	699b      	ldr	r3, [r3, #24]
 8004830:	2b01      	cmp	r3, #1
 8004832:	d028      	beq.n	8004886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d121      	bne.n	8004886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d11a      	bne.n	8004886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004856:	4013      	ands	r3, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800485c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800485e:	4293      	cmp	r3, r2
 8004860:	d111      	bne.n	8004886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	085b      	lsrs	r3, r3, #1
 800486e:	3b01      	subs	r3, #1
 8004870:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004872:	429a      	cmp	r2, r3
 8004874:	d107      	bne.n	8004886 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004882:	429a      	cmp	r2, r3
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40007000 	.word	0x40007000
 8004898:	40023800 	.word	0x40023800
 800489c:	42470060 	.word	0x42470060

080048a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0cc      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048b4:	4b68      	ldr	r3, [pc, #416]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d90c      	bls.n	80048dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c2:	4b65      	ldr	r3, [pc, #404]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	b2d2      	uxtb	r2, r2
 80048c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b63      	ldr	r3, [pc, #396]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e0b8      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d020      	beq.n	800492a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048f4:	4b59      	ldr	r3, [pc, #356]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	4a58      	ldr	r2, [pc, #352]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80048fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800490c:	4b53      	ldr	r3, [pc, #332]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a52      	ldr	r2, [pc, #328]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004918:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	494d      	ldr	r1, [pc, #308]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	4313      	orrs	r3, r2
 8004928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d044      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d107      	bne.n	800494e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493e:	4b47      	ldr	r3, [pc, #284]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d119      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e07f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b02      	cmp	r3, #2
 8004954:	d003      	beq.n	800495e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495a:	2b03      	cmp	r3, #3
 800495c:	d107      	bne.n	800496e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800495e:	4b3f      	ldr	r3, [pc, #252]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d109      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e06f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800496e:	4b3b      	ldr	r3, [pc, #236]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e067      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800497e:	4b37      	ldr	r3, [pc, #220]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0203 	bic.w	r2, r3, #3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	4934      	ldr	r1, [pc, #208]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004990:	f7fc fb2c 	bl	8000fec <HAL_GetTick>
 8004994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004996:	e00a      	b.n	80049ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004998:	f7fc fb28 	bl	8000fec <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e04f      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ae:	4b2b      	ldr	r3, [pc, #172]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 020c 	and.w	r2, r3, #12
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	429a      	cmp	r2, r3
 80049be:	d1eb      	bne.n	8004998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d20c      	bcs.n	80049e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ce:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d6:	4b20      	ldr	r3, [pc, #128]	; (8004a58 <HAL_RCC_ClockConfig+0x1b8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d001      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e032      	b.n	8004a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049f4:	4b19      	ldr	r3, [pc, #100]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4916      	ldr	r1, [pc, #88]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d009      	beq.n	8004a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a12:	4b12      	ldr	r3, [pc, #72]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	490e      	ldr	r1, [pc, #56]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a26:	f000 f821 	bl	8004a6c <HAL_RCC_GetSysClockFreq>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	091b      	lsrs	r3, r3, #4
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	490a      	ldr	r1, [pc, #40]	; (8004a60 <HAL_RCC_ClockConfig+0x1c0>)
 8004a38:	5ccb      	ldrb	r3, [r1, r3]
 8004a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a3e:	4a09      	ldr	r2, [pc, #36]	; (8004a64 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a42:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <HAL_RCC_ClockConfig+0x1c8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fa8c 	bl	8000f64 <HAL_InitTick>

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023c00 	.word	0x40023c00
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	08010ea4 	.word	0x08010ea4
 8004a64:	2000012c 	.word	0x2000012c
 8004a68:	20000130 	.word	0x20000130

08004a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a6c:	b5b0      	push	{r4, r5, r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a72:	2100      	movs	r1, #0
 8004a74:	6079      	str	r1, [r7, #4]
 8004a76:	2100      	movs	r1, #0
 8004a78:	60f9      	str	r1, [r7, #12]
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a7e:	2100      	movs	r1, #0
 8004a80:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a82:	4952      	ldr	r1, [pc, #328]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004a84:	6889      	ldr	r1, [r1, #8]
 8004a86:	f001 010c 	and.w	r1, r1, #12
 8004a8a:	2908      	cmp	r1, #8
 8004a8c:	d00d      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x3e>
 8004a8e:	2908      	cmp	r1, #8
 8004a90:	f200 8094 	bhi.w	8004bbc <HAL_RCC_GetSysClockFreq+0x150>
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d002      	beq.n	8004a9e <HAL_RCC_GetSysClockFreq+0x32>
 8004a98:	2904      	cmp	r1, #4
 8004a9a:	d003      	beq.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x38>
 8004a9c:	e08e      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a9e:	4b4c      	ldr	r3, [pc, #304]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004aa0:	60bb      	str	r3, [r7, #8]
       break;
 8004aa2:	e08e      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004aa6:	60bb      	str	r3, [r7, #8]
      break;
 8004aa8:	e08b      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004aaa:	4948      	ldr	r1, [pc, #288]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004aac:	6849      	ldr	r1, [r1, #4]
 8004aae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ab2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ab4:	4945      	ldr	r1, [pc, #276]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ab6:	6849      	ldr	r1, [r1, #4]
 8004ab8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004abc:	2900      	cmp	r1, #0
 8004abe:	d024      	beq.n	8004b0a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac0:	4942      	ldr	r1, [pc, #264]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ac2:	6849      	ldr	r1, [r1, #4]
 8004ac4:	0989      	lsrs	r1, r1, #6
 8004ac6:	4608      	mov	r0, r1
 8004ac8:	f04f 0100 	mov.w	r1, #0
 8004acc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004ad0:	f04f 0500 	mov.w	r5, #0
 8004ad4:	ea00 0204 	and.w	r2, r0, r4
 8004ad8:	ea01 0305 	and.w	r3, r1, r5
 8004adc:	493d      	ldr	r1, [pc, #244]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ade:	fb01 f003 	mul.w	r0, r1, r3
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	fb01 f102 	mul.w	r1, r1, r2
 8004ae8:	1844      	adds	r4, r0, r1
 8004aea:	493a      	ldr	r1, [pc, #232]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004aec:	fba2 0101 	umull	r0, r1, r2, r1
 8004af0:	1863      	adds	r3, r4, r1
 8004af2:	4619      	mov	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	461a      	mov	r2, r3
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	f7fb fb7e 	bl	80001fc <__aeabi_uldivmod>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4613      	mov	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e04a      	b.n	8004ba0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0a:	4b30      	ldr	r3, [pc, #192]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	461a      	mov	r2, r3
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	ea02 0400 	and.w	r4, r2, r0
 8004b22:	ea03 0501 	and.w	r5, r3, r1
 8004b26:	4620      	mov	r0, r4
 8004b28:	4629      	mov	r1, r5
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	014b      	lsls	r3, r1, #5
 8004b34:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b38:	0142      	lsls	r2, r0, #5
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	1b00      	subs	r0, r0, r4
 8004b40:	eb61 0105 	sbc.w	r1, r1, r5
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	018b      	lsls	r3, r1, #6
 8004b4e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b52:	0182      	lsls	r2, r0, #6
 8004b54:	1a12      	subs	r2, r2, r0
 8004b56:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5a:	f04f 0000 	mov.w	r0, #0
 8004b5e:	f04f 0100 	mov.w	r1, #0
 8004b62:	00d9      	lsls	r1, r3, #3
 8004b64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b68:	00d0      	lsls	r0, r2, #3
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	1912      	adds	r2, r2, r4
 8004b70:	eb45 0303 	adc.w	r3, r5, r3
 8004b74:	f04f 0000 	mov.w	r0, #0
 8004b78:	f04f 0100 	mov.w	r1, #0
 8004b7c:	0299      	lsls	r1, r3, #10
 8004b7e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004b82:	0290      	lsls	r0, r2, #10
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4610      	mov	r0, r2
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	f7fb fb32 	bl	80001fc <__aeabi_uldivmod>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	; (8004bcc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	3301      	adds	r3, #1
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb8:	60bb      	str	r3, [r7, #8]
      break;
 8004bba:	e002      	b.n	8004bc2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbc:	4b04      	ldr	r3, [pc, #16]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004bbe:	60bb      	str	r3, [r7, #8]
      break;
 8004bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bdb0      	pop	{r4, r5, r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	00f42400 	.word	0x00f42400
 8004bd4:	017d7840 	.word	0x017d7840

08004bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bdc:	4b03      	ldr	r3, [pc, #12]	; (8004bec <HAL_RCC_GetHCLKFreq+0x14>)
 8004bde:	681b      	ldr	r3, [r3, #0]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	2000012c 	.word	0x2000012c

08004bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bf4:	f7ff fff0 	bl	8004bd8 <HAL_RCC_GetHCLKFreq>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	0a9b      	lsrs	r3, r3, #10
 8004c00:	f003 0307 	and.w	r3, r3, #7
 8004c04:	4903      	ldr	r1, [pc, #12]	; (8004c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c06:	5ccb      	ldrb	r3, [r1, r3]
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40023800 	.word	0x40023800
 8004c14:	08010eb4 	.word	0x08010eb4

08004c18 <_OnButtonPressed>:
 8004c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c1e:	4604      	mov	r4, r0
 8004c20:	f004 f9ee 	bl	8009000 <WIDGET_OrState>
 8004c24:	4620      	mov	r0, r4
 8004c26:	f000 fdd1 	bl	80057cc <GUI_ALLOC_LockH>
 8004c2a:	ab02      	add	r3, sp, #8
 8004c2c:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004c2e:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fdd8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004c38:	07ab      	lsls	r3, r5, #30
 8004c3a:	d503      	bpl.n	8004c44 <_OnButtonPressed+0x2c>
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f005 fea9 	bl	800a996 <WM_NotifyParent>
 8004c44:	b003      	add	sp, #12
 8004c46:	bd30      	pop	{r4, r5, pc}

08004c48 <_OnButtonReleased>:
 8004c48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c52:	f004 f9ea 	bl	800902a <WIDGET_AndState>
 8004c56:	4620      	mov	r0, r4
 8004c58:	f000 fdb8 	bl	80057cc <GUI_ALLOC_LockH>
 8004c5c:	ab02      	add	r3, sp, #8
 8004c5e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8004c60:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004c64:	f9b0 7030 	ldrsh.w	r7, [r0, #48]	; 0x30
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 fdbd 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004c6e:	2d02      	cmp	r5, #2
 8004c70:	d102      	bne.n	8004c78 <_OnButtonReleased+0x30>
 8004c72:	b2b8      	uxth	r0, r7
 8004c74:	f002 fb06 	bl	8007284 <GUI_StoreKey>
 8004c78:	07b3      	lsls	r3, r6, #30
 8004c7a:	d503      	bpl.n	8004c84 <_OnButtonReleased+0x3c>
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f005 fe89 	bl	800a996 <WM_NotifyParent>
 8004c84:	b003      	add	sp, #12
 8004c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c88 <_OnTouchDefault>:
 8004c88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c8a:	460e      	mov	r6, r1
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	f000 fd9d 	bl	80057cc <GUI_ALLOC_LockH>
 8004c92:	ab02      	add	r3, sp, #8
 8004c94:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 8004c96:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f000 fda4 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004ca0:	68f3      	ldr	r3, [r6, #12]
 8004ca2:	b183      	cbz	r3, 8004cc6 <_OnTouchDefault+0x3e>
 8004ca4:	7a1a      	ldrb	r2, [r3, #8]
 8004ca6:	f404 7480 	and.w	r4, r4, #256	; 0x100
 8004caa:	b12a      	cbz	r2, 8004cb8 <_OnTouchDefault+0x30>
 8004cac:	b914      	cbnz	r4, 8004cb4 <_OnTouchDefault+0x2c>
 8004cae:	4628      	mov	r0, r5
 8004cb0:	f7ff ffb2 	bl	8004c18 <_OnButtonPressed>
 8004cb4:	b002      	add	sp, #8
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}
 8004cb8:	2c00      	cmp	r4, #0
 8004cba:	d0fb      	beq.n	8004cb4 <_OnTouchDefault+0x2c>
 8004cbc:	2102      	movs	r1, #2
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f7ff ffc2 	bl	8004c48 <_OnButtonReleased>
 8004cc4:	e7f6      	b.n	8004cb4 <_OnTouchDefault+0x2c>
 8004cc6:	2103      	movs	r1, #3
 8004cc8:	e7f9      	b.n	8004cbe <_OnTouchDefault+0x36>
	...

08004ccc <BUTTON_Callback>:
 8004ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cce:	6844      	ldr	r4, [r0, #4]
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	4601      	mov	r1, r0
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f004 f9bd 	bl	8009054 <WIDGET_HandleActive>
 8004cda:	b1c0      	cbz	r0, 8004d0e <BUTTON_Callback+0x42>
 8004cdc:	682b      	ldr	r3, [r5, #0]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d01a      	beq.n	8004d18 <BUTTON_Callback+0x4c>
 8004ce2:	dc07      	bgt.n	8004cf4 <BUTTON_Callback+0x28>
 8004ce4:	2b0b      	cmp	r3, #11
 8004ce6:	d027      	beq.n	8004d38 <BUTTON_Callback+0x6c>
 8004ce8:	2b0e      	cmp	r3, #14
 8004cea:	d037      	beq.n	8004d5c <BUTTON_Callback+0x90>
 8004cec:	4628      	mov	r0, r5
 8004cee:	f005 fb3f 	bl	800a370 <WM_DefaultProc>
 8004cf2:	e00c      	b.n	8004d0e <BUTTON_Callback+0x42>
 8004cf4:	2b28      	cmp	r3, #40	; 0x28
 8004cf6:	d037      	beq.n	8004d68 <BUTTON_Callback+0x9c>
 8004cf8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8004cfc:	d009      	beq.n	8004d12 <BUTTON_Callback+0x46>
 8004cfe:	2b11      	cmp	r3, #17
 8004d00:	d1f4      	bne.n	8004cec <BUTTON_Callback+0x20>
 8004d02:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <BUTTON_Callback+0xd0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	b113      	cbz	r3, 8004d0e <BUTTON_Callback+0x42>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4798      	blx	r3
 8004d0e:	b003      	add	sp, #12
 8004d10:	bd30      	pop	{r4, r5, pc}
 8004d12:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <BUTTON_Callback+0xd4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	e7f7      	b.n	8004d08 <BUTTON_Callback+0x3c>
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f000 fd57 	bl	80057cc <GUI_ALLOC_LockH>
 8004d1e:	ab02      	add	r3, sp, #8
 8004d20:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004d22:	f843 0d04 	str.w	r0, [r3, #-4]!
 8004d26:	6815      	ldr	r5, [r2, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fd5d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004d2e:	2d00      	cmp	r5, #0
 8004d30:	d0ed      	beq.n	8004d0e <BUTTON_Callback+0x42>
 8004d32:	4620      	mov	r0, r4
 8004d34:	47a8      	blx	r5
 8004d36:	e7ea      	b.n	8004d0e <BUTTON_Callback+0x42>
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f000 fd47 	bl	80057cc <GUI_ALLOC_LockH>
 8004d3e:	ac02      	add	r4, sp, #8
 8004d40:	9001      	str	r0, [sp, #4]
 8004d42:	3068      	adds	r0, #104	; 0x68
 8004d44:	f000 ff12 	bl	8005b6c <GUI_ALLOC_FreePtr>
 8004d48:	f854 0d04 	ldr.w	r0, [r4, #-4]!
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	306c      	adds	r0, #108	; 0x6c
 8004d50:	f000 ff14 	bl	8005b7c <GUI_ALLOC_FreePtrArray>
 8004d54:	4620      	mov	r0, r4
 8004d56:	f000 fd47 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004d5a:	e7c7      	b.n	8004cec <BUTTON_Callback+0x20>
 8004d5c:	68ea      	ldr	r2, [r5, #12]
 8004d5e:	ca0c      	ldmia	r2, {r2, r3}
 8004d60:	2a0d      	cmp	r2, #13
 8004d62:	d00a      	beq.n	8004d7a <BUTTON_Callback+0xae>
 8004d64:	2a20      	cmp	r2, #32
 8004d66:	d012      	beq.n	8004d8e <BUTTON_Callback+0xc2>
 8004d68:	68eb      	ldr	r3, [r5, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1be      	bne.n	8004cec <BUTTON_Callback+0x20>
 8004d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d72:	4620      	mov	r0, r4
 8004d74:	f004 f959 	bl	800902a <WIDGET_AndState>
 8004d78:	e7b8      	b.n	8004cec <BUTTON_Callback+0x20>
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	ddf4      	ble.n	8004d68 <BUTTON_Callback+0x9c>
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7ff ff4a 	bl	8004c18 <_OnButtonPressed>
 8004d84:	2102      	movs	r1, #2
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7ff ff5e 	bl	8004c48 <_OnButtonReleased>
 8004d8c:	e7bf      	b.n	8004d0e <BUTTON_Callback+0x42>
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	ddf8      	ble.n	8004d84 <BUTTON_Callback+0xb8>
 8004d92:	4620      	mov	r0, r4
 8004d94:	f7ff ff40 	bl	8004c18 <_OnButtonPressed>
 8004d98:	e7b9      	b.n	8004d0e <BUTTON_Callback+0x42>
 8004d9a:	bf00      	nop
 8004d9c:	200001b8 	.word	0x200001b8
 8004da0:	20000000 	.word	0x20000000

08004da4 <BUTTON_CreateUser>:
 8004da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da8:	b086      	sub	sp, #24
 8004daa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004dac:	344c      	adds	r4, #76	; 0x4c
 8004dae:	9403      	str	r4, [sp, #12]
 8004db0:	4c16      	ldr	r4, [pc, #88]	; (8004e0c <BUTTON_CreateUser+0x68>)
 8004db2:	9402      	str	r4, [sp, #8]
 8004db4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8004db6:	9401      	str	r4, [sp, #4]
 8004db8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004dba:	9400      	str	r4, [sp, #0]
 8004dbc:	f004 fee6 	bl	8009b8c <WM_CreateWindowAsChild>
 8004dc0:	4680      	mov	r8, r0
 8004dc2:	b1f8      	cbz	r0, 8004e04 <BUTTON_CreateUser+0x60>
 8004dc4:	f000 fd02 	bl	80057cc <GUI_ALLOC_LockH>
 8004dc8:	4e11      	ldr	r6, [pc, #68]	; (8004e10 <BUTTON_CreateUser+0x6c>)
 8004dca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004dcc:	9005      	str	r0, [sp, #20]
 8004dce:	2210      	movs	r2, #16
 8004dd0:	1d35      	adds	r5, r6, #4
 8004dd2:	f004 f8fb 	bl	8008fcc <WIDGET__Init>
 8004dd6:	af06      	add	r7, sp, #24
 8004dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dda:	f857 ed04 	ldr.w	lr, [r7, #-4]!
 8004dde:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 8004de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004de4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004de8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004dec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004df0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004df2:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 8004df6:	4638      	mov	r0, r7
 8004df8:	f000 fcf6 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004dfc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8004dfe:	4640      	mov	r0, r8
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4798      	blx	r3
 8004e04:	4640      	mov	r0, r8
 8004e06:	b006      	add	sp, #24
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	08004ccd 	.word	0x08004ccd
 8004e10:	20000000 	.word	0x20000000

08004e14 <BUTTON_CreateEx>:
 8004e14:	b510      	push	{r4, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	2400      	movs	r4, #0
 8004e1a:	9404      	str	r4, [sp, #16]
 8004e1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004e1e:	9403      	str	r4, [sp, #12]
 8004e20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004e22:	9402      	str	r4, [sp, #8]
 8004e24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8004e26:	9401      	str	r4, [sp, #4]
 8004e28:	9c08      	ldr	r4, [sp, #32]
 8004e2a:	9400      	str	r4, [sp, #0]
 8004e2c:	f7ff ffba 	bl	8004da4 <BUTTON_CreateUser>
 8004e30:	b006      	add	sp, #24
 8004e32:	bd10      	pop	{r4, pc}

08004e34 <BUTTON_Create>:
 8004e34:	b530      	push	{r4, r5, lr}
 8004e36:	b085      	sub	sp, #20
 8004e38:	9c08      	ldr	r4, [sp, #32]
 8004e3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004e3c:	9403      	str	r4, [sp, #12]
 8004e3e:	2400      	movs	r4, #0
 8004e40:	9402      	str	r4, [sp, #8]
 8004e42:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004e46:	f7ff ffe5 	bl	8004e14 <BUTTON_CreateEx>
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bd30      	pop	{r4, r5, pc}

08004e4e <BUTTON_SetText>:
 8004e4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e50:	460c      	mov	r4, r1
 8004e52:	4605      	mov	r5, r0
 8004e54:	b310      	cbz	r0, 8004e9c <BUTTON_SetText+0x4e>
 8004e56:	f000 fcb9 	bl	80057cc <GUI_ALLOC_LockH>
 8004e5a:	6e86      	ldr	r6, [r0, #104]	; 0x68
 8004e5c:	9000      	str	r0, [sp, #0]
 8004e5e:	4668      	mov	r0, sp
 8004e60:	9601      	str	r6, [sp, #4]
 8004e62:	f000 fcc1 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004e66:	4621      	mov	r1, r4
 8004e68:	a801      	add	r0, sp, #4
 8004e6a:	f000 fb8d 	bl	8005588 <GUI__SetText>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	bf0c      	ite	eq
 8004e72:	2401      	moveq	r4, #1
 8004e74:	2400      	movne	r4, #0
 8004e76:	d00e      	beq.n	8004e96 <BUTTON_SetText+0x48>
 8004e78:	9b01      	ldr	r3, [sp, #4]
 8004e7a:	429e      	cmp	r6, r3
 8004e7c:	d008      	beq.n	8004e90 <BUTTON_SetText+0x42>
 8004e7e:	4628      	mov	r0, r5
 8004e80:	f000 fca4 	bl	80057cc <GUI_ALLOC_LockH>
 8004e84:	9b01      	ldr	r3, [sp, #4]
 8004e86:	9000      	str	r0, [sp, #0]
 8004e88:	6683      	str	r3, [r0, #104]	; 0x68
 8004e8a:	4668      	mov	r0, sp
 8004e8c:	f000 fcac 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f004 fe5b 	bl	8009b4c <WM_InvalidateWindow>
 8004e96:	4620      	mov	r0, r4
 8004e98:	b002      	add	sp, #8
 8004e9a:	bd70      	pop	{r4, r5, r6, pc}
 8004e9c:	2401      	movs	r4, #1
 8004e9e:	e7fa      	b.n	8004e96 <BUTTON_SetText+0x48>

08004ea0 <_Create>:
 8004ea0:	b530      	push	{r4, r5, lr}
 8004ea2:	b08b      	sub	sp, #44	; 0x2c
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	2224      	movs	r2, #36	; 0x24
 8004eaa:	a801      	add	r0, sp, #4
 8004eac:	f009 fb66 	bl	800e57c <memset>
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f000 fc8b 	bl	80057cc <GUI_ALLOC_LockH>
 8004eb6:	ab0a      	add	r3, sp, #40	; 0x28
 8004eb8:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8004eba:	f843 0d28 	str.w	r0, [r3, #-40]!
 8004ebe:	6895      	ldr	r5, [r2, #8]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fc91 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	9401      	str	r4, [sp, #4]
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	a801      	add	r0, sp, #4
 8004ed0:	4798      	blx	r3
 8004ed2:	b00b      	add	sp, #44	; 0x2c
 8004ed4:	bd30      	pop	{r4, r5, pc}

08004ed6 <_Paint>:
 8004ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eda:	b08a      	sub	sp, #40	; 0x28
 8004edc:	4607      	mov	r7, r0
 8004ede:	f000 fc75 	bl	80057cc <GUI_ALLOC_LockH>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	a80a      	add	r0, sp, #40	; 0x28
 8004ee6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8004ee8:	f840 3d28 	str.w	r3, [r0, #-40]!
 8004eec:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8004eee:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 8004ef2:	f000 fc79 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	f005 fc12 	bl	800a720 <WM_GetWindowSizeX>
 8004efc:	4606      	mov	r6, r0
 8004efe:	4638      	mov	r0, r7
 8004f00:	f005 fc23 	bl	800a74a <WM_GetWindowSizeY>
 8004f04:	3e01      	subs	r6, #1
 8004f06:	2300      	movs	r3, #0
 8004f08:	3801      	subs	r0, #1
 8004f0a:	f015 0510 	ands.w	r5, r5, #16
 8004f0e:	9701      	str	r7, [sp, #4]
 8004f10:	9306      	str	r3, [sp, #24]
 8004f12:	9305      	str	r3, [sp, #20]
 8004f14:	9607      	str	r6, [sp, #28]
 8004f16:	9008      	str	r0, [sp, #32]
 8004f18:	d002      	beq.n	8004f20 <_Paint+0x4a>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	9303      	str	r3, [sp, #12]
 8004f1e:	e003      	b.n	8004f28 <_Paint+0x52>
 8004f20:	f418 7f80 	tst.w	r8, #256	; 0x100
 8004f24:	d013      	beq.n	8004f4e <_Paint+0x78>
 8004f26:	9503      	str	r5, [sp, #12]
 8004f28:	2305      	movs	r3, #5
 8004f2a:	9302      	str	r3, [sp, #8]
 8004f2c:	a801      	add	r0, sp, #4
 8004f2e:	47a0      	blx	r4
 8004f30:	2306      	movs	r3, #6
 8004f32:	9302      	str	r3, [sp, #8]
 8004f34:	a801      	add	r0, sp, #4
 8004f36:	47a0      	blx	r4
 8004f38:	2312      	movs	r3, #18
 8004f3a:	9302      	str	r3, [sp, #8]
 8004f3c:	a801      	add	r0, sp, #4
 8004f3e:	47a0      	blx	r4
 8004f40:	230a      	movs	r3, #10
 8004f42:	9302      	str	r3, [sp, #8]
 8004f44:	a801      	add	r0, sp, #4
 8004f46:	47a0      	blx	r4
 8004f48:	b00a      	add	sp, #40	; 0x28
 8004f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f4e:	f018 0f01 	tst.w	r8, #1
 8004f52:	bf14      	ite	ne
 8004f54:	2301      	movne	r3, #1
 8004f56:	2302      	moveq	r3, #2
 8004f58:	e7e0      	b.n	8004f1c <_Paint+0x46>
	...

08004f5c <BUTTON_DrawSkinFlex>:
 8004f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f60:	4b8c      	ldr	r3, [pc, #560]	; (8005194 <BUTTON_DrawSkinFlex+0x238>)
 8004f62:	6882      	ldr	r2, [r0, #8]
 8004f64:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8004f68:	6843      	ldr	r3, [r0, #4]
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	b088      	sub	sp, #32
 8004f6e:	4604      	mov	r4, r0
 8004f70:	d05f      	beq.n	8005032 <BUTTON_DrawSkinFlex+0xd6>
 8004f72:	dc06      	bgt.n	8004f82 <BUTTON_DrawSkinFlex+0x26>
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 8108 	beq.w	800518a <BUTTON_DrawSkinFlex+0x22e>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	b008      	add	sp, #32
 8004f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f82:	2b06      	cmp	r3, #6
 8004f84:	f000 80da 	beq.w	800513c <BUTTON_DrawSkinFlex+0x1e0>
 8004f88:	2b12      	cmp	r3, #18
 8004f8a:	d1f6      	bne.n	8004f7a <BUTTON_DrawSkinFlex+0x1e>
 8004f8c:	6800      	ldr	r0, [r0, #0]
 8004f8e:	f000 fc1d 	bl	80057cc <GUI_ALLOC_LockH>
 8004f92:	ae08      	add	r6, sp, #32
 8004f94:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
 8004f98:	f846 0d10 	str.w	r0, [r6, #-16]!
 8004f9c:	f1b8 0f00 	cmp.w	r8, #0
 8004fa0:	f000 80f1 	beq.w	8005186 <BUTTON_DrawSkinFlex+0x22a>
 8004fa4:	68a3      	ldr	r3, [r4, #8]
 8004fa6:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80e9 	beq.w	8005182 <BUTTON_DrawSkinFlex+0x226>
 8004fb0:	2b03      	cmp	r3, #3
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2302      	moveq	r3, #2
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004fbc:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8004fbe:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004fc0:	f001 f8a2 	bl	8006108 <GUI_SetFont>
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f001 f89a 	bl	80060fe <GUI_SetColor>
 8004fca:	a806      	add	r0, sp, #24
 8004fcc:	f000 ffc4 	bl	8005f58 <GUI_GetClientRect>
 8004fd0:	8ba9      	ldrh	r1, [r5, #28]
 8004fd2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8004fd6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8004fda:	1a5b      	subs	r3, r3, r1
 8004fdc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8004fe0:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8004fe4:	3302      	adds	r3, #2
 8004fe6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8004fea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8004fee:	3b02      	subs	r3, #2
 8004ff0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004ff4:	9b04      	ldr	r3, [sp, #16]
 8004ff6:	440a      	add	r2, r1
 8004ff8:	f8ad 2018 	strh.w	r2, [sp, #24]
 8004ffc:	f9b3 105e 	ldrsh.w	r1, [r3, #94]	; 0x5e
 8005000:	f9b3 2060 	ldrsh.w	r2, [r3, #96]	; 0x60
 8005004:	a806      	add	r0, sp, #24
 8005006:	f000 fff2 	bl	8005fee <GUI_MoveRect>
 800500a:	4630      	mov	r0, r6
 800500c:	f000 fbec 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8005010:	2002      	movs	r0, #2
 8005012:	f001 f8b1 	bl	8006178 <GUI_SetTextMode>
 8005016:	4640      	mov	r0, r8
 8005018:	f000 fbd8 	bl	80057cc <GUI_ALLOC_LockH>
 800501c:	ac08      	add	r4, sp, #32
 800501e:	463a      	mov	r2, r7
 8005020:	f844 0d0c 	str.w	r0, [r4, #-12]!
 8005024:	a906      	add	r1, sp, #24
 8005026:	f001 fc42 	bl	80068ae <GUI_DispStringInRect>
 800502a:	4620      	mov	r0, r4
 800502c:	f000 fbdc 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8005030:	e7a3      	b.n	8004f7a <BUTTON_DrawSkinFlex+0x1e>
 8005032:	69ee      	ldr	r6, [r5, #28]
 8005034:	2e00      	cmp	r6, #0
 8005036:	d070      	beq.n	800511a <BUTTON_DrawSkinFlex+0x1be>
 8005038:	68ab      	ldr	r3, [r5, #8]
 800503a:	9303      	str	r3, [sp, #12]
 800503c:	686b      	ldr	r3, [r5, #4]
 800503e:	9302      	str	r3, [sp, #8]
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	9301      	str	r3, [sp, #4]
 8005044:	9600      	str	r6, [sp, #0]
 8005046:	3010      	adds	r0, #16
 8005048:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 800504a:	f000 f911 	bl	8005270 <GUI__DrawTwinArc4>
 800504e:	2600      	movs	r6, #0
 8005050:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8005054:	f001 f853 	bl	80060fe <GUI_SetColor>
 8005058:	69eb      	ldr	r3, [r5, #28]
 800505a:	69a2      	ldr	r2, [r4, #24]
 800505c:	6921      	ldr	r1, [r4, #16]
 800505e:	6960      	ldr	r0, [r4, #20]
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	4419      	add	r1, r3
 8005064:	4430      	add	r0, r6
 8005066:	f001 fd3d 	bl	8006ae4 <GUI_DrawHLine>
 800506a:	69eb      	ldr	r3, [r5, #28]
 800506c:	69a2      	ldr	r2, [r4, #24]
 800506e:	6921      	ldr	r1, [r4, #16]
 8005070:	69e0      	ldr	r0, [r4, #28]
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	4419      	add	r1, r3
 8005076:	1b80      	subs	r0, r0, r6
 8005078:	f001 fd34 	bl	8006ae4 <GUI_DrawHLine>
 800507c:	69eb      	ldr	r3, [r5, #28]
 800507e:	69e2      	ldr	r2, [r4, #28]
 8005080:	6961      	ldr	r1, [r4, #20]
 8005082:	6920      	ldr	r0, [r4, #16]
 8005084:	1ad2      	subs	r2, r2, r3
 8005086:	4419      	add	r1, r3
 8005088:	4430      	add	r0, r6
 800508a:	f001 fd5f 	bl	8006b4c <GUI_DrawVLine>
 800508e:	69eb      	ldr	r3, [r5, #28]
 8005090:	69e2      	ldr	r2, [r4, #28]
 8005092:	6961      	ldr	r1, [r4, #20]
 8005094:	69a0      	ldr	r0, [r4, #24]
 8005096:	1ad2      	subs	r2, r2, r3
 8005098:	1b80      	subs	r0, r0, r6
 800509a:	4419      	add	r1, r3
 800509c:	3601      	adds	r6, #1
 800509e:	f001 fd55 	bl	8006b4c <GUI_DrawVLine>
 80050a2:	2e02      	cmp	r6, #2
 80050a4:	d1d4      	bne.n	8005050 <BUTTON_DrawSkinFlex+0xf4>
 80050a6:	68a8      	ldr	r0, [r5, #8]
 80050a8:	f001 f829 	bl	80060fe <GUI_SetColor>
 80050ac:	69e9      	ldr	r1, [r5, #28]
 80050ae:	6920      	ldr	r0, [r4, #16]
 80050b0:	6966      	ldr	r6, [r4, #20]
 80050b2:	69e3      	ldr	r3, [r4, #28]
 80050b4:	1842      	adds	r2, r0, r1
 80050b6:	1a5b      	subs	r3, r3, r1
 80050b8:	3a01      	subs	r2, #1
 80050ba:	4431      	add	r1, r6
 80050bc:	3002      	adds	r0, #2
 80050be:	f001 fd67 	bl	8006b90 <GUI_FillRect>
 80050c2:	69e9      	ldr	r1, [r5, #28]
 80050c4:	69a2      	ldr	r2, [r4, #24]
 80050c6:	6966      	ldr	r6, [r4, #20]
 80050c8:	69e3      	ldr	r3, [r4, #28]
 80050ca:	1a50      	subs	r0, r2, r1
 80050cc:	1a5b      	subs	r3, r3, r1
 80050ce:	3a02      	subs	r2, #2
 80050d0:	4431      	add	r1, r6
 80050d2:	3001      	adds	r0, #1
 80050d4:	f001 fd5c 	bl	8006b90 <GUI_FillRect>
 80050d8:	69ee      	ldr	r6, [r5, #28]
 80050da:	6961      	ldr	r1, [r4, #20]
 80050dc:	69e3      	ldr	r3, [r4, #28]
 80050de:	692f      	ldr	r7, [r5, #16]
 80050e0:	69a2      	ldr	r2, [r4, #24]
 80050e2:	6920      	ldr	r0, [r4, #16]
 80050e4:	9701      	str	r7, [sp, #4]
 80050e6:	68ef      	ldr	r7, [r5, #12]
 80050e8:	9700      	str	r7, [sp, #0]
 80050ea:	440b      	add	r3, r1
 80050ec:	1b92      	subs	r2, r2, r6
 80050ee:	4430      	add	r0, r6
 80050f0:	105b      	asrs	r3, r3, #1
 80050f2:	3102      	adds	r1, #2
 80050f4:	f001 fcc4 	bl	8006a80 <GUI_DrawGradientV>
 80050f8:	f104 0114 	add.w	r1, r4, #20
 80050fc:	c90e      	ldmia	r1, {r1, r2, r3}
 80050fe:	6920      	ldr	r0, [r4, #16]
 8005100:	69ac      	ldr	r4, [r5, #24]
 8005102:	9401      	str	r4, [sp, #4]
 8005104:	4419      	add	r1, r3
 8005106:	696c      	ldr	r4, [r5, #20]
 8005108:	9400      	str	r4, [sp, #0]
 800510a:	1049      	asrs	r1, r1, #1
 800510c:	3b02      	subs	r3, #2
 800510e:	1b92      	subs	r2, r2, r6
 8005110:	3101      	adds	r1, #1
 8005112:	4430      	add	r0, r6
 8005114:	f001 fcb4 	bl	8006a80 <GUI_DrawGradientV>
 8005118:	e72f      	b.n	8004f7a <BUTTON_DrawSkinFlex+0x1e>
 800511a:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800511e:	f000 ffee 	bl	80060fe <GUI_SetColor>
 8005122:	f104 0010 	add.w	r0, r4, #16
 8005126:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8005128:	1b9b      	subs	r3, r3, r6
 800512a:	1b92      	subs	r2, r2, r6
 800512c:	4431      	add	r1, r6
 800512e:	4430      	add	r0, r6
 8005130:	3601      	adds	r6, #1
 8005132:	f000 f831 	bl	8005198 <GUI_DrawRect>
 8005136:	2e02      	cmp	r6, #2
 8005138:	d1ef      	bne.n	800511a <BUTTON_DrawSkinFlex+0x1be>
 800513a:	e7ce      	b.n	80050da <BUTTON_DrawSkinFlex+0x17e>
 800513c:	6800      	ldr	r0, [r0, #0]
 800513e:	f000 fb45 	bl	80057cc <GUI_ALLOC_LockH>
 8005142:	9004      	str	r0, [sp, #16]
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	f005 f9e4 	bl	800a512 <WM__IsEnabled>
 800514a:	9b04      	ldr	r3, [sp, #16]
 800514c:	b190      	cbz	r0, 8005174 <BUTTON_DrawSkinFlex+0x218>
 800514e:	68a2      	ldr	r2, [r4, #8]
 8005150:	b9aa      	cbnz	r2, 800517e <BUTTON_DrawSkinFlex+0x222>
 8005152:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005154:	3000      	adds	r0, #0
 8005156:	bf18      	it	ne
 8005158:	2001      	movne	r0, #1
 800515a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800515e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 8005160:	a804      	add	r0, sp, #16
 8005162:	f000 fb41 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8005166:	2300      	movs	r3, #0
 8005168:	461a      	mov	r2, r3
 800516a:	6821      	ldr	r1, [r4, #0]
 800516c:	4628      	mov	r0, r5
 800516e:	f001 fba2 	bl	80068b6 <GUI_DRAW__Draw>
 8005172:	e702      	b.n	8004f7a <BUTTON_DrawSkinFlex+0x1e>
 8005174:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005176:	2a00      	cmp	r2, #0
 8005178:	bf18      	it	ne
 800517a:	2002      	movne	r0, #2
 800517c:	e7ed      	b.n	800515a <BUTTON_DrawSkinFlex+0x1fe>
 800517e:	2000      	movs	r0, #0
 8005180:	e7eb      	b.n	800515a <BUTTON_DrawSkinFlex+0x1fe>
 8005182:	2301      	movs	r3, #1
 8005184:	e718      	b.n	8004fb8 <BUTTON_DrawSkinFlex+0x5c>
 8005186:	4630      	mov	r0, r6
 8005188:	e750      	b.n	800502c <BUTTON_DrawSkinFlex+0xd0>
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	f005 fd2c 	bl	800abe8 <WM_SetHasTrans>
 8005190:	e6f3      	b.n	8004f7a <BUTTON_DrawSkinFlex+0x1e>
 8005192:	bf00      	nop
 8005194:	0800e6bc 	.word	0x0800e6bc

08005198 <GUI_DrawRect>:
 8005198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800519c:	4c1e      	ldr	r4, [pc, #120]	; (8005218 <GUI_DrawRect+0x80>)
 800519e:	f8d4 e000 	ldr.w	lr, [r4]
 80051a2:	f8de 504c 	ldr.w	r5, [lr, #76]	; 0x4c
 80051a6:	f8de 4048 	ldr.w	r4, [lr, #72]	; 0x48
 80051aa:	186f      	adds	r7, r5, r1
 80051ac:	441d      	add	r5, r3
 80051ae:	f89e 3018 	ldrb.w	r3, [lr, #24]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	1826      	adds	r6, r4, r0
 80051b8:	4414      	add	r4, r2
 80051ba:	1af2      	subs	r2, r6, r3
 80051bc:	f8ad 2000 	strh.w	r2, [sp]
 80051c0:	191a      	adds	r2, r3, r4
 80051c2:	f8ad 2004 	strh.w	r2, [sp, #4]
 80051c6:	4668      	mov	r0, sp
 80051c8:	1afa      	subs	r2, r7, r3
 80051ca:	442b      	add	r3, r5
 80051cc:	f8ad 2002 	strh.w	r2, [sp, #2]
 80051d0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80051d4:	f004 ff14 	bl	800a000 <WM__InitIVRSearch>
 80051d8:	b1d8      	cbz	r0, 8005212 <GUI_DrawRect+0x7a>
 80051da:	f107 0801 	add.w	r8, r7, #1
 80051de:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80051e2:	4622      	mov	r2, r4
 80051e4:	4639      	mov	r1, r7
 80051e6:	4630      	mov	r0, r6
 80051e8:	f003 f99e 	bl	8008528 <LCD_DrawHLine>
 80051ec:	4622      	mov	r2, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	4630      	mov	r0, r6
 80051f2:	f003 f999 	bl	8008528 <LCD_DrawHLine>
 80051f6:	464a      	mov	r2, r9
 80051f8:	4641      	mov	r1, r8
 80051fa:	4630      	mov	r0, r6
 80051fc:	f003 f9be 	bl	800857c <LCD_DrawVLine>
 8005200:	464a      	mov	r2, r9
 8005202:	4641      	mov	r1, r8
 8005204:	4620      	mov	r0, r4
 8005206:	f003 f9b9 	bl	800857c <LCD_DrawVLine>
 800520a:	f004 fe3f 	bl	8009e8c <WM__GetNextIVR>
 800520e:	2800      	cmp	r0, #0
 8005210:	d1e7      	bne.n	80051e2 <GUI_DrawRect+0x4a>
 8005212:	b003      	add	sp, #12
 8005214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005218:	200000d8 	.word	0x200000d8

0800521c <_GetTwinArcPara>:
 800521c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005220:	fb01 f901 	mul.w	r9, r1, r1
 8005224:	1e45      	subs	r5, r0, #1
 8005226:	4604      	mov	r4, r0
 8005228:	4340      	muls	r0, r0
 800522a:	eba0 0009 	sub.w	r0, r0, r9
 800522e:	460e      	mov	r6, r1
 8005230:	4692      	mov	sl, r2
 8005232:	4698      	mov	r8, r3
 8005234:	9f08      	ldr	r7, [sp, #32]
 8005236:	f000 f968 	bl	800550a <GUI__sqrt32>
 800523a:	42ae      	cmp	r6, r5
 800523c:	f8ca 0000 	str.w	r0, [sl]
 8005240:	da11      	bge.n	8005266 <_GetTwinArcPara+0x4a>
 8005242:	436d      	muls	r5, r5
 8005244:	eba5 0009 	sub.w	r0, r5, r9
 8005248:	f000 f95f 	bl	800550a <GUI__sqrt32>
 800524c:	3c02      	subs	r4, #2
 800524e:	42a6      	cmp	r6, r4
 8005250:	f8c8 0000 	str.w	r0, [r8]
 8005254:	da03      	bge.n	800525e <_GetTwinArcPara+0x42>
 8005256:	3801      	subs	r0, #1
 8005258:	6038      	str	r0, [r7, #0]
 800525a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525e:	2300      	movs	r3, #0
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005266:	2300      	movs	r3, #0
 8005268:	f8c8 3000 	str.w	r3, [r8]
 800526c:	e7f8      	b.n	8005260 <_GetTwinArcPara+0x44>
	...

08005270 <GUI__DrawTwinArc4>:
 8005270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005274:	4d70      	ldr	r5, [pc, #448]	; (8005438 <GUI__DrawTwinArc4+0x1c8>)
 8005276:	682f      	ldr	r7, [r5, #0]
 8005278:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800527a:	1835      	adds	r5, r6, r0
 800527c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800527e:	b091      	sub	sp, #68	; 0x44
 8005280:	1841      	adds	r1, r0, r1
 8005282:	18c3      	adds	r3, r0, r3
 8005284:	9103      	str	r1, [sp, #12]
 8005286:	18b2      	adds	r2, r6, r2
 8005288:	9305      	str	r3, [sp, #20]
 800528a:	9204      	str	r2, [sp, #16]
 800528c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8005290:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8005294:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005298:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 800529c:	a80e      	add	r0, sp, #56	; 0x38
 800529e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80052a2:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80052a4:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
 80052a8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80052ac:	f004 fea8 	bl	800a000 <WM__InitIVRSearch>
 80052b0:	b140      	cbz	r0, 80052c4 <GUI__DrawTwinArc4+0x54>
 80052b2:	4425      	add	r5, r4
 80052b4:	1e6b      	subs	r3, r5, #1
 80052b6:	9306      	str	r3, [sp, #24]
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	dc06      	bgt.n	80052ca <GUI__DrawTwinArc4+0x5a>
 80052bc:	f004 fde6 	bl	8009e8c <WM__GetNextIVR>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d1f9      	bne.n	80052b8 <GUI__DrawTwinArc4+0x48>
 80052c4:	b011      	add	sp, #68	; 0x44
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80052cc:	f000 ff17 	bl	80060fe <GUI_SetColor>
 80052d0:	9b05      	ldr	r3, [sp, #20]
 80052d2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80052d6:	1b1b      	subs	r3, r3, r4
 80052d8:	1e67      	subs	r7, r4, #1
 80052da:	9307      	str	r3, [sp, #28]
 80052dc:	f109 0901 	add.w	r9, r9, #1
 80052e0:	2f00      	cmp	r7, #0
 80052e2:	d145      	bne.n	8005370 <GUI__DrawTwinArc4+0x100>
 80052e4:	2c01      	cmp	r4, #1
 80052e6:	d0e9      	beq.n	80052bc <GUI__DrawTwinArc4+0x4c>
 80052e8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80052ea:	f000 ff08 	bl	80060fe <GUI_SetColor>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	18e3      	adds	r3, r4, r3
 80052f2:	9307      	str	r3, [sp, #28]
 80052f4:	9b05      	ldr	r3, [sp, #20]
 80052f6:	1b1b      	subs	r3, r3, r4
 80052f8:	1ea7      	subs	r7, r4, #2
 80052fa:	9308      	str	r3, [sp, #32]
 80052fc:	2f00      	cmp	r7, #0
 80052fe:	d167      	bne.n	80053d0 <GUI__DrawTwinArc4+0x160>
 8005300:	2c02      	cmp	r4, #2
 8005302:	d0db      	beq.n	80052bc <GUI__DrawTwinArc4+0x4c>
 8005304:	981d      	ldr	r0, [sp, #116]	; 0x74
 8005306:	f000 fefa 	bl	80060fe <GUI_SetColor>
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	1ee6      	subs	r6, r4, #3
 800530e:	eb04 0b03 	add.w	fp, r4, r3
 8005312:	2e00      	cmp	r6, #0
 8005314:	d0d2      	beq.n	80052bc <GUI__DrawTwinArc4+0x4c>
 8005316:	9b05      	ldr	r3, [sp, #20]
 8005318:	eba3 0904 	sub.w	r9, r3, r4
 800531c:	ab0d      	add	r3, sp, #52	; 0x34
 800531e:	4631      	mov	r1, r6
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	aa0b      	add	r2, sp, #44	; 0x2c
 8005324:	ab0c      	add	r3, sp, #48	; 0x30
 8005326:	4620      	mov	r0, r4
 8005328:	f7ff ff78 	bl	800521c <_GetTwinArcPara>
 800532c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800532e:	9904      	ldr	r1, [sp, #16]
 8005330:	1aab      	subs	r3, r5, r2
 8005332:	ebab 0a06 	sub.w	sl, fp, r6
 8005336:	1b0f      	subs	r7, r1, r4
 8005338:	eb02 0807 	add.w	r8, r2, r7
 800533c:	4618      	mov	r0, r3
 800533e:	3701      	adds	r7, #1
 8005340:	9a06      	ldr	r2, [sp, #24]
 8005342:	9307      	str	r3, [sp, #28]
 8005344:	4651      	mov	r1, sl
 8005346:	f003 f8ef 	bl	8008528 <LCD_DrawHLine>
 800534a:	4642      	mov	r2, r8
 800534c:	4651      	mov	r1, sl
 800534e:	4638      	mov	r0, r7
 8005350:	f003 f8ea 	bl	8008528 <LCD_DrawHLine>
 8005354:	9b07      	ldr	r3, [sp, #28]
 8005356:	9a06      	ldr	r2, [sp, #24]
 8005358:	44b1      	add	r9, r6
 800535a:	4618      	mov	r0, r3
 800535c:	4649      	mov	r1, r9
 800535e:	f003 f8e3 	bl	8008528 <LCD_DrawHLine>
 8005362:	4642      	mov	r2, r8
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	f003 f8de 	bl	8008528 <LCD_DrawHLine>
 800536c:	3e01      	subs	r6, #1
 800536e:	e7d0      	b.n	8005312 <GUI__DrawTwinArc4+0xa2>
 8005370:	9b07      	ldr	r3, [sp, #28]
 8005372:	eb03 0b07 	add.w	fp, r3, r7
 8005376:	ab0d      	add	r3, sp, #52	; 0x34
 8005378:	4639      	mov	r1, r7
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	aa0b      	add	r2, sp, #44	; 0x2c
 800537e:	ab0c      	add	r3, sp, #48	; 0x30
 8005380:	4620      	mov	r0, r4
 8005382:	f7ff ff4b 	bl	800521c <_GetTwinArcPara>
 8005386:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005388:	9a04      	ldr	r2, [sp, #16]
 800538a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800538c:	1b12      	subs	r2, r2, r4
 800538e:	eba5 0a06 	sub.w	sl, r5, r6
 8005392:	1a6b      	subs	r3, r5, r1
 8005394:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005398:	4416      	add	r6, r2
 800539a:	eb01 0802 	add.w	r8, r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	3601      	adds	r6, #1
 80053a2:	4652      	mov	r2, sl
 80053a4:	4649      	mov	r1, r9
 80053a6:	9308      	str	r3, [sp, #32]
 80053a8:	f003 f8be 	bl	8008528 <LCD_DrawHLine>
 80053ac:	4642      	mov	r2, r8
 80053ae:	4649      	mov	r1, r9
 80053b0:	4630      	mov	r0, r6
 80053b2:	f003 f8b9 	bl	8008528 <LCD_DrawHLine>
 80053b6:	9b08      	ldr	r3, [sp, #32]
 80053b8:	4652      	mov	r2, sl
 80053ba:	4618      	mov	r0, r3
 80053bc:	4659      	mov	r1, fp
 80053be:	f003 f8b3 	bl	8008528 <LCD_DrawHLine>
 80053c2:	4642      	mov	r2, r8
 80053c4:	4659      	mov	r1, fp
 80053c6:	4630      	mov	r0, r6
 80053c8:	f003 f8ae 	bl	8008528 <LCD_DrawHLine>
 80053cc:	3f01      	subs	r7, #1
 80053ce:	e785      	b.n	80052dc <GUI__DrawTwinArc4+0x6c>
 80053d0:	9b07      	ldr	r3, [sp, #28]
 80053d2:	eba3 0b07 	sub.w	fp, r3, r7
 80053d6:	9b08      	ldr	r3, [sp, #32]
 80053d8:	eb03 0a07 	add.w	sl, r3, r7
 80053dc:	ab0d      	add	r3, sp, #52	; 0x34
 80053de:	4639      	mov	r1, r7
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80053e4:	ab0c      	add	r3, sp, #48	; 0x30
 80053e6:	4620      	mov	r0, r4
 80053e8:	f7ff ff18 	bl	800521c <_GetTwinArcPara>
 80053ec:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80053ee:	9a04      	ldr	r2, [sp, #16]
 80053f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053f2:	1b12      	subs	r2, r2, r4
 80053f4:	eba5 0906 	sub.w	r9, r5, r6
 80053f8:	1a6b      	subs	r3, r5, r1
 80053fa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80053fe:	4416      	add	r6, r2
 8005400:	eb01 0802 	add.w	r8, r1, r2
 8005404:	4618      	mov	r0, r3
 8005406:	3601      	adds	r6, #1
 8005408:	464a      	mov	r2, r9
 800540a:	4659      	mov	r1, fp
 800540c:	9309      	str	r3, [sp, #36]	; 0x24
 800540e:	f003 f88b 	bl	8008528 <LCD_DrawHLine>
 8005412:	4642      	mov	r2, r8
 8005414:	4659      	mov	r1, fp
 8005416:	4630      	mov	r0, r6
 8005418:	f003 f886 	bl	8008528 <LCD_DrawHLine>
 800541c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800541e:	464a      	mov	r2, r9
 8005420:	4618      	mov	r0, r3
 8005422:	4651      	mov	r1, sl
 8005424:	f003 f880 	bl	8008528 <LCD_DrawHLine>
 8005428:	4642      	mov	r2, r8
 800542a:	4651      	mov	r1, sl
 800542c:	4630      	mov	r0, r6
 800542e:	f003 f87b 	bl	8008528 <LCD_DrawHLine>
 8005432:	3f01      	subs	r7, #1
 8005434:	e762      	b.n	80052fc <GUI__DrawTwinArc4+0x8c>
 8005436:	bf00      	nop
 8005438:	200000d8 	.word	0x200000d8

0800543c <GUI__HandleEOLine>:
 800543c:	b513      	push	{r0, r1, r4, lr}
 800543e:	6803      	ldr	r3, [r0, #0]
 8005440:	4604      	mov	r4, r0
 8005442:	a802      	add	r0, sp, #8
 8005444:	f840 3d04 	str.w	r3, [r0, #-4]!
 8005448:	f001 ff54 	bl	80072f4 <GUI_UC__GetCharCodeInc>
 800544c:	b128      	cbz	r0, 800545a <GUI__HandleEOLine+0x1e>
 800544e:	280a      	cmp	r0, #10
 8005450:	d101      	bne.n	8005456 <GUI__HandleEOLine+0x1a>
 8005452:	9b01      	ldr	r3, [sp, #4]
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	2000      	movs	r0, #0
 8005458:	e000      	b.n	800545c <GUI__HandleEOLine+0x20>
 800545a:	2001      	movs	r0, #1
 800545c:	b002      	add	sp, #8
 800545e:	bd10      	pop	{r4, pc}

08005460 <GUI__IntersectRect>:
 8005460:	f9b1 3000 	ldrsh.w	r3, [r1]
 8005464:	f9b0 2000 	ldrsh.w	r2, [r0]
 8005468:	429a      	cmp	r2, r3
 800546a:	bfb8      	it	lt
 800546c:	8003      	strhlt	r3, [r0, #0]
 800546e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8005472:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005476:	429a      	cmp	r2, r3
 8005478:	bfb8      	it	lt
 800547a:	8043      	strhlt	r3, [r0, #2]
 800547c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8005480:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8005484:	429a      	cmp	r2, r3
 8005486:	bfc8      	it	gt
 8005488:	8083      	strhgt	r3, [r0, #4]
 800548a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800548e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8005492:	429a      	cmp	r2, r3
 8005494:	bfc8      	it	gt
 8005496:	80c3      	strhgt	r3, [r0, #6]
 8005498:	4770      	bx	lr

0800549a <GUI__IntersectRects>:
 800549a:	f9b1 3000 	ldrsh.w	r3, [r1]
 800549e:	b570      	push	{r4, r5, r6, lr}
 80054a0:	f9b2 5000 	ldrsh.w	r5, [r2]
 80054a4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80054a8:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 80054ac:	f9b1 1006 	ldrsh.w	r1, [r1, #6]
 80054b0:	429d      	cmp	r5, r3
 80054b2:	bfb8      	it	lt
 80054b4:	461d      	movlt	r5, r3
 80054b6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80054ba:	8005      	strh	r5, [r0, #0]
 80054bc:	42a3      	cmp	r3, r4
 80054be:	bfb8      	it	lt
 80054c0:	4623      	movlt	r3, r4
 80054c2:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 80054c6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80054ca:	8043      	strh	r3, [r0, #2]
 80054cc:	42b4      	cmp	r4, r6
 80054ce:	bfa8      	it	ge
 80054d0:	4634      	movge	r4, r6
 80054d2:	428a      	cmp	r2, r1
 80054d4:	bfa8      	it	ge
 80054d6:	460a      	movge	r2, r1
 80054d8:	42a5      	cmp	r5, r4
 80054da:	8084      	strh	r4, [r0, #4]
 80054dc:	80c2      	strh	r2, [r0, #6]
 80054de:	dc04      	bgt.n	80054ea <GUI__IntersectRects+0x50>
 80054e0:	4293      	cmp	r3, r2
 80054e2:	bfcc      	ite	gt
 80054e4:	2000      	movgt	r0, #0
 80054e6:	2001      	movle	r0, #1
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
 80054ea:	2000      	movs	r0, #0
 80054ec:	bd70      	pop	{r4, r5, r6, pc}

080054ee <GUI__ReduceRect>:
 80054ee:	880b      	ldrh	r3, [r1, #0]
 80054f0:	b292      	uxth	r2, r2
 80054f2:	4413      	add	r3, r2
 80054f4:	8003      	strh	r3, [r0, #0]
 80054f6:	888b      	ldrh	r3, [r1, #4]
 80054f8:	1a9b      	subs	r3, r3, r2
 80054fa:	8083      	strh	r3, [r0, #4]
 80054fc:	884b      	ldrh	r3, [r1, #2]
 80054fe:	4413      	add	r3, r2
 8005500:	8043      	strh	r3, [r0, #2]
 8005502:	88cb      	ldrh	r3, [r1, #6]
 8005504:	1a9a      	subs	r2, r3, r2
 8005506:	80c2      	strh	r2, [r0, #6]
 8005508:	4770      	bx	lr

0800550a <GUI__sqrt32>:
 800550a:	b510      	push	{r4, lr}
 800550c:	2110      	movs	r1, #16
 800550e:	2300      	movs	r3, #0
 8005510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005514:	18d4      	adds	r4, r2, r3
 8005516:	42a0      	cmp	r0, r4
 8005518:	bf24      	itt	cs
 800551a:	1913      	addcs	r3, r2, r4
 800551c:	1b00      	subcs	r0, r0, r4
 800551e:	3901      	subs	r1, #1
 8005520:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005524:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8005528:	d1f4      	bne.n	8005514 <GUI__sqrt32+0xa>
 800552a:	4618      	mov	r0, r3
 800552c:	bd10      	pop	{r4, pc}
	...

08005530 <GUI__strcmp>:
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <GUI__strcmp+0x14>)
 8005532:	4a05      	ldr	r2, [pc, #20]	; (8005548 <GUI__strcmp+0x18>)
 8005534:	2900      	cmp	r1, #0
 8005536:	bf08      	it	eq
 8005538:	4619      	moveq	r1, r3
 800553a:	6812      	ldr	r2, [r2, #0]
 800553c:	2800      	cmp	r0, #0
 800553e:	bf08      	it	eq
 8005540:	4618      	moveq	r0, r3
 8005542:	4710      	bx	r2
 8005544:	08010ed7 	.word	0x08010ed7
 8005548:	200000c4 	.word	0x200000c4

0800554c <GUI__strcmp_hp>:
 800554c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800554e:	460d      	mov	r5, r1
 8005550:	b170      	cbz	r0, 8005570 <GUI__strcmp_hp+0x24>
 8005552:	f000 f93b 	bl	80057cc <GUI_ALLOC_LockH>
 8005556:	ac02      	add	r4, sp, #8
 8005558:	4629      	mov	r1, r5
 800555a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800555e:	f7ff ffe7 	bl	8005530 <GUI__strcmp>
 8005562:	4605      	mov	r5, r0
 8005564:	4620      	mov	r0, r4
 8005566:	f000 f93f 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800556a:	4628      	mov	r0, r5
 800556c:	b003      	add	sp, #12
 800556e:	bd30      	pop	{r4, r5, pc}
 8005570:	2501      	movs	r5, #1
 8005572:	e7fa      	b.n	800556a <GUI__strcmp_hp+0x1e>

08005574 <GUI__strlen>:
 8005574:	b110      	cbz	r0, 800557c <GUI__strlen+0x8>
 8005576:	4b03      	ldr	r3, [pc, #12]	; (8005584 <GUI__strlen+0x10>)
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	4718      	bx	r3
 800557c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	200000c4 	.word	0x200000c4

08005588 <GUI__SetText>:
 8005588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800558a:	6807      	ldr	r7, [r0, #0]
 800558c:	4605      	mov	r5, r0
 800558e:	4638      	mov	r0, r7
 8005590:	460e      	mov	r6, r1
 8005592:	f7ff ffdb 	bl	800554c <GUI__strcmp_hp>
 8005596:	b910      	cbnz	r0, 800559e <GUI__SetText+0x16>
 8005598:	2000      	movs	r0, #0
 800559a:	b003      	add	sp, #12
 800559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559e:	4630      	mov	r0, r6
 80055a0:	f7ff ffe8 	bl	8005574 <GUI__strlen>
 80055a4:	1c44      	adds	r4, r0, #1
 80055a6:	4638      	mov	r0, r7
 80055a8:	f000 f93e 	bl	8005828 <GUI_ALLOC_GetSize>
 80055ac:	4284      	cmp	r4, r0
 80055ae:	d111      	bne.n	80055d4 <GUI__SetText+0x4c>
 80055b0:	2c00      	cmp	r4, #0
 80055b2:	d0f1      	beq.n	8005598 <GUI__SetText+0x10>
 80055b4:	4638      	mov	r0, r7
 80055b6:	f000 f909 	bl	80057cc <GUI_ALLOC_LockH>
 80055ba:	ad02      	add	r5, sp, #8
 80055bc:	4b11      	ldr	r3, [pc, #68]	; (8005604 <GUI__SetText+0x7c>)
 80055be:	f845 0d04 	str.w	r0, [r5, #-4]!
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4622      	mov	r2, r4
 80055c6:	4631      	mov	r1, r6
 80055c8:	4798      	blx	r3
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 f90c 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80055d0:	2001      	movs	r0, #1
 80055d2:	e7e2      	b.n	800559a <GUI__SetText+0x12>
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fac5 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 80055da:	4607      	mov	r7, r0
 80055dc:	2800      	cmp	r0, #0
 80055de:	d0db      	beq.n	8005598 <GUI__SetText+0x10>
 80055e0:	f000 f8f4 	bl	80057cc <GUI_ALLOC_LockH>
 80055e4:	ac02      	add	r4, sp, #8
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <GUI__SetText+0x7c>)
 80055e8:	f844 0d04 	str.w	r0, [r4, #-4]!
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	4631      	mov	r1, r6
 80055f0:	4798      	blx	r3
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f8f8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80055f8:	4628      	mov	r0, r5
 80055fa:	f000 fab7 	bl	8005b6c <GUI_ALLOC_FreePtr>
 80055fe:	602f      	str	r7, [r5, #0]
 8005600:	e7e6      	b.n	80055d0 <GUI__SetText+0x48>
 8005602:	bf00      	nop
 8005604:	200000c4 	.word	0x200000c4

08005608 <_PushFreeBlock>:
 8005608:	4b07      	ldr	r3, [pc, #28]	; (8005628 <_PushFreeBlock+0x20>)
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	3201      	adds	r2, #1
 800560e:	b510      	push	{r4, lr}
 8005610:	605a      	str	r2, [r3, #4]
 8005612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005614:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005616:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 800561a:	604c      	str	r4, [r1, #4]
 800561c:	2100      	movs	r1, #0
 800561e:	f802 1030 	strb.w	r1, [r2, r0, lsl #3]
 8005622:	6258      	str	r0, [r3, #36]	; 0x24
 8005624:	bd10      	pop	{r4, pc}
 8005626:	bf00      	nop
 8005628:	200088a8 	.word	0x200088a8

0800562c <_RemoveFreeBlock>:
 800562c:	490e      	ldr	r1, [pc, #56]	; (8005668 <_RemoveFreeBlock+0x3c>)
 800562e:	b530      	push	{r4, r5, lr}
 8005630:	6844      	ldr	r4, [r0, #4]
 8005632:	230f      	movs	r3, #15
 8005634:	460a      	mov	r2, r1
 8005636:	eb01 05c3 	add.w	r5, r1, r3, lsl #3
 800563a:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 800563c:	42ac      	cmp	r4, r5
 800563e:	d203      	bcs.n	8005648 <_RemoveFreeBlock+0x1c>
 8005640:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005644:	d2f7      	bcs.n	8005636 <_RemoveFreeBlock+0xa>
 8005646:	bd30      	pop	{r4, r5, pc}
 8005648:	2b0f      	cmp	r3, #15
 800564a:	d80c      	bhi.n	8005666 <_RemoveFreeBlock+0x3a>
 800564c:	6811      	ldr	r1, [r2, #0]
 800564e:	1b09      	subs	r1, r1, r4
 8005650:	6011      	str	r1, [r2, #0]
 8005652:	6881      	ldr	r1, [r0, #8]
 8005654:	68c0      	ldr	r0, [r0, #12]
 8005656:	b101      	cbz	r1, 800565a <_RemoveFreeBlock+0x2e>
 8005658:	6048      	str	r0, [r1, #4]
 800565a:	b108      	cbz	r0, 8005660 <_RemoveFreeBlock+0x34>
 800565c:	6001      	str	r1, [r0, #0]
 800565e:	bd30      	pop	{r4, r5, pc}
 8005660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005664:	6459      	str	r1, [r3, #68]	; 0x44
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	200088a8 	.word	0x200088a8

0800566c <_AddFreeMemory>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	4d27      	ldr	r5, [pc, #156]	; (800570c <_AddFreeMemory+0xa0>)
 8005670:	68eb      	ldr	r3, [r5, #12]
 8005672:	1e5a      	subs	r2, r3, #1
 8005674:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005676:	4606      	mov	r6, r0
 8005678:	4413      	add	r3, r2
 800567a:	1808      	adds	r0, r1, r0
 800567c:	4298      	cmp	r0, r3
 800567e:	460c      	mov	r4, r1
 8005680:	d805      	bhi.n	800568e <_AddFreeMemory+0x22>
 8005682:	598b      	ldr	r3, [r1, r6]
 8005684:	b91b      	cbnz	r3, 800568e <_AddFreeMemory+0x22>
 8005686:	6843      	ldr	r3, [r0, #4]
 8005688:	441e      	add	r6, r3
 800568a:	f7ff ffcf 	bl	800562c <_RemoveFreeBlock>
 800568e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005690:	429c      	cmp	r4, r3
 8005692:	d90a      	bls.n	80056aa <_AddFreeMemory+0x3e>
 8005694:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8005698:	1be7      	subs	r7, r4, r7
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	b92b      	cbnz	r3, 80056aa <_AddFreeMemory+0x3e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4638      	mov	r0, r7
 80056a2:	441e      	add	r6, r3
 80056a4:	f7ff ffc2 	bl	800562c <_RemoveFreeBlock>
 80056a8:	463c      	mov	r4, r7
 80056aa:	230f      	movs	r3, #15
 80056ac:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80056b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056b2:	4296      	cmp	r6, r2
 80056b4:	d204      	bcs.n	80056c0 <_AddFreeMemory+0x54>
 80056b6:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80056ba:	d2f7      	bcs.n	80056ac <_AddFreeMemory+0x40>
 80056bc:	4630      	mov	r0, r6
 80056be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056c0:	2b0f      	cmp	r3, #15
 80056c2:	d8fb      	bhi.n	80056bc <_AddFreeMemory+0x50>
 80056c4:	3308      	adds	r3, #8
 80056c6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80056ca:	19a0      	adds	r0, r4, r6
 80056cc:	6851      	ldr	r1, [r2, #4]
 80056ce:	60a1      	str	r1, [r4, #8]
 80056d0:	2200      	movs	r2, #0
 80056d2:	e884 0044 	stmia.w	r4, {r2, r6}
 80056d6:	6124      	str	r4, [r4, #16]
 80056d8:	f840 6c04 	str.w	r6, [r0, #-4]
 80056dc:	f104 0008 	add.w	r0, r4, #8
 80056e0:	b101      	cbz	r1, 80056e4 <_AddFreeMemory+0x78>
 80056e2:	6048      	str	r0, [r1, #4]
 80056e4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80056e8:	60e2      	str	r2, [r4, #12]
 80056ea:	60a1      	str	r1, [r4, #8]
 80056ec:	6058      	str	r0, [r3, #4]
 80056ee:	682b      	ldr	r3, [r5, #0]
 80056f0:	18f2      	adds	r2, r6, r3
 80056f2:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
 80056f6:	602a      	str	r2, [r5, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1df      	bne.n	80056bc <_AddFreeMemory+0x50>
 80056fc:	68eb      	ldr	r3, [r5, #12]
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	68aa      	ldr	r2, [r5, #8]
 8005702:	4293      	cmp	r3, r2
 8005704:	bf88      	it	hi
 8005706:	60ab      	strhi	r3, [r5, #8]
 8005708:	e7d8      	b.n	80056bc <_AddFreeMemory+0x50>
 800570a:	bf00      	nop
 800570c:	200088a8 	.word	0x200088a8

08005710 <_RemoveHoles>:
 8005710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	4d22      	ldr	r5, [pc, #136]	; (80057a0 <_RemoveHoles+0x90>)
 8005716:	68ef      	ldr	r7, [r5, #12]
 8005718:	6bac      	ldr	r4, [r5, #56]	; 0x38
 800571a:	3f01      	subs	r7, #1
 800571c:	4682      	mov	sl, r0
 800571e:	4427      	add	r7, r4
 8005720:	e894 0048 	ldmia.w	r4, {r3, r6}
 8005724:	bb93      	cbnz	r3, 800578c <_RemoveHoles+0x7c>
 8005726:	eb04 0906 	add.w	r9, r4, r6
 800572a:	454f      	cmp	r7, r9
 800572c:	d92e      	bls.n	800578c <_RemoveHoles+0x7c>
 800572e:	f854 b006 	ldr.w	fp, [r4, r6]
 8005732:	f1bb 0f00 	cmp.w	fp, #0
 8005736:	d029      	beq.n	800578c <_RemoveHoles+0x7c>
 8005738:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800573a:	f813 303b 	ldrb.w	r3, [r3, fp, lsl #3]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d124      	bne.n	800578c <_RemoveHoles+0x7c>
 8005742:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8005744:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8005748:	9301      	str	r3, [sp, #4]
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff ff6e 	bl	800562c <_RemoveFreeBlock>
 8005750:	f8d9 1000 	ldr.w	r1, [r9]
 8005754:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005756:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800575a:	4620      	mov	r0, r4
 800575c:	6054      	str	r4, [r2, #4]
 800575e:	4649      	mov	r1, r9
 8005760:	4642      	mov	r2, r8
 8005762:	f008 fef1 	bl	800e548 <memmove>
 8005766:	9b01      	ldr	r3, [sp, #4]
 8005768:	459b      	cmp	fp, r3
 800576a:	bf08      	it	eq
 800576c:	6b6b      	ldreq	r3, [r5, #52]	; 0x34
 800576e:	eb04 0108 	add.w	r1, r4, r8
 8005772:	bf08      	it	eq
 8005774:	1b9b      	subeq	r3, r3, r6
 8005776:	4630      	mov	r0, r6
 8005778:	bf08      	it	eq
 800577a:	636b      	streq	r3, [r5, #52]	; 0x34
 800577c:	f7ff ff76 	bl	800566c <_AddFreeMemory>
 8005780:	f1ba 0f00 	cmp.w	sl, #0
 8005784:	d001      	beq.n	800578a <_RemoveHoles+0x7a>
 8005786:	4550      	cmp	r0, sl
 8005788:	d207      	bcs.n	800579a <_RemoveHoles+0x8a>
 800578a:	4646      	mov	r6, r8
 800578c:	4434      	add	r4, r6
 800578e:	42a7      	cmp	r7, r4
 8005790:	d8c6      	bhi.n	8005720 <_RemoveHoles+0x10>
 8005792:	2001      	movs	r0, #1
 8005794:	b003      	add	sp, #12
 8005796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579a:	2000      	movs	r0, #0
 800579c:	e7fa      	b.n	8005794 <_RemoveHoles+0x84>
 800579e:	bf00      	nop
 80057a0:	200088a8 	.word	0x200088a8

080057a4 <GUI_ALLOC_FreeFixedBlock>:
 80057a4:	b128      	cbz	r0, 80057b2 <GUI_ALLOC_FreeFixedBlock+0xe>
 80057a6:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <GUI_ALLOC_FreeFixedBlock+0x10>)
 80057a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057aa:	6002      	str	r2, [r0, #0]
 80057ac:	b102      	cbz	r2, 80057b0 <GUI_ALLOC_FreeFixedBlock+0xc>
 80057ae:	6050      	str	r0, [r2, #4]
 80057b0:	63d8      	str	r0, [r3, #60]	; 0x3c
 80057b2:	4770      	bx	lr
 80057b4:	200088a8 	.word	0x200088a8

080057b8 <GUI_ALLOC_h2p>:
 80057b8:	4b03      	ldr	r3, [pc, #12]	; (80057c8 <GUI_ALLOC_h2p+0x10>)
 80057ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057bc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 80057c0:	6840      	ldr	r0, [r0, #4]
 80057c2:	3008      	adds	r0, #8
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	200088a8 	.word	0x200088a8

080057cc <GUI_ALLOC_LockH>:
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <GUI_ALLOC_LockH+0x18>)
 80057ce:	69da      	ldr	r2, [r3, #28]
 80057d0:	3201      	adds	r2, #1
 80057d2:	61da      	str	r2, [r3, #28]
 80057d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057d6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
 80057da:	3301      	adds	r3, #1
 80057dc:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
 80057e0:	f7ff bfea 	b.w	80057b8 <GUI_ALLOC_h2p>
 80057e4:	200088a8 	.word	0x200088a8

080057e8 <GUI_ALLOC_UnlockH>:
 80057e8:	b530      	push	{r4, r5, lr}
 80057ea:	6803      	ldr	r3, [r0, #0]
 80057ec:	4909      	ldr	r1, [pc, #36]	; (8005814 <GUI_ALLOC_UnlockH+0x2c>)
 80057ee:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80057f2:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80057f4:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d903      	bls.n	8005804 <GUI_ALLOC_UnlockH+0x1c>
 80057fc:	69ca      	ldr	r2, [r1, #28]
 80057fe:	b10a      	cbz	r2, 8005804 <GUI_ALLOC_UnlockH+0x1c>
 8005800:	3a01      	subs	r2, #1
 8005802:	61ca      	str	r2, [r1, #28]
 8005804:	3b01      	subs	r3, #1
 8005806:	f804 3035 	strb.w	r3, [r4, r5, lsl #3]
 800580a:	2300      	movs	r3, #0
 800580c:	6003      	str	r3, [r0, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	bd30      	pop	{r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	200088a8 	.word	0x200088a8

08005818 <GUI_ALLOC_AssignMemory>:
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <GUI_ALLOC_AssignMemory+0xc>)
 800581a:	f021 0103 	bic.w	r1, r1, #3
 800581e:	6018      	str	r0, [r3, #0]
 8005820:	6059      	str	r1, [r3, #4]
 8005822:	4770      	bx	lr
 8005824:	200001bc 	.word	0x200001bc

08005828 <GUI_ALLOC_GetSize>:
 8005828:	b130      	cbz	r0, 8005838 <GUI_ALLOC_GetSize+0x10>
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <GUI_ALLOC_GetSize+0x14>)
 800582c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8005832:	6843      	ldr	r3, [r0, #4]
 8005834:	6858      	ldr	r0, [r3, #4]
 8005836:	380c      	subs	r0, #12
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	200088a8 	.word	0x200088a8

08005840 <GUI_ALLOC_Free>:
 8005840:	b510      	push	{r4, lr}
 8005842:	4604      	mov	r4, r0
 8005844:	b160      	cbz	r0, 8005860 <GUI_ALLOC_Free+0x20>
 8005846:	4b07      	ldr	r3, [pc, #28]	; (8005864 <GUI_ALLOC_Free+0x24>)
 8005848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	6848      	ldr	r0, [r1, #4]
 8005852:	f7ff ff0b 	bl	800566c <_AddFreeMemory>
 8005856:	4620      	mov	r0, r4
 8005858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800585c:	f7ff bed4 	b.w	8005608 <_PushFreeBlock>
 8005860:	bd10      	pop	{r4, pc}
 8005862:	bf00      	nop
 8005864:	200088a8 	.word	0x200088a8

08005868 <_EnlargeBlocks>:
 8005868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800586c:	4c23      	ldr	r4, [pc, #140]	; (80058fc <_EnlargeBlocks+0x94>)
 800586e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d133      	bne.n	80058dc <_EnlargeBlocks+0x74>
 8005874:	4a22      	ldr	r2, [pc, #136]	; (8005900 <_EnlargeBlocks+0x98>)
 8005876:	6895      	ldr	r5, [r2, #8]
 8005878:	f105 0308 	add.w	r3, r5, #8
 800587c:	6855      	ldr	r5, [r2, #4]
 800587e:	fbb5 f5f3 	udiv	r5, r5, r3
 8005882:	3502      	adds	r5, #2
 8005884:	00e8      	lsls	r0, r5, #3
 8005886:	f000 f8f7 	bl	8005a78 <_Alloc>
 800588a:	4680      	mov	r8, r0
 800588c:	b388      	cbz	r0, 80058f2 <_EnlargeBlocks+0x8a>
 800588e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005890:	6922      	ldr	r2, [r4, #16]
 8005892:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005894:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
 8005898:	00d2      	lsls	r2, r2, #3
 800589a:	685e      	ldr	r6, [r3, #4]
 800589c:	4b19      	ldr	r3, [pc, #100]	; (8005904 <_EnlargeBlocks+0x9c>)
 800589e:	3608      	adds	r6, #8
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4630      	mov	r0, r6
 80058a4:	4798      	blx	r3
 80058a6:	6922      	ldr	r2, [r4, #16]
 80058a8:	6366      	str	r6, [r4, #52]	; 0x34
 80058aa:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 80058ae:	4613      	mov	r3, r2
 80058b0:	1e69      	subs	r1, r5, #1
 80058b2:	428b      	cmp	r3, r1
 80058b4:	d317      	bcc.n	80058e6 <_EnlargeBlocks+0x7e>
 80058b6:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 80058ba:	f04f 0800 	mov.w	r8, #0
 80058be:	f8c6 8004 	str.w	r8, [r6, #4]
 80058c2:	6863      	ldr	r3, [r4, #4]
 80058c4:	6262      	str	r2, [r4, #36]	; 0x24
 80058c6:	1a9b      	subs	r3, r3, r2
 80058c8:	442b      	add	r3, r5
 80058ca:	6063      	str	r3, [r4, #4]
 80058cc:	6125      	str	r5, [r4, #16]
 80058ce:	4638      	mov	r0, r7
 80058d0:	b197      	cbz	r7, 80058f8 <_EnlargeBlocks+0x90>
 80058d2:	f7ff ffb5 	bl	8005840 <GUI_ALLOC_Free>
 80058d6:	4640      	mov	r0, r8
 80058d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058dc:	6923      	ldr	r3, [r4, #16]
 80058de:	1d1d      	adds	r5, r3, #4
 80058e0:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 80058e4:	e7ce      	b.n	8005884 <_EnlargeBlocks+0x1c>
 80058e6:	3301      	adds	r3, #1
 80058e8:	eb06 00c3 	add.w	r0, r6, r3, lsl #3
 80058ec:	f840 3c04 	str.w	r3, [r0, #-4]
 80058f0:	e7df      	b.n	80058b2 <_EnlargeBlocks+0x4a>
 80058f2:	2001      	movs	r0, #1
 80058f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fc:	200088a8 	.word	0x200088a8
 8005900:	200001bc 	.word	0x200001bc
 8005904:	200000cc 	.word	0x200000cc

08005908 <_InitOnce>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4c17      	ldr	r4, [pc, #92]	; (8005968 <_InitOnce+0x60>)
 800590c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005910:	bb4b      	cbnz	r3, 8005966 <_InitOnce+0x5e>
 8005912:	2301      	movs	r3, #1
 8005914:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8005918:	4b14      	ldr	r3, [pc, #80]	; (800596c <_InitOnce+0x64>)
 800591a:	2210      	movs	r2, #16
 800591c:	60da      	str	r2, [r3, #12]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	b912      	cbnz	r2, 8005928 <_InitOnce+0x20>
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	0892      	lsrs	r2, r2, #2
 8005926:	609a      	str	r2, [r3, #8]
 8005928:	225a      	movs	r2, #90	; 0x5a
 800592a:	6819      	ldr	r1, [r3, #0]
 800592c:	6222      	str	r2, [r4, #32]
 800592e:	2610      	movs	r6, #16
 8005930:	2200      	movs	r2, #0
 8005932:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 8005936:	fa06 f502 	lsl.w	r5, r6, r2
 800593a:	3201      	adds	r2, #1
 800593c:	2a10      	cmp	r2, #16
 800593e:	6405      	str	r5, [r0, #64]	; 0x40
 8005940:	d1f7      	bne.n	8005932 <_InitOnce+0x2a>
 8005942:	6858      	ldr	r0, [r3, #4]
 8005944:	63a1      	str	r1, [r4, #56]	; 0x38
 8005946:	f1a0 0314 	sub.w	r3, r0, #20
 800594a:	440b      	add	r3, r1
 800594c:	2501      	movs	r5, #1
 800594e:	2202      	movs	r2, #2
 8005950:	6122      	str	r2, [r4, #16]
 8005952:	6363      	str	r3, [r4, #52]	; 0x34
 8005954:	60e0      	str	r0, [r4, #12]
 8005956:	605d      	str	r5, [r3, #4]
 8005958:	6265      	str	r5, [r4, #36]	; 0x24
 800595a:	6065      	str	r5, [r4, #4]
 800595c:	f7ff fe86 	bl	800566c <_AddFreeMemory>
 8005960:	f7ff ff82 	bl	8005868 <_EnlargeBlocks>
 8005964:	6325      	str	r5, [r4, #48]	; 0x30
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	200088a8 	.word	0x200088a8
 800596c:	200001bc 	.word	0x200001bc

08005970 <GUI_ALLOC_GetFixedBlock>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	4605      	mov	r5, r0
 8005974:	4f26      	ldr	r7, [pc, #152]	; (8005a10 <GUI_ALLOC_GetFixedBlock+0xa0>)
 8005976:	3503      	adds	r5, #3
 8005978:	f7ff ffc6 	bl	8005908 <_InitOnce>
 800597c:	f025 0503 	bic.w	r5, r5, #3
 8005980:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005982:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8005984:	3504      	adds	r5, #4
 8005986:	4285      	cmp	r5, r0
 8005988:	bf38      	it	cc
 800598a:	4605      	movcc	r5, r0
 800598c:	4620      	mov	r0, r4
 800598e:	bb38      	cbnz	r0, 80059e0 <GUI_ALLOC_GetFixedBlock+0x70>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8005994:	441c      	add	r4, r3
 8005996:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800599a:	1ba6      	subs	r6, r4, r6
 800599c:	6833      	ldr	r3, [r6, #0]
 800599e:	b123      	cbz	r3, 80059aa <GUI_ALLOC_GetFixedBlock+0x3a>
 80059a0:	f7ff feb6 	bl	8005710 <_RemoveHoles>
 80059a4:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80059a8:	1ba6      	subs	r6, r4, r6
 80059aa:	6830      	ldr	r0, [r6, #0]
 80059ac:	bb08      	cbnz	r0, 80059f2 <GUI_ALLOC_GetFixedBlock+0x82>
 80059ae:	6874      	ldr	r4, [r6, #4]
 80059b0:	42a5      	cmp	r5, r4
 80059b2:	dc1e      	bgt.n	80059f2 <GUI_ALLOC_GetFixedBlock+0x82>
 80059b4:	f1c5 0004 	rsb	r0, r5, #4
 80059b8:	4420      	add	r0, r4
 80059ba:	1834      	adds	r4, r6, r0
 80059bc:	4630      	mov	r0, r6
 80059be:	f7ff fe35 	bl	800562c <_RemoveFreeBlock>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6870      	ldr	r0, [r6, #4]
 80059c6:	1b5b      	subs	r3, r3, r5
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	1b40      	subs	r0, r0, r5
 80059ce:	442b      	add	r3, r5
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	d002      	beq.n	80059da <GUI_ALLOC_GetFixedBlock+0x6a>
 80059d4:	4631      	mov	r1, r6
 80059d6:	f7ff fe49 	bl	800566c <_AddFreeMemory>
 80059da:	f844 5c04 	str.w	r5, [r4, #-4]
 80059de:	e014      	b.n	8005a0a <GUI_ALLOC_GetFixedBlock+0x9a>
 80059e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80059e4:	429d      	cmp	r5, r3
 80059e6:	6803      	ldr	r3, [r0, #0]
 80059e8:	d005      	beq.n	80059f6 <GUI_ALLOC_GetFixedBlock+0x86>
 80059ea:	4618      	mov	r0, r3
 80059ec:	e7cf      	b.n	800598e <GUI_ALLOC_GetFixedBlock+0x1e>
 80059ee:	4604      	mov	r4, r0
 80059f0:	e00b      	b.n	8005a0a <GUI_ALLOC_GetFixedBlock+0x9a>
 80059f2:	2400      	movs	r4, #0
 80059f4:	e009      	b.n	8005a0a <GUI_ALLOC_GetFixedBlock+0x9a>
 80059f6:	b10b      	cbz	r3, 80059fc <GUI_ALLOC_GetFixedBlock+0x8c>
 80059f8:	6842      	ldr	r2, [r0, #4]
 80059fa:	605a      	str	r2, [r3, #4]
 80059fc:	6842      	ldr	r2, [r0, #4]
 80059fe:	b102      	cbz	r2, 8005a02 <GUI_ALLOC_GetFixedBlock+0x92>
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	4284      	cmp	r4, r0
 8005a04:	d1f3      	bne.n	80059ee <GUI_ALLOC_GetFixedBlock+0x7e>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	200088a8 	.word	0x200088a8

08005a14 <GUI_ALLOC_GetMaxSize>:
 8005a14:	b508      	push	{r3, lr}
 8005a16:	f7ff ff77 	bl	8005908 <_InitOnce>
 8005a1a:	4a0b      	ldr	r2, [pc, #44]	; (8005a48 <GUI_ALLOC_GetMaxSize+0x34>)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	1899      	adds	r1, r3, r2
 8005a20:	f8d1 00bc 	ldr.w	r0, [r1, #188]	; 0xbc
 8005a24:	b150      	cbz	r0, 8005a3c <GUI_ALLOC_GetMaxSize+0x28>
 8005a26:	6883      	ldr	r3, [r0, #8]
 8005a28:	2000      	movs	r0, #0
 8005a2a:	b15b      	cbz	r3, 8005a44 <GUI_ALLOC_GetMaxSize+0x30>
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4290      	cmp	r0, r2
 8005a32:	bf38      	it	cc
 8005a34:	4610      	movcc	r0, r2
 8005a36:	b12b      	cbz	r3, 8005a44 <GUI_ALLOC_GetMaxSize+0x30>
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	e7f6      	b.n	8005a2a <GUI_ALLOC_GetMaxSize+0x16>
 8005a3c:	3b08      	subs	r3, #8
 8005a3e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8005a42:	d1ec      	bne.n	8005a1e <GUI_ALLOC_GetMaxSize+0xa>
 8005a44:	380c      	subs	r0, #12
 8005a46:	bd08      	pop	{r3, pc}
 8005a48:	200088a8 	.word	0x200088a8

08005a4c <GUI_ALLOC_RequestSize>:
 8005a4c:	b508      	push	{r3, lr}
 8005a4e:	f7ff ffe1 	bl	8005a14 <GUI_ALLOC_GetMaxSize>
 8005a52:	4908      	ldr	r1, [pc, #32]	; (8005a74 <GUI_ALLOC_RequestSize+0x28>)
 8005a54:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8005a58:	f04f 0264 	mov.w	r2, #100	; 0x64
 8005a5c:	bf91      	iteee	ls
 8005a5e:	6a0b      	ldrls	r3, [r1, #32]
 8005a60:	fb90 f3f2 	sdivhi	r3, r0, r2
 8005a64:	6a08      	ldrhi	r0, [r1, #32]
 8005a66:	4358      	mulhi	r0, r3
 8005a68:	bf9c      	itt	ls
 8005a6a:	4358      	mulls	r0, r3
 8005a6c:	fbb0 f0f2 	udivls	r0, r0, r2
 8005a70:	bd08      	pop	{r3, pc}
 8005a72:	bf00      	nop
 8005a74:	200088a8 	.word	0x200088a8

08005a78 <_Alloc>:
 8005a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	4d38      	ldr	r5, [pc, #224]	; (8005b60 <_Alloc+0xe8>)
 8005a7e:	4604      	mov	r4, r0
 8005a80:	f7ff ff42 	bl	8005908 <_InitOnce>
 8005a84:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	42b4      	cmp	r4, r6
 8005a8a:	bf24      	itt	cs
 8005a8c:	3403      	addcs	r4, #3
 8005a8e:	f024 0603 	biccs.w	r6, r4, #3
 8005a92:	360c      	adds	r6, #12
 8005a94:	42b3      	cmp	r3, r6
 8005a96:	d203      	bcs.n	8005aa0 <_Alloc+0x28>
 8005a98:	2700      	movs	r7, #0
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005aa2:	686a      	ldr	r2, [r5, #4]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d923      	bls.n	8005af0 <_Alloc+0x78>
 8005aa8:	686b      	ldr	r3, [r5, #4]
 8005aaa:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005aac:	3b01      	subs	r3, #1
 8005aae:	606b      	str	r3, [r5, #4]
 8005ab0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005ab2:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 8005ab6:	eb03 0208 	add.w	r2, r3, r8
 8005aba:	6852      	ldr	r2, [r2, #4]
 8005abc:	626a      	str	r2, [r5, #36]	; 0x24
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f803 2037 	strb.w	r2, [r3, r7, lsl #3]
 8005ac4:	2f00      	cmp	r7, #0
 8005ac6:	d0e7      	beq.n	8005a98 <_Alloc+0x20>
 8005ac8:	230f      	movs	r3, #15
 8005aca:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8005ace:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ad0:	4296      	cmp	r6, r2
 8005ad2:	d202      	bcs.n	8005ada <_Alloc+0x62>
 8005ad4:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8005ad8:	d2f7      	bcs.n	8005aca <_Alloc+0x52>
 8005ada:	2b0f      	cmp	r3, #15
 8005adc:	d912      	bls.n	8005b04 <_Alloc+0x8c>
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f7ff fe16 	bl	8005710 <_RemoveHoles>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d0ef      	beq.n	8005ac8 <_Alloc+0x50>
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f7ff fd8d 	bl	8005608 <_PushFreeBlock>
 8005aee:	e7d3      	b.n	8005a98 <_Alloc+0x20>
 8005af0:	3b01      	subs	r3, #1
 8005af2:	632b      	str	r3, [r5, #48]	; 0x30
 8005af4:	f7ff feb8 	bl	8005868 <_EnlargeBlocks>
 8005af8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005afa:	3301      	adds	r3, #1
 8005afc:	632b      	str	r3, [r5, #48]	; 0x30
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d0d2      	beq.n	8005aa8 <_Alloc+0x30>
 8005b02:	e7c9      	b.n	8005a98 <_Alloc+0x20>
 8005b04:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8005b08:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005b0a:	b132      	cbz	r2, 8005b1a <_Alloc+0xa2>
 8005b0c:	6894      	ldr	r4, [r2, #8]
 8005b0e:	b124      	cbz	r4, 8005b1a <_Alloc+0xa2>
 8005b10:	6862      	ldr	r2, [r4, #4]
 8005b12:	4296      	cmp	r6, r2
 8005b14:	d903      	bls.n	8005b1e <_Alloc+0xa6>
 8005b16:	68a2      	ldr	r2, [r4, #8]
 8005b18:	e7f7      	b.n	8005b0a <_Alloc+0x92>
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	e7dd      	b.n	8005ada <_Alloc+0x62>
 8005b1e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8005b22:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005b24:	eba9 0206 	sub.w	r2, r9, r6
 8005b28:	330c      	adds	r3, #12
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	bf38      	it	cc
 8005b30:	464e      	movcc	r6, r9
 8005b32:	f7ff fd7b 	bl	800562c <_RemoveFreeBlock>
 8005b36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005b38:	19a1      	adds	r1, r4, r6
 8005b3a:	4498      	add	r8, r3
 8005b3c:	454e      	cmp	r6, r9
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	f8c8 4004 	str.w	r4, [r8, #4]
 8005b46:	6027      	str	r7, [r4, #0]
 8005b48:	6066      	str	r6, [r4, #4]
 8005b4a:	60a3      	str	r3, [r4, #8]
 8005b4c:	6124      	str	r4, [r4, #16]
 8005b4e:	f841 6c04 	str.w	r6, [r1, #-4]
 8005b52:	daa2      	bge.n	8005a9a <_Alloc+0x22>
 8005b54:	eba9 0006 	sub.w	r0, r9, r6
 8005b58:	f7ff fd88 	bl	800566c <_AddFreeMemory>
 8005b5c:	e79d      	b.n	8005a9a <_Alloc+0x22>
 8005b5e:	bf00      	nop
 8005b60:	200088a8 	.word	0x200088a8

08005b64 <GUI_ALLOC_AllocNoInit>:
 8005b64:	b108      	cbz	r0, 8005b6a <GUI_ALLOC_AllocNoInit+0x6>
 8005b66:	f7ff bf87 	b.w	8005a78 <_Alloc>
 8005b6a:	4770      	bx	lr

08005b6c <GUI_ALLOC_FreePtr>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4604      	mov	r4, r0
 8005b70:	6800      	ldr	r0, [r0, #0]
 8005b72:	f7ff fe65 	bl	8005840 <GUI_ALLOC_Free>
 8005b76:	2300      	movs	r3, #0
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd10      	pop	{r4, pc}

08005b7c <GUI_ALLOC_FreePtrArray>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4606      	mov	r6, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	2400      	movs	r4, #0
 8005b84:	42ac      	cmp	r4, r5
 8005b86:	db00      	blt.n	8005b8a <GUI_ALLOC_FreePtrArray+0xe>
 8005b88:	bd70      	pop	{r4, r5, r6, pc}
 8005b8a:	eb06 0084 	add.w	r0, r6, r4, lsl #2
 8005b8e:	f7ff ffed 	bl	8005b6c <GUI_ALLOC_FreePtr>
 8005b92:	3401      	adds	r4, #1
 8005b94:	e7f6      	b.n	8005b84 <GUI_ALLOC_FreePtrArray+0x8>
	...

08005b98 <GUI_ALLOC_AllocZero>:
 8005b98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b9a:	4606      	mov	r6, r0
 8005b9c:	f7ff ffe2 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	b160      	cbz	r0, 8005bbe <GUI_ALLOC_AllocZero+0x26>
 8005ba4:	f7ff fe12 	bl	80057cc <GUI_ALLOC_LockH>
 8005ba8:	ac02      	add	r4, sp, #8
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <GUI_ALLOC_AllocZero+0x2c>)
 8005bac:	f844 0d04 	str.w	r0, [r4, #-4]!
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4632      	mov	r2, r6
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4798      	blx	r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff fe15 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	b002      	add	sp, #8
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	200000d4 	.word	0x200000d4

08005bc8 <GUI_GetYAdjust>:
 8005bc8:	4b0a      	ldr	r3, [pc, #40]	; (8005bf4 <GUI_GetYAdjust+0x2c>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8005bce:	f003 030c 	and.w	r3, r3, #12
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d007      	beq.n	8005be6 <GUI_GetYAdjust+0x1e>
 8005bd6:	2b0c      	cmp	r3, #12
 8005bd8:	d005      	beq.n	8005be6 <GUI_GetYAdjust+0x1e>
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d107      	bne.n	8005bee <GUI_GetYAdjust+0x26>
 8005bde:	69d3      	ldr	r3, [r2, #28]
 8005be0:	7e18      	ldrb	r0, [r3, #24]
 8005be2:	3801      	subs	r0, #1
 8005be4:	4770      	bx	lr
 8005be6:	69d3      	ldr	r3, [r2, #28]
 8005be8:	7e18      	ldrb	r0, [r3, #24]
 8005bea:	0840      	lsrs	r0, r0, #1
 8005bec:	4770      	bx	lr
 8005bee:	2000      	movs	r0, #0
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	200000d8 	.word	0x200000d8

08005bf8 <GUI_GetFontDistY>:
 8005bf8:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <GUI_GetFontDistY+0xc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	7e58      	ldrb	r0, [r3, #25]
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	200000d8 	.word	0x200000d8

08005c08 <GUI_GetCharDistX>:
 8005c08:	4b02      	ldr	r3, [pc, #8]	; (8005c14 <GUI_GetCharDistX+0xc>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	2100      	movs	r1, #0
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	4718      	bx	r3
 8005c14:	200000d8 	.word	0x200000d8

08005c18 <GUI_GetCharDistXEx>:
 8005c18:	4b02      	ldr	r3, [pc, #8]	; (8005c24 <GUI_GetCharDistXEx+0xc>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4718      	bx	r3
 8005c22:	bf00      	nop
 8005c24:	200000d8 	.word	0x200000d8

08005c28 <GUIMONO_DispChar>:
 8005c28:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <GUIMONO_DispChar+0x138>)
 8005c2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	69d1      	ldr	r1, [r2, #28]
 8005c32:	69cc      	ldr	r4, [r1, #28]
 8005c34:	89a3      	ldrh	r3, [r4, #12]
 8005c36:	4283      	cmp	r3, r0
 8005c38:	b08b      	sub	sp, #44	; 0x2c
 8005c3a:	d87b      	bhi.n	8005d34 <GUIMONO_DispChar+0x10c>
 8005c3c:	89e5      	ldrh	r5, [r4, #14]
 8005c3e:	4285      	cmp	r5, r0
 8005c40:	d378      	bcc.n	8005d34 <GUIMONO_DispChar+0x10c>
 8005c42:	6825      	ldr	r5, [r4, #0]
 8005c44:	9506      	str	r5, [sp, #24]
 8005c46:	1ac3      	subs	r3, r0, r3
 8005c48:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005c4c:	1c58      	adds	r0, r3, #1
 8005c4e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c50:	d067      	beq.n	8005d22 <GUIMONO_DispChar+0xfa>
 8005c52:	f891 b018 	ldrb.w	fp, [r1, #24]
 8005c56:	f9b2 902a 	ldrsh.w	r9, [r2, #42]	; 0x2a
 8005c5a:	7ca1      	ldrb	r1, [r4, #18]
 8005c5c:	4d40      	ldr	r5, [pc, #256]	; (8005d60 <GUIMONO_DispChar+0x138>)
 8005c5e:	f9b2 7022 	ldrsh.w	r7, [r2, #34]	; 0x22
 8005c62:	f9b2 8024 	ldrsh.w	r8, [r2, #36]	; 0x24
 8005c66:	f894 a010 	ldrb.w	sl, [r4, #16]
 8005c6a:	fb11 f30b 	smulbb	r3, r1, fp
 8005c6e:	4648      	mov	r0, r9
 8005c70:	9307      	str	r3, [sp, #28]
 8005c72:	f002 fc23 	bl	80084bc <LCD_SetDrawMode>
 8005c76:	6829      	ldr	r1, [r5, #0]
 8005c78:	9b07      	ldr	r3, [sp, #28]
 8005c7a:	69ca      	ldr	r2, [r1, #28]
 8005c7c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8005c7e:	9105      	str	r1, [sp, #20]
 8005c80:	9008      	str	r0, [sp, #32]
 8005c82:	9906      	ldr	r1, [sp, #24]
 8005c84:	4618      	mov	r0, r3
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	fb00 1303 	mla	r3, r0, r3, r1
 8005c8c:	9304      	str	r3, [sp, #16]
 8005c8e:	7ca3      	ldrb	r3, [r4, #18]
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	2301      	movs	r3, #1
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	7ed3      	ldrb	r3, [r2, #27]
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	7e93      	ldrb	r3, [r2, #26]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	4652      	mov	r2, sl
 8005ca0:	465b      	mov	r3, fp
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	f002 fda7 	bl	80087f8 <LCD_DrawBitmap>
 8005caa:	1c73      	adds	r3, r6, #1
 8005cac:	d01a      	beq.n	8005ce4 <GUIMONO_DispChar+0xbc>
 8005cae:	f049 0002 	orr.w	r0, r9, #2
 8005cb2:	f002 fc03 	bl	80084bc <LCD_SetDrawMode>
 8005cb6:	682a      	ldr	r2, [r5, #0]
 8005cb8:	9906      	ldr	r1, [sp, #24]
 8005cba:	69d3      	ldr	r3, [r2, #28]
 8005cbc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cbe:	9205      	str	r2, [sp, #20]
 8005cc0:	9a07      	ldr	r2, [sp, #28]
 8005cc2:	fb02 1606 	mla	r6, r2, r6, r1
 8005cc6:	9604      	str	r6, [sp, #16]
 8005cc8:	7ca2      	ldrb	r2, [r4, #18]
 8005cca:	9203      	str	r2, [sp, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	9202      	str	r2, [sp, #8]
 8005cd0:	7eda      	ldrb	r2, [r3, #27]
 8005cd2:	9201      	str	r2, [sp, #4]
 8005cd4:	7e9b      	ldrb	r3, [r3, #26]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4652      	mov	r2, sl
 8005cda:	465b      	mov	r3, fp
 8005cdc:	4641      	mov	r1, r8
 8005cde:	4638      	mov	r0, r7
 8005ce0:	f002 fd8a 	bl	80087f8 <LCD_DrawBitmap>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	7e5a      	ldrb	r2, [r3, #25]
 8005cea:	7e1b      	ldrb	r3, [r3, #24]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d914      	bls.n	8005d1a <GUIMONO_DispChar+0xf2>
 8005cf0:	f1b9 0f02 	cmp.w	r9, #2
 8005cf4:	d011      	beq.n	8005d1a <GUIMONO_DispChar+0xf2>
 8005cf6:	f089 0004 	eor.w	r0, r9, #4
 8005cfa:	f002 fbdf 	bl	80084bc <LCD_SetDrawMode>
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	69d8      	ldr	r0, [r3, #28]
 8005d02:	7e43      	ldrb	r3, [r0, #25]
 8005d04:	7e82      	ldrb	r2, [r0, #26]
 8005d06:	7e05      	ldrb	r5, [r0, #24]
 8005d08:	7ec1      	ldrb	r1, [r0, #27]
 8005d0a:	4443      	add	r3, r8
 8005d0c:	fb02 720a 	mla	r2, r2, sl, r7
 8005d10:	fb05 8101 	mla	r1, r5, r1, r8
 8005d14:	4638      	mov	r0, r7
 8005d16:	f002 fc5b 	bl	80085d0 <LCD_FillRect>
 8005d1a:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8005d1e:	f002 fbcd 	bl	80084bc <LCD_SetDrawMode>
 8005d22:	4b0f      	ldr	r3, [pc, #60]	; (8005d60 <GUIMONO_DispChar+0x138>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	7c63      	ldrb	r3, [r4, #17]
 8005d28:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8005d2a:	440b      	add	r3, r1
 8005d2c:	8453      	strh	r3, [r2, #34]	; 0x22
 8005d2e:	b00b      	add	sp, #44	; 0x2c
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f3      	beq.n	8005d22 <GUIMONO_DispChar+0xfa>
 8005d3a:	881d      	ldrh	r5, [r3, #0]
 8005d3c:	42a8      	cmp	r0, r5
 8005d3e:	d3f0      	bcc.n	8005d22 <GUIMONO_DispChar+0xfa>
 8005d40:	885e      	ldrh	r6, [r3, #2]
 8005d42:	4286      	cmp	r6, r0
 8005d44:	d3ed      	bcc.n	8005d22 <GUIMONO_DispChar+0xfa>
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	6866      	ldr	r6, [r4, #4]
 8005d4a:	9606      	str	r6, [sp, #24]
 8005d4c:	1b40      	subs	r0, r0, r5
 8005d4e:	b280      	uxth	r0, r0
 8005d50:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8005d54:	f933 3020 	ldrsh.w	r3, [r3, r0, lsl #2]
 8005d58:	f9b5 6002 	ldrsh.w	r6, [r5, #2]
 8005d5c:	e776      	b.n	8005c4c <GUIMONO_DispChar+0x24>
 8005d5e:	bf00      	nop
 8005d60:	200000d8 	.word	0x200000d8

08005d64 <GUIMONO_GetCharDistX>:
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <GUIMONO_GetCharDistX+0x14>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	69db      	ldr	r3, [r3, #28]
 8005d6c:	b109      	cbz	r1, 8005d72 <GUIMONO_GetCharDistX+0xe>
 8005d6e:	7c1a      	ldrb	r2, [r3, #16]
 8005d70:	600a      	str	r2, [r1, #0]
 8005d72:	7c58      	ldrb	r0, [r3, #17]
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	200000d8 	.word	0x200000d8

08005d7c <GUIMONO_GetFontInfo>:
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	800b      	strh	r3, [r1, #0]
 8005d80:	4770      	bx	lr

08005d82 <GUIMONO_IsInFont>:
 8005d82:	69c3      	ldr	r3, [r0, #28]
 8005d84:	899a      	ldrh	r2, [r3, #12]
 8005d86:	428a      	cmp	r2, r1
 8005d88:	d802      	bhi.n	8005d90 <GUIMONO_IsInFont+0xe>
 8005d8a:	89da      	ldrh	r2, [r3, #14]
 8005d8c:	428a      	cmp	r2, r1
 8005d8e:	d20f      	bcs.n	8005db0 <GUIMONO_IsInFont+0x2e>
 8005d90:	6898      	ldr	r0, [r3, #8]
 8005d92:	b180      	cbz	r0, 8005db6 <GUIMONO_IsInFont+0x34>
 8005d94:	8803      	ldrh	r3, [r0, #0]
 8005d96:	4299      	cmp	r1, r3
 8005d98:	d30c      	bcc.n	8005db4 <GUIMONO_IsInFont+0x32>
 8005d9a:	8842      	ldrh	r2, [r0, #2]
 8005d9c:	428a      	cmp	r2, r1
 8005d9e:	d309      	bcc.n	8005db4 <GUIMONO_IsInFont+0x32>
 8005da0:	1ac9      	subs	r1, r1, r3
 8005da2:	6843      	ldr	r3, [r0, #4]
 8005da4:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 8005da8:	43c0      	mvns	r0, r0
 8005daa:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 8005dae:	4770      	bx	lr
 8005db0:	2001      	movs	r0, #1
 8005db2:	4770      	bx	lr
 8005db4:	2000      	movs	r0, #0
 8005db6:	4770      	bx	lr

08005db8 <GUIPROP__FindChar>:
 8005db8:	b900      	cbnz	r0, 8005dbc <GUIPROP__FindChar+0x4>
 8005dba:	4770      	bx	lr
 8005dbc:	8803      	ldrh	r3, [r0, #0]
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	d802      	bhi.n	8005dc8 <GUIPROP__FindChar+0x10>
 8005dc2:	8843      	ldrh	r3, [r0, #2]
 8005dc4:	428b      	cmp	r3, r1
 8005dc6:	d2f8      	bcs.n	8005dba <GUIPROP__FindChar+0x2>
 8005dc8:	6880      	ldr	r0, [r0, #8]
 8005dca:	e7f5      	b.n	8005db8 <GUIPROP__FindChar>

08005dcc <GUIPROP_DispChar>:
 8005dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd0:	4c38      	ldr	r4, [pc, #224]	; (8005eb4 <GUIPROP_DispChar+0xe8>)
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	b089      	sub	sp, #36	; 0x24
 8005ddc:	4605      	mov	r5, r0
 8005dde:	4601      	mov	r1, r0
 8005de0:	69d8      	ldr	r0, [r3, #28]
 8005de2:	f7ff ffe9 	bl	8005db8 <GUIPROP__FindChar>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d061      	beq.n	8005eae <GUIPROP_DispChar+0xe2>
 8005dea:	8803      	ldrh	r3, [r0, #0]
 8005dec:	6847      	ldr	r7, [r0, #4]
 8005dee:	1aed      	subs	r5, r5, r3
 8005df0:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
 8005df4:	4640      	mov	r0, r8
 8005df6:	f896 a002 	ldrb.w	sl, [r6, #2]
 8005dfa:	f002 fb5f 	bl	80084bc <LCD_SetDrawMode>
 8005dfe:	f8d4 c000 	ldr.w	ip, [r4]
 8005e02:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8005e06:	f8dc e01c 	ldr.w	lr, [ip, #28]
 8005e0a:	f8dc 3038 	ldr.w	r3, [ip, #56]	; 0x38
 8005e0e:	f89e b018 	ldrb.w	fp, [lr, #24]
 8005e12:	f9bc 1024 	ldrsh.w	r1, [ip, #36]	; 0x24
 8005e16:	4681      	mov	r9, r0
 8005e18:	f9bc 0022 	ldrsh.w	r0, [ip, #34]	; 0x22
 8005e1c:	9305      	str	r3, [sp, #20]
 8005e1e:	6873      	ldr	r3, [r6, #4]
 8005e20:	9304      	str	r3, [sp, #16]
 8005e22:	f04f 0c01 	mov.w	ip, #1
 8005e26:	f8cd a00c 	str.w	sl, [sp, #12]
 8005e2a:	f8cd c008 	str.w	ip, [sp, #8]
 8005e2e:	f89e c01b 	ldrb.w	ip, [lr, #27]
 8005e32:	f8cd c004 	str.w	ip, [sp, #4]
 8005e36:	f89e e01a 	ldrb.w	lr, [lr, #26]
 8005e3a:	f8cd e000 	str.w	lr, [sp]
 8005e3e:	465b      	mov	r3, fp
 8005e40:	f002 fcda 	bl	80087f8 <LCD_DrawBitmap>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	69da      	ldr	r2, [r3, #28]
 8005e48:	7e53      	ldrb	r3, [r2, #25]
 8005e4a:	f892 a018 	ldrb.w	sl, [r2, #24]
 8005e4e:	9307      	str	r3, [sp, #28]
 8005e50:	4553      	cmp	r3, sl
 8005e52:	d921      	bls.n	8005e98 <GUIPROP_DispChar+0xcc>
 8005e54:	f1b8 0f02 	cmp.w	r8, #2
 8005e58:	d01e      	beq.n	8005e98 <GUIPROP_DispChar+0xcc>
 8005e5a:	f892 b01b 	ldrb.w	fp, [r2, #27]
 8005e5e:	f000 f886 	bl	8005f6e <GUI_GetColor>
 8005e62:	4680      	mov	r8, r0
 8005e64:	f000 f87c 	bl	8005f60 <GUI_GetBkColor>
 8005e68:	f000 f949 	bl	80060fe <GUI_SetColor>
 8005e6c:	6822      	ldr	r2, [r4, #0]
 8005e6e:	9b07      	ldr	r3, [sp, #28]
 8005e70:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 8005e74:	f9b2 1024 	ldrsh.w	r1, [r2, #36]	; 0x24
 8005e78:	69d2      	ldr	r2, [r2, #28]
 8005e7a:	f892 e01b 	ldrb.w	lr, [r2, #27]
 8005e7e:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
 8005e82:	fb0b 1303 	mla	r3, fp, r3, r1
 8005e86:	fb0e 0202 	mla	r2, lr, r2, r0
 8005e8a:	fb0b 110a 	mla	r1, fp, sl, r1
 8005e8e:	f002 fb9f 	bl	80085d0 <LCD_FillRect>
 8005e92:	4640      	mov	r0, r8
 8005e94:	f000 f933 	bl	80060fe <GUI_SetColor>
 8005e98:	4648      	mov	r0, r9
 8005e9a:	f002 fb0f 	bl	80084bc <LCD_SetDrawMode>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8005ea4:	7e90      	ldrb	r0, [r2, #26]
 8005ea6:	7872      	ldrb	r2, [r6, #1]
 8005ea8:	fb00 1202 	mla	r2, r0, r2, r1
 8005eac:	845a      	strh	r2, [r3, #34]	; 0x22
 8005eae:	b009      	add	sp, #36	; 0x24
 8005eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb4:	200000d8 	.word	0x200000d8

08005eb8 <GUIPROP_GetCharDistX>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <GUIPROP_GetCharDistX+0x38>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69dd      	ldr	r5, [r3, #28]
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	4601      	mov	r1, r0
 8005ec6:	69e8      	ldr	r0, [r5, #28]
 8005ec8:	f7ff ff76 	bl	8005db8 <GUIPROP__FindChar>
 8005ecc:	b170      	cbz	r0, 8005eec <GUIPROP_GetCharDistX+0x34>
 8005ece:	8803      	ldrh	r3, [r0, #0]
 8005ed0:	7ea9      	ldrb	r1, [r5, #26]
 8005ed2:	1ad2      	subs	r2, r2, r3
 8005ed4:	6843      	ldr	r3, [r0, #4]
 8005ed6:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
 8005eda:	7840      	ldrb	r0, [r0, #1]
 8005edc:	fb10 f001 	smulbb	r0, r0, r1
 8005ee0:	b124      	cbz	r4, 8005eec <GUIPROP_GetCharDistX+0x34>
 8005ee2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8005ee6:	fb13 f301 	smulbb	r3, r3, r1
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	bd38      	pop	{r3, r4, r5, pc}
 8005eee:	bf00      	nop
 8005ef0:	200000d8 	.word	0x200000d8

08005ef4 <GUIPROP_GetFontInfo>:
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	800b      	strh	r3, [r1, #0]
 8005ef8:	4770      	bx	lr

08005efa <GUIPROP_IsInFont>:
 8005efa:	b508      	push	{r3, lr}
 8005efc:	69c0      	ldr	r0, [r0, #28]
 8005efe:	f7ff ff5b 	bl	8005db8 <GUIPROP__FindChar>
 8005f02:	3000      	adds	r0, #0
 8005f04:	bf18      	it	ne
 8005f06:	2001      	movne	r0, #1
 8005f08:	bd08      	pop	{r3, pc}

08005f0a <GUI_CalcColorDist>:
 8005f0a:	b2cb      	uxtb	r3, r1
 8005f0c:	b2c2      	uxtb	r2, r0
 8005f0e:	1ad2      	subs	r2, r2, r3
 8005f10:	b292      	uxth	r2, r2
 8005f12:	b510      	push	{r4, lr}
 8005f14:	b214      	sxth	r4, r2
 8005f16:	2c00      	cmp	r4, #0
 8005f18:	bfbc      	itt	lt
 8005f1a:	4252      	neglt	r2, r2
 8005f1c:	b214      	sxthlt	r4, r2
 8005f1e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005f22:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	0c09      	lsrs	r1, r1, #16
 8005f2c:	b21a      	sxth	r2, r3
 8005f2e:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8005f32:	2a00      	cmp	r2, #0
 8005f34:	b289      	uxth	r1, r1
 8005f36:	b208      	sxth	r0, r1
 8005f38:	bfbc      	itt	lt
 8005f3a:	425b      	neglt	r3, r3
 8005f3c:	b21a      	sxthlt	r2, r3
 8005f3e:	2800      	cmp	r0, #0
 8005f40:	bfb8      	it	lt
 8005f42:	4249      	neglt	r1, r1
 8005f44:	fb02 f202 	mul.w	r2, r2, r2
 8005f48:	bfb8      	it	lt
 8005f4a:	b208      	sxthlt	r0, r1
 8005f4c:	fb04 2404 	mla	r4, r4, r4, r2
 8005f50:	b280      	uxth	r0, r0
 8005f52:	fb00 4000 	mla	r0, r0, r0, r4
 8005f56:	bd10      	pop	{r4, pc}

08005f58 <GUI_GetClientRect>:
 8005f58:	b108      	cbz	r0, 8005f5e <GUI_GetClientRect+0x6>
 8005f5a:	f004 bc0d 	b.w	800a778 <WM_GetClientRect>
 8005f5e:	4770      	bx	lr

08005f60 <GUI_GetBkColor>:
 8005f60:	b508      	push	{r3, lr}
 8005f62:	f002 feaf 	bl	8008cc4 <LCD_GetBkColorIndex>
 8005f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f6a:	f002 bdb9 	b.w	8008ae0 <LCD_Index2Color>

08005f6e <GUI_GetColor>:
 8005f6e:	b508      	push	{r3, lr}
 8005f70:	f002 feb0 	bl	8008cd4 <LCD_GetColorIndex>
 8005f74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f78:	f002 bdb2 	b.w	8008ae0 <LCD_Index2Color>

08005f7c <GUI_GetOrg>:
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <GUI_GetOrg+0x14>)
 8005f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f82:	6003      	str	r3, [r0, #0]
 8005f84:	4b03      	ldr	r3, [pc, #12]	; (8005f94 <GUI_GetOrg+0x18>)
 8005f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f8a:	600b      	str	r3, [r1, #0]
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	20008990 	.word	0x20008990
 8005f94:	20008980 	.word	0x20008980

08005f98 <GUI_MergeRect>:
 8005f98:	b510      	push	{r4, lr}
 8005f9a:	b338      	cbz	r0, 8005fec <GUI_MergeRect+0x54>
 8005f9c:	b309      	cbz	r1, 8005fe2 <GUI_MergeRect+0x4a>
 8005f9e:	b30a      	cbz	r2, 8005fe4 <GUI_MergeRect+0x4c>
 8005fa0:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005fa4:	f9b1 4000 	ldrsh.w	r4, [r1]
 8005fa8:	42a3      	cmp	r3, r4
 8005faa:	bfa8      	it	ge
 8005fac:	4623      	movge	r3, r4
 8005fae:	8003      	strh	r3, [r0, #0]
 8005fb0:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8005fb4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8005fb8:	42a3      	cmp	r3, r4
 8005fba:	bfa8      	it	ge
 8005fbc:	4623      	movge	r3, r4
 8005fbe:	8043      	strh	r3, [r0, #2]
 8005fc0:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8005fc4:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8005fc8:	42a3      	cmp	r3, r4
 8005fca:	bfb8      	it	lt
 8005fcc:	4623      	movlt	r3, r4
 8005fce:	8083      	strh	r3, [r0, #4]
 8005fd0:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8005fd4:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bfb8      	it	lt
 8005fdc:	4613      	movlt	r3, r2
 8005fde:	80c3      	strh	r3, [r0, #6]
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	4611      	mov	r1, r2
 8005fe4:	680b      	ldr	r3, [r1, #0]
 8005fe6:	6003      	str	r3, [r0, #0]
 8005fe8:	684b      	ldr	r3, [r1, #4]
 8005fea:	6043      	str	r3, [r0, #4]
 8005fec:	bd10      	pop	{r4, pc}

08005fee <GUI_MoveRect>:
 8005fee:	b168      	cbz	r0, 800600c <GUI_MoveRect+0x1e>
 8005ff0:	8803      	ldrh	r3, [r0, #0]
 8005ff2:	b289      	uxth	r1, r1
 8005ff4:	440b      	add	r3, r1
 8005ff6:	8003      	strh	r3, [r0, #0]
 8005ff8:	8883      	ldrh	r3, [r0, #4]
 8005ffa:	4419      	add	r1, r3
 8005ffc:	8843      	ldrh	r3, [r0, #2]
 8005ffe:	8081      	strh	r1, [r0, #4]
 8006000:	b292      	uxth	r2, r2
 8006002:	4413      	add	r3, r2
 8006004:	8043      	strh	r3, [r0, #2]
 8006006:	88c3      	ldrh	r3, [r0, #6]
 8006008:	441a      	add	r2, r3
 800600a:	80c2      	strh	r2, [r0, #6]
 800600c:	4770      	bx	lr
	...

08006010 <GUI_Exec1>:
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <GUI_Exec1+0x34>)
 8006012:	b510      	push	{r4, lr}
 8006014:	681c      	ldr	r4, [r3, #0]
 8006016:	b11c      	cbz	r4, 8006020 <GUI_Exec1+0x10>
 8006018:	47a0      	blx	r4
 800601a:	1c04      	adds	r4, r0, #0
 800601c:	bf18      	it	ne
 800601e:	2401      	movne	r4, #1
 8006020:	f004 f95c 	bl	800a2dc <WM_Exec>
 8006024:	4b08      	ldr	r3, [pc, #32]	; (8006048 <GUI_Exec1+0x38>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2800      	cmp	r0, #0
 800602a:	bf18      	it	ne
 800602c:	2401      	movne	r4, #1
 800602e:	b11b      	cbz	r3, 8006038 <GUI_Exec1+0x28>
 8006030:	4798      	blx	r3
 8006032:	2800      	cmp	r0, #0
 8006034:	bf18      	it	ne
 8006036:	2401      	movne	r4, #1
 8006038:	4b04      	ldr	r3, [pc, #16]	; (800604c <GUI_Exec1+0x3c>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b103      	cbz	r3, 8006040 <GUI_Exec1+0x30>
 800603e:	4798      	blx	r3
 8006040:	4620      	mov	r0, r4
 8006042:	bd10      	pop	{r4, pc}
 8006044:	2000898c 	.word	0x2000898c
 8006048:	200089b4 	.word	0x200089b4
 800604c:	200089ac 	.word	0x200089ac

08006050 <GUI_Exec>:
 8006050:	b510      	push	{r4, lr}
 8006052:	2400      	movs	r4, #0
 8006054:	f7ff ffdc 	bl	8006010 <GUI_Exec1>
 8006058:	b908      	cbnz	r0, 800605e <GUI_Exec+0xe>
 800605a:	4620      	mov	r0, r4
 800605c:	bd10      	pop	{r4, pc}
 800605e:	2401      	movs	r4, #1
 8006060:	e7f8      	b.n	8006054 <GUI_Exec+0x4>
	...

08006064 <GUI_GotoXY>:
 8006064:	4b02      	ldr	r3, [pc, #8]	; (8006070 <GUI_GotoXY+0xc>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	8458      	strh	r0, [r3, #34]	; 0x22
 800606a:	8499      	strh	r1, [r3, #36]	; 0x24
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr
 8006070:	200000d8 	.word	0x200000d8

08006074 <GUI_SetPenSize>:
 8006074:	4b02      	ldr	r3, [pc, #8]	; (8006080 <GUI_SetPenSize+0xc>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	7e1a      	ldrb	r2, [r3, #24]
 800607a:	7618      	strb	r0, [r3, #24]
 800607c:	4610      	mov	r0, r2
 800607e:	4770      	bx	lr
 8006080:	200000d8 	.word	0x200000d8

08006084 <GUI_RectsIntersect>:
 8006084:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006088:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 800608c:	429a      	cmp	r2, r3
 800608e:	dc14      	bgt.n	80060ba <GUI_RectsIntersect+0x36>
 8006090:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 8006094:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8006098:	429a      	cmp	r2, r3
 800609a:	dc0e      	bgt.n	80060ba <GUI_RectsIntersect+0x36>
 800609c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80060a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	dc08      	bgt.n	80060ba <GUI_RectsIntersect+0x36>
 80060a8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80060ac:	f9b1 3000 	ldrsh.w	r3, [r1]
 80060b0:	4283      	cmp	r3, r0
 80060b2:	bfcc      	ite	gt
 80060b4:	2000      	movgt	r0, #0
 80060b6:	2001      	movle	r0, #1
 80060b8:	4770      	bx	lr
 80060ba:	2000      	movs	r0, #0
 80060bc:	4770      	bx	lr
	...

080060c0 <GUI_SaveContext_W>:
 80060c0:	b508      	push	{r3, lr}
 80060c2:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <GUI_SaveContext_W+0x10>)
 80060c4:	226c      	movs	r2, #108	; 0x6c
 80060c6:	6819      	ldr	r1, [r3, #0]
 80060c8:	f008 fa30 	bl	800e52c <memcpy>
 80060cc:	bd08      	pop	{r3, pc}
 80060ce:	bf00      	nop
 80060d0:	200000d8 	.word	0x200000d8

080060d4 <GUI_RestoreContext>:
 80060d4:	b508      	push	{r3, lr}
 80060d6:	4b03      	ldr	r3, [pc, #12]	; (80060e4 <GUI_RestoreContext+0x10>)
 80060d8:	4601      	mov	r1, r0
 80060da:	226c      	movs	r2, #108	; 0x6c
 80060dc:	6818      	ldr	r0, [r3, #0]
 80060de:	f008 fa25 	bl	800e52c <memcpy>
 80060e2:	bd08      	pop	{r3, pc}
 80060e4:	200000d8 	.word	0x200000d8

080060e8 <GUI_SelectLCD>:
 80060e8:	b508      	push	{r3, lr}
 80060ea:	f002 fee7 	bl	8008ebc <LCD_SelectLCD>
 80060ee:	f002 ff4d 	bl	8008f8c <LCD_UpdateColorIndices>
 80060f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80060f6:	f004 b929 	b.w	800a34c <WM_Activate>

080060fa <GUI_SetBkColor>:
 80060fa:	f002 bd37 	b.w	8008b6c <LCD_SetBkColor>

080060fe <GUI_SetColor>:
 80060fe:	f002 bd3b 	b.w	8008b78 <LCD_SetColor>

08006102 <GUI_SetDrawMode>:
 8006102:	f002 b9db 	b.w	80084bc <LCD_SetDrawMode>
	...

08006108 <GUI_SetFont>:
 8006108:	4b03      	ldr	r3, [pc, #12]	; (8006118 <GUI_SetFont+0x10>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	b100      	cbz	r0, 8006112 <GUI_SetFont+0xa>
 8006110:	61d8      	str	r0, [r3, #28]
 8006112:	4610      	mov	r0, r2
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	200000d8 	.word	0x200000d8

0800611c <GUI_SetLineStyle>:
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <GUI_SetLineStyle+0xc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	7e9a      	ldrb	r2, [r3, #26]
 8006122:	7698      	strb	r0, [r3, #26]
 8006124:	4610      	mov	r0, r2
 8006126:	4770      	bx	lr
 8006128:	200000d8 	.word	0x200000d8

0800612c <GUI_SetOrg>:
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <GUI_SetOrg+0x28>)
 800612e:	b410      	push	{r4}
 8006130:	8018      	strh	r0, [r3, #0]
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <GUI_SetOrg+0x2c>)
 8006134:	8019      	strh	r1, [r3, #0]
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <GUI_SetOrg+0x30>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	460a      	mov	r2, r1
 800613c:	7c59      	ldrb	r1, [r3, #17]
 800613e:	4b08      	ldr	r3, [pc, #32]	; (8006160 <GUI_SetOrg+0x34>)
 8006140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006144:	68d9      	ldr	r1, [r3, #12]
 8006146:	6a0c      	ldr	r4, [r1, #32]
 8006148:	4601      	mov	r1, r0
 800614a:	4618      	mov	r0, r3
 800614c:	4623      	mov	r3, r4
 800614e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006152:	4718      	bx	r3
 8006154:	20008990 	.word	0x20008990
 8006158:	20008980 	.word	0x20008980
 800615c:	200000d8 	.word	0x200000d8
 8006160:	200089b8 	.word	0x200089b8

08006164 <GUI_SetTextAlign>:
 8006164:	4b03      	ldr	r3, [pc, #12]	; (8006174 <GUI_SetTextAlign+0x10>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 800616c:	8598      	strh	r0, [r3, #44]	; 0x2c
 800616e:	4610      	mov	r0, r2
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	200000d8 	.word	0x200000d8

08006178 <GUI_SetTextMode>:
 8006178:	4b03      	ldr	r3, [pc, #12]	; (8006188 <GUI_SetTextMode+0x10>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 8006180:	8558      	strh	r0, [r3, #42]	; 0x2a
 8006182:	4610      	mov	r0, r2
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop
 8006188:	200000d8 	.word	0x200000d8

0800618c <GL_SetDefault>:
 800618c:	b508      	push	{r3, lr}
 800618e:	4b0e      	ldr	r3, [pc, #56]	; (80061c8 <GL_SetDefault+0x3c>)
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f002 fceb 	bl	8008b6c <LCD_SetBkColor>
 8006196:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <GL_SetDefault+0x40>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f002 fced 	bl	8008b78 <LCD_SetColor>
 800619e:	2001      	movs	r0, #1
 80061a0:	f7ff ff68 	bl	8006074 <GUI_SetPenSize>
 80061a4:	2000      	movs	r0, #0
 80061a6:	f7ff ffdd 	bl	8006164 <GUI_SetTextAlign>
 80061aa:	2000      	movs	r0, #0
 80061ac:	f7ff ffe4 	bl	8006178 <GUI_SetTextMode>
 80061b0:	2000      	movs	r0, #0
 80061b2:	f7ff ffa6 	bl	8006102 <GUI_SetDrawMode>
 80061b6:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <GL_SetDefault+0x44>)
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	f7ff ffa5 	bl	8006108 <GUI_SetFont>
 80061be:	2000      	movs	r0, #0
 80061c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80061c4:	f7ff bfaa 	b.w	800611c <GUI_SetLineStyle>
 80061c8:	200000e0 	.word	0x200000e0
 80061cc:	200000e4 	.word	0x200000e4
 80061d0:	200000e8 	.word	0x200000e8

080061d4 <_OnExit>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	4d0c      	ldr	r5, [pc, #48]	; (8006208 <_OnExit+0x34>)
 80061d8:	4e0c      	ldr	r6, [pc, #48]	; (800620c <_OnExit+0x38>)
 80061da:	2400      	movs	r4, #0
 80061dc:	f845 4b04 	str.w	r4, [r5], #4
 80061e0:	6833      	ldr	r3, [r6, #0]
 80061e2:	226c      	movs	r2, #108	; 0x6c
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	4798      	blx	r3
 80061ea:	6833      	ldr	r3, [r6, #0]
 80061ec:	4808      	ldr	r0, [pc, #32]	; (8006210 <_OnExit+0x3c>)
 80061ee:	2204      	movs	r2, #4
 80061f0:	4621      	mov	r1, r4
 80061f2:	4798      	blx	r3
 80061f4:	4b07      	ldr	r3, [pc, #28]	; (8006214 <_OnExit+0x40>)
 80061f6:	601d      	str	r5, [r3, #0]
 80061f8:	4b07      	ldr	r3, [pc, #28]	; (8006218 <_OnExit+0x44>)
 80061fa:	701c      	strb	r4, [r3, #0]
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <_OnExit+0x48>)
 80061fe:	601c      	str	r4, [r3, #0]
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <_OnExit+0x4c>)
 8006202:	601c      	str	r4, [r3, #0]
 8006204:	bd70      	pop	{r4, r5, r6, pc}
 8006206:	bf00      	nop
 8006208:	200001cc 	.word	0x200001cc
 800620c:	200000d4 	.word	0x200000d4
 8006210:	200089b8 	.word	0x200089b8
 8006214:	200000d8 	.word	0x200000d8
 8006218:	200089a0 	.word	0x200089a0
 800621c:	2000897c 	.word	0x2000897c
 8006220:	200089ac 	.word	0x200089ac

08006224 <GUI_SetDefaultFont>:
 8006224:	4b01      	ldr	r3, [pc, #4]	; (800622c <GUI_SetDefaultFont+0x8>)
 8006226:	6118      	str	r0, [r3, #16]
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	200000d8 	.word	0x200000d8

08006230 <GUI_ClearRect>:
 8006230:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006234:	4606      	mov	r6, r0
 8006236:	2004      	movs	r0, #4
 8006238:	4699      	mov	r9, r3
 800623a:	460f      	mov	r7, r1
 800623c:	4692      	mov	sl, r2
 800623e:	f002 f93d 	bl	80084bc <LCD_SetDrawMode>
 8006242:	4b12      	ldr	r3, [pc, #72]	; (800628c <GUI_ClearRect+0x5c>)
 8006244:	4680      	mov	r8, r0
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800624a:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800624c:	4426      	add	r6, r4
 800624e:	442f      	add	r7, r5
 8006250:	4454      	add	r4, sl
 8006252:	444d      	add	r5, r9
 8006254:	4668      	mov	r0, sp
 8006256:	f8ad 6000 	strh.w	r6, [sp]
 800625a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800625e:	f8ad 7002 	strh.w	r7, [sp, #2]
 8006262:	f8ad 5006 	strh.w	r5, [sp, #6]
 8006266:	f003 fecb 	bl	800a000 <WM__InitIVRSearch>
 800626a:	b928      	cbnz	r0, 8006278 <GUI_ClearRect+0x48>
 800626c:	4640      	mov	r0, r8
 800626e:	f002 f925 	bl	80084bc <LCD_SetDrawMode>
 8006272:	b002      	add	sp, #8
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	462b      	mov	r3, r5
 800627a:	4622      	mov	r2, r4
 800627c:	4639      	mov	r1, r7
 800627e:	4630      	mov	r0, r6
 8006280:	f002 f9a6 	bl	80085d0 <LCD_FillRect>
 8006284:	f003 fe02 	bl	8009e8c <WM__GetNextIVR>
 8006288:	e7ef      	b.n	800626a <GUI_ClearRect+0x3a>
 800628a:	bf00      	nop
 800628c:	200000d8 	.word	0x200000d8

08006290 <GUI_Clear>:
 8006290:	b510      	push	{r4, lr}
 8006292:	2100      	movs	r1, #0
 8006294:	4608      	mov	r0, r1
 8006296:	f7ff fee5 	bl	8006064 <GUI_GotoXY>
 800629a:	4904      	ldr	r1, [pc, #16]	; (80062ac <GUI_Clear+0x1c>)
 800629c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80062a0:	461a      	mov	r2, r3
 80062a2:	4608      	mov	r0, r1
 80062a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062a8:	f7ff bfc2 	b.w	8006230 <GUI_ClearRect>
 80062ac:	ffffc001 	.word	0xffffc001

080062b0 <GUI__RegisterExit>:
 80062b0:	4b02      	ldr	r3, [pc, #8]	; (80062bc <GUI__RegisterExit+0xc>)
 80062b2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80062b4:	6042      	str	r2, [r0, #4]
 80062b6:	6758      	str	r0, [r3, #116]	; 0x74
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	200001cc 	.word	0x200001cc

080062c0 <GUI__Config>:
 80062c0:	b510      	push	{r4, lr}
 80062c2:	4c09      	ldr	r4, [pc, #36]	; (80062e8 <GUI__Config+0x28>)
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	b96b      	cbnz	r3, 80062e4 <GUI__Config+0x24>
 80062c8:	2301      	movs	r3, #1
 80062ca:	6023      	str	r3, [r4, #0]
 80062cc:	f7fa f912 	bl	80004f4 <GUI_X_Config>
 80062d0:	f7fa f954 	bl	800057c <LCD_X_Config>
 80062d4:	4620      	mov	r0, r4
 80062d6:	4b05      	ldr	r3, [pc, #20]	; (80062ec <GUI__Config+0x2c>)
 80062d8:	f840 3f78 	str.w	r3, [r0, #120]!
 80062dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e0:	f7ff bfe6 	b.w	80062b0 <GUI__RegisterExit>
 80062e4:	bd10      	pop	{r4, pc}
 80062e6:	bf00      	nop
 80062e8:	200001cc 	.word	0x200001cc
 80062ec:	080061d5 	.word	0x080061d5

080062f0 <GUI_Init>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	f7ff ffe5 	bl	80062c0 <GUI__Config>
 80062f6:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <GUI_Init+0xc4>)
 80062f8:	4c2f      	ldr	r4, [pc, #188]	; (80063b8 <GUI_Init+0xc8>)
 80062fa:	4d30      	ldr	r5, [pc, #192]	; (80063bc <GUI_Init+0xcc>)
 80062fc:	222e      	movs	r2, #46	; 0x2e
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	f7fa f92e 	bl	8000560 <GUI_X_Init>
 8006304:	4b2e      	ldr	r3, [pc, #184]	; (80063c0 <GUI_Init+0xd0>)
 8006306:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	1d1a      	adds	r2, r3, #4
 800630c:	63da      	str	r2, [r3, #60]	; 0x3c
 800630e:	f103 0208 	add.w	r2, r3, #8
 8006312:	61a2      	str	r2, [r4, #24]
 8006314:	7c5a      	ldrb	r2, [r3, #17]
 8006316:	639b      	str	r3, [r3, #56]	; 0x38
 8006318:	4b2a      	ldr	r3, [pc, #168]	; (80063c4 <GUI_Init+0xd4>)
 800631a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800631e:	68c3      	ldr	r3, [r0, #12]
 8006320:	f104 010c 	add.w	r1, r4, #12
 8006324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006326:	4798      	blx	r3
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <GUI_Init+0xd8>)
 800632a:	6623      	str	r3, [r4, #96]	; 0x60
 800632c:	692b      	ldr	r3, [r5, #16]
 800632e:	6223      	str	r3, [r4, #32]
 8006330:	682b      	ldr	r3, [r5, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	61a3      	str	r3, [r4, #24]
 8006336:	2301      	movs	r3, #1
 8006338:	7723      	strb	r3, [r4, #28]
 800633a:	77e3      	strb	r3, [r4, #31]
 800633c:	f004 fa2a 	bl	800a794 <WM_GetDesktopWindow>
 8006340:	2303      	movs	r3, #3
 8006342:	64a0      	str	r0, [r4, #72]	; 0x48
 8006344:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8006348:	68a8      	ldr	r0, [r5, #8]
 800634a:	4b20      	ldr	r3, [pc, #128]	; (80063cc <GUI_Init+0xdc>)
 800634c:	6363      	str	r3, [r4, #52]	; 0x34
 800634e:	63a3      	str	r3, [r4, #56]	; 0x38
 8006350:	f002 fc0c 	bl	8008b6c <LCD_SetBkColor>
 8006354:	68e8      	ldr	r0, [r5, #12]
 8006356:	f002 fc0f 	bl	8008b78 <LCD_SetColor>
 800635a:	4b1d      	ldr	r3, [pc, #116]	; (80063d0 <GUI_Init+0xe0>)
 800635c:	4a1d      	ldr	r2, [pc, #116]	; (80063d4 <GUI_Init+0xe4>)
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	f002 fb66 	bl	8008a30 <LCD_Init>
 8006364:	4605      	mov	r5, r0
 8006366:	f002 fd3f 	bl	8008de8 <LCD_GetXSizeDisplay>
 800636a:	4606      	mov	r6, r0
 800636c:	f002 fd42 	bl	8008df4 <LCD_GetYSizeDisplay>
 8006370:	b106      	cbz	r6, 8006374 <GUI_Init+0x84>
 8006372:	b940      	cbnz	r0, 8006386 <GUI_Init+0x96>
 8006374:	f002 fd28 	bl	8008dc8 <LCD_GetXSizeMax>
 8006378:	4606      	mov	r6, r0
 800637a:	f002 fd28 	bl	8008dce <LCD_GetYSizeMax>
 800637e:	4601      	mov	r1, r0
 8006380:	4630      	mov	r0, r6
 8006382:	f002 fd2b 	bl	8008ddc <LCD_SetDisplaySize>
 8006386:	2100      	movs	r1, #0
 8006388:	4608      	mov	r0, r1
 800638a:	f7ff fecf 	bl	800612c <GUI_SetOrg>
 800638e:	f004 f839 	bl	800a404 <WM_Init>
 8006392:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006394:	b953      	cbnz	r3, 80063ac <GUI_Init+0xbc>
 8006396:	4b10      	ldr	r3, [pc, #64]	; (80063d8 <GUI_Init+0xe8>)
 8006398:	2201      	movs	r2, #1
 800639a:	701a      	strb	r2, [r3, #0]
 800639c:	4628      	mov	r0, r5
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <GUI_Init+0xb6>
 80063a4:	4798      	blx	r3
 80063a6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	6723      	str	r3, [r4, #112]	; 0x70
 80063ac:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f6      	bne.n	80063a0 <GUI_Init+0xb0>
 80063b2:	e7f0      	b.n	8006396 <GUI_Init+0xa6>
 80063b4:	20008971 	.word	0x20008971
 80063b8:	200001cc 	.word	0x200001cc
 80063bc:	200000d8 	.word	0x200000d8
 80063c0:	08010ec4 	.word	0x08010ec4
 80063c4:	200089b8 	.word	0x200089b8
 80063c8:	08010ba4 	.word	0x08010ba4
 80063cc:	12345678 	.word	0x12345678
 80063d0:	200089b0 	.word	0x200089b0
 80063d4:	08010bf0 	.word	0x08010bf0
 80063d8:	20008998 	.word	0x20008998

080063dc <GUI_DEVICE__GetpDriver>:
 80063dc:	2800      	cmp	r0, #0
 80063de:	dc09      	bgt.n	80063f4 <GUI_DEVICE__GetpDriver+0x18>
 80063e0:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <GUI_DEVICE__GetpDriver+0x1c>)
 80063e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80063e6:	b900      	cbnz	r0, 80063ea <GUI_DEVICE__GetpDriver+0xe>
 80063e8:	4770      	bx	lr
 80063ea:	68c3      	ldr	r3, [r0, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b113      	cbz	r3, 80063f6 <GUI_DEVICE__GetpDriver+0x1a>
 80063f0:	6800      	ldr	r0, [r0, #0]
 80063f2:	e7f8      	b.n	80063e6 <GUI_DEVICE__GetpDriver+0xa>
 80063f4:	2000      	movs	r0, #0
 80063f6:	4770      	bx	lr
 80063f8:	200089b8 	.word	0x200089b8

080063fc <GUI_DEVICE_Delete>:
 80063fc:	f7ff b9d2 	b.w	80057a4 <GUI_ALLOC_FreeFixedBlock>

08006400 <GUI_DEVICE_Create>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	1e1c      	subs	r4, r3, #0
 8006404:	4606      	mov	r6, r0
 8006406:	460d      	mov	r5, r1
 8006408:	4617      	mov	r7, r2
 800640a:	dd01      	ble.n	8006410 <GUI_DEVICE_Create+0x10>
 800640c:	2000      	movs	r0, #0
 800640e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006410:	201c      	movs	r0, #28
 8006412:	f7ff faad 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 8006416:	2800      	cmp	r0, #0
 8006418:	d0f8      	beq.n	800640c <GUI_DEVICE_Create+0xc>
 800641a:	b145      	cbz	r5, 800642e <GUI_DEVICE_Create+0x2e>
 800641c:	6105      	str	r5, [r0, #16]
 800641e:	2300      	movs	r3, #0
 8006420:	6083      	str	r3, [r0, #8]
 8006422:	6184      	str	r4, [r0, #24]
 8006424:	8287      	strh	r7, [r0, #20]
 8006426:	60c6      	str	r6, [r0, #12]
 8006428:	6003      	str	r3, [r0, #0]
 800642a:	6043      	str	r3, [r0, #4]
 800642c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <GUI_DEVICE_Create+0x48>)
 8006430:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 8006434:	2900      	cmp	r1, #0
 8006436:	d0f2      	beq.n	800641e <GUI_DEVICE_Create+0x1e>
 8006438:	680b      	ldr	r3, [r1, #0]
 800643a:	b913      	cbnz	r3, 8006442 <GUI_DEVICE_Create+0x42>
 800643c:	690b      	ldr	r3, [r1, #16]
 800643e:	6103      	str	r3, [r0, #16]
 8006440:	e7ed      	b.n	800641e <GUI_DEVICE_Create+0x1e>
 8006442:	4619      	mov	r1, r3
 8006444:	e7f8      	b.n	8006438 <GUI_DEVICE_Create+0x38>
 8006446:	bf00      	nop
 8006448:	200089b8 	.word	0x200089b8

0800644c <GUI_DEVICE_Unlink>:
 800644c:	6981      	ldr	r1, [r0, #24]
 800644e:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <GUI_DEVICE_Unlink+0x2c>)
 8006450:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006454:	4298      	cmp	r0, r3
 8006456:	6803      	ldr	r3, [r0, #0]
 8006458:	d104      	bne.n	8006464 <GUI_DEVICE_Unlink+0x18>
 800645a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800645e:	b10b      	cbz	r3, 8006464 <GUI_DEVICE_Unlink+0x18>
 8006460:	2200      	movs	r2, #0
 8006462:	605a      	str	r2, [r3, #4]
 8006464:	6842      	ldr	r2, [r0, #4]
 8006466:	b102      	cbz	r2, 800646a <GUI_DEVICE_Unlink+0x1e>
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	6803      	ldr	r3, [r0, #0]
 800646c:	b103      	cbz	r3, 8006470 <GUI_DEVICE_Unlink+0x24>
 800646e:	605a      	str	r2, [r3, #4]
 8006470:	2300      	movs	r3, #0
 8006472:	6003      	str	r3, [r0, #0]
 8006474:	6043      	str	r3, [r0, #4]
 8006476:	4770      	bx	lr
 8006478:	200089b8 	.word	0x200089b8

0800647c <GUI_DEVICE_Link>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	b908      	cbnz	r0, 8006484 <GUI_DEVICE_Link+0x8>
 8006480:	2001      	movs	r0, #1
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	6982      	ldr	r2, [r0, #24]
 8006486:	2a00      	cmp	r2, #0
 8006488:	dcfa      	bgt.n	8006480 <GUI_DEVICE_Link+0x4>
 800648a:	4b1c      	ldr	r3, [pc, #112]	; (80064fc <GUI_DEVICE_Link+0x80>)
 800648c:	7819      	ldrb	r1, [r3, #0]
 800648e:	428a      	cmp	r2, r1
 8006490:	bfa4      	itt	ge
 8006492:	2101      	movge	r1, #1
 8006494:	7019      	strbge	r1, [r3, #0]
 8006496:	491a      	ldr	r1, [pc, #104]	; (8006500 <GUI_DEVICE_Link+0x84>)
 8006498:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 800649c:	460d      	mov	r5, r1
 800649e:	b923      	cbnz	r3, 80064aa <GUI_DEVICE_Link+0x2e>
 80064a0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 80064a4:	2000      	movs	r0, #0
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	460b      	mov	r3, r1
 80064aa:	6859      	ldr	r1, [r3, #4]
 80064ac:	2900      	cmp	r1, #0
 80064ae:	d1fb      	bne.n	80064a8 <GUI_DEVICE_Link+0x2c>
 80064b0:	68c1      	ldr	r1, [r0, #12]
 80064b2:	6809      	ldr	r1, [r1, #0]
 80064b4:	68dc      	ldr	r4, [r3, #12]
 80064b6:	6824      	ldr	r4, [r4, #0]
 80064b8:	428c      	cmp	r4, r1
 80064ba:	dd15      	ble.n	80064e8 <GUI_DEVICE_Link+0x6c>
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1f8      	bne.n	80064b4 <GUI_DEVICE_Link+0x38>
 80064c2:	e7dd      	b.n	8006480 <GUI_DEVICE_Link+0x4>
 80064c4:	68de      	ldr	r6, [r3, #12]
 80064c6:	6836      	ldr	r6, [r6, #0]
 80064c8:	42b1      	cmp	r1, r6
 80064ca:	461c      	mov	r4, r3
 80064cc:	dd11      	ble.n	80064f2 <GUI_DEVICE_Link+0x76>
 80064ce:	6859      	ldr	r1, [r3, #4]
 80064d0:	b911      	cbnz	r1, 80064d8 <GUI_DEVICE_Link+0x5c>
 80064d2:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
 80064d6:	e001      	b.n	80064dc <GUI_DEVICE_Link+0x60>
 80064d8:	6008      	str	r0, [r1, #0]
 80064da:	6041      	str	r1, [r0, #4]
 80064dc:	6058      	str	r0, [r3, #4]
 80064de:	4298      	cmp	r0, r3
 80064e0:	bf08      	it	eq
 80064e2:	2300      	moveq	r3, #0
 80064e4:	6003      	str	r3, [r0, #0]
 80064e6:	e7dd      	b.n	80064a4 <GUI_DEVICE_Link+0x28>
 80064e8:	d1f1      	bne.n	80064ce <GUI_DEVICE_Link+0x52>
 80064ea:	8a84      	ldrh	r4, [r0, #20]
 80064ec:	2c01      	cmp	r4, #1
 80064ee:	d1ee      	bne.n	80064ce <GUI_DEVICE_Link+0x52>
 80064f0:	461c      	mov	r4, r3
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <GUI_DEVICE_Link+0x48>
 80064f8:	4623      	mov	r3, r4
 80064fa:	e7e8      	b.n	80064ce <GUI_DEVICE_Link+0x52>
 80064fc:	20008969 	.word	0x20008969
 8006500:	200089b8 	.word	0x200089b8

08006504 <GUI_DEVICE_CreateAndLink>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	461d      	mov	r5, r3
 8006508:	f7ff ff7a 	bl	8006400 <GUI_DEVICE_Create>
 800650c:	4604      	mov	r4, r0
 800650e:	b148      	cbz	r0, 8006524 <GUI_DEVICE_CreateAndLink+0x20>
 8006510:	f7ff ffb4 	bl	800647c <GUI_DEVICE_Link>
 8006514:	68e3      	ldr	r3, [r4, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	b923      	cbnz	r3, 8006524 <GUI_DEVICE_CreateAndLink+0x20>
 800651a:	4b03      	ldr	r3, [pc, #12]	; (8006528 <GUI_DEVICE_CreateAndLink+0x24>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8006522:	655c      	str	r4, [r3, #84]	; 0x54
 8006524:	4620      	mov	r0, r4
 8006526:	bd38      	pop	{r3, r4, r5, pc}
 8006528:	200000d8 	.word	0x200000d8

0800652c <GUI_DispString>:
 800652c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	4605      	mov	r5, r0
 8006532:	2800      	cmp	r0, #0
 8006534:	d06b      	beq.n	800660e <GUI_DispString+0xe2>
 8006536:	4c3d      	ldr	r4, [pc, #244]	; (800662c <GUI_DispString+0x100>)
 8006538:	f7ff fb5e 	bl	8005bf8 <GUI_GetFontDistY>
 800653c:	6823      	ldr	r3, [r4, #0]
 800653e:	4606      	mov	r6, r0
 8006540:	f9b3 8022 	ldrsh.w	r8, [r3, #34]	; 0x22
 8006544:	f7ff fb40 	bl	8005bc8 <GUI_GetYAdjust>
 8006548:	6822      	ldr	r2, [r4, #0]
 800654a:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 800654c:	b287      	uxth	r7, r0
 800654e:	1bdb      	subs	r3, r3, r7
 8006550:	8493      	strh	r3, [r2, #36]	; 0x24
 8006552:	b2b6      	uxth	r6, r6
 8006554:	782b      	ldrb	r3, [r5, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d051      	beq.n	80065fe <GUI_DispString+0xd2>
 800655a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800655e:	4628      	mov	r0, r5
 8006560:	f004 fedc 	bl	800b31c <GUI__GetLineNumChars>
 8006564:	4601      	mov	r1, r0
 8006566:	4681      	mov	r9, r0
 8006568:	4628      	mov	r0, r5
 800656a:	f004 ff03 	bl	800b374 <GUI__GetLineDistX>
 800656e:	6822      	ldr	r2, [r4, #0]
 8006570:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b01      	cmp	r3, #1
 8006578:	d04c      	beq.n	8006614 <GUI_DispString+0xe8>
 800657a:	2b02      	cmp	r3, #2
 800657c:	bf14      	ite	ne
 800657e:	2300      	movne	r3, #0
 8006580:	fb90 f3f3 	sdiveq	r3, r0, r3
 8006584:	8c51      	ldrh	r1, [r2, #34]	; 0x22
 8006586:	1acb      	subs	r3, r1, r3
 8006588:	b29b      	uxth	r3, r3
 800658a:	b219      	sxth	r1, r3
 800658c:	fa1f fa80 	uxth.w	sl, r0
 8006590:	8451      	strh	r1, [r2, #34]	; 0x22
 8006592:	f8ad 1000 	strh.w	r1, [sp]
 8006596:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
 800659a:	440b      	add	r3, r1
 800659c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80065a0:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 80065a4:	f8ad 3002 	strh.w	r3, [sp, #2]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	4433      	add	r3, r6
 80065ac:	466a      	mov	r2, sp
 80065ae:	4649      	mov	r1, r9
 80065b0:	4628      	mov	r0, r5
 80065b2:	f8ad 3006 	strh.w	r3, [sp, #6]
 80065b6:	f004 ff0d 	bl	800b3d4 <GUI__DispLine>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80065c0:	849a      	strh	r2, [r3, #36]	; 0x24
 80065c2:	4649      	mov	r1, r9
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 fea9 	bl	800731c <GUI_UC__NumChars2NumBytes>
 80065ca:	5c2b      	ldrb	r3, [r5, r0]
 80065cc:	2b0a      	cmp	r3, #10
 80065ce:	eb05 0100 	add.w	r1, r5, r0
 80065d2:	d001      	beq.n	80065d8 <GUI_DispString+0xac>
 80065d4:	2b0d      	cmp	r3, #13
 80065d6:	d11f      	bne.n	8006618 <GUI_DispString+0xec>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80065dc:	f002 0203 	and.w	r2, r2, #3
 80065e0:	3a01      	subs	r2, #1
 80065e2:	2a01      	cmp	r2, #1
 80065e4:	bf8a      	itet	hi
 80065e6:	8c1a      	ldrhhi	r2, [r3, #32]
 80065e8:	f8a3 8022 	strhls.w	r8, [r3, #34]	; 0x22
 80065ec:	845a      	strhhi	r2, [r3, #34]	; 0x22
 80065ee:	780a      	ldrb	r2, [r1, #0]
 80065f0:	2a0a      	cmp	r2, #10
 80065f2:	d102      	bne.n	80065fa <GUI_DispString+0xce>
 80065f4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 80065f6:	4432      	add	r2, r6
 80065f8:	849a      	strh	r2, [r3, #36]	; 0x24
 80065fa:	780b      	ldrb	r3, [r1, #0]
 80065fc:	b99b      	cbnz	r3, 8006626 <GUI_DispString+0xfa>
 80065fe:	6823      	ldr	r3, [r4, #0]
 8006600:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8006602:	4417      	add	r7, r2
 8006604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006606:	849f      	strh	r7, [r3, #36]	; 0x24
 8006608:	f022 0203 	bic.w	r2, r2, #3
 800660c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800660e:	b002      	add	sp, #8
 8006610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006614:	4603      	mov	r3, r0
 8006616:	e7b5      	b.n	8006584 <GUI_DispString+0x58>
 8006618:	f8bd 0000 	ldrh.w	r0, [sp]
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	4482      	add	sl, r0
 8006620:	f8a3 a022 	strh.w	sl, [r3, #34]	; 0x22
 8006624:	e7e9      	b.n	80065fa <GUI_DispString+0xce>
 8006626:	1c4d      	adds	r5, r1, #1
 8006628:	e794      	b.n	8006554 <GUI_DispString+0x28>
 800662a:	bf00      	nop
 800662c:	200000d8 	.word	0x200000d8

08006630 <GUI_DispStringAt>:
 8006630:	4b02      	ldr	r3, [pc, #8]	; (800663c <GUI_DispStringAt+0xc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	8459      	strh	r1, [r3, #34]	; 0x22
 8006636:	849a      	strh	r2, [r3, #36]	; 0x24
 8006638:	f7ff bf78 	b.w	800652c <GUI_DispString>
 800663c:	200000d8 	.word	0x200000d8

08006640 <GUI_DispStringHCenterAt>:
 8006640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <GUI_DispStringHCenterAt+0x30>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4605      	mov	r5, r0
 8006648:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 800664c:	f040 0002 	orr.w	r0, r0, #2
 8006650:	460e      	mov	r6, r1
 8006652:	4617      	mov	r7, r2
 8006654:	f7ff fd86 	bl	8006164 <GUI_SetTextAlign>
 8006658:	463a      	mov	r2, r7
 800665a:	4604      	mov	r4, r0
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff ffe6 	bl	8006630 <GUI_DispStringAt>
 8006664:	4620      	mov	r0, r4
 8006666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800666a:	f7ff bd7b 	b.w	8006164 <GUI_SetTextAlign>
 800666e:	bf00      	nop
 8006670:	200000d8 	.word	0x200000d8

08006674 <GUI__DispStringInRect>:
 8006674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006678:	b087      	sub	sp, #28
 800667a:	461f      	mov	r7, r3
 800667c:	2300      	movs	r3, #0
 800667e:	9001      	str	r0, [sp, #4]
 8006680:	460c      	mov	r4, r1
 8006682:	4616      	mov	r6, r2
 8006684:	9302      	str	r3, [sp, #8]
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	f7ff fab6 	bl	8005bf8 <GUI_GetFontDistY>
 800668c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006690:	4682      	mov	sl, r0
 8006692:	b334      	cbz	r4, 80066e2 <GUI__DispStringInRect+0x6e>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	6861      	ldr	r1, [r4, #4]
 8006698:	ab04      	add	r3, sp, #16
 800669a:	c303      	stmia	r3!, {r0, r1}
 800669c:	f016 080c 	ands.w	r8, r6, #12
 80066a0:	d123      	bne.n	80066ea <GUI__DispStringInRect+0x76>
 80066a2:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
 80066a6:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 8006864 <GUI__DispStringInRect+0x1f0>
 80066aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80066ae:	2400      	movs	r4, #0
 80066b0:	f006 0603 	and.w	r6, r6, #3
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	f000 80b1 	beq.w	800681c <GUI__DispStringInRect+0x1a8>
 80066ba:	4639      	mov	r1, r7
 80066bc:	9801      	ldr	r0, [sp, #4]
 80066be:	f004 fe2d 	bl	800b31c <GUI__GetLineNumChars>
 80066c2:	4601      	mov	r1, r0
 80066c4:	4680      	mov	r8, r0
 80066c6:	1a3f      	subs	r7, r7, r0
 80066c8:	9801      	ldr	r0, [sp, #4]
 80066ca:	f004 fe53 	bl	800b374 <GUI__GetLineDistX>
 80066ce:	2e01      	cmp	r6, #1
 80066d0:	f000 80aa 	beq.w	8006828 <GUI__DispStringInRect+0x1b4>
 80066d4:	2e02      	cmp	r6, #2
 80066d6:	d03b      	beq.n	8006750 <GUI__DispStringInRect+0xdc>
 80066d8:	2e00      	cmp	r6, #0
 80066da:	d142      	bne.n	8006762 <GUI__DispStringInRect+0xee>
 80066dc:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 80066e0:	e03f      	b.n	8006762 <GUI__DispStringInRect+0xee>
 80066e2:	a804      	add	r0, sp, #16
 80066e4:	f7ff fc38 	bl	8005f58 <GUI_GetClientRect>
 80066e8:	e7d8      	b.n	800669c <GUI__DispStringInRect+0x28>
 80066ea:	463d      	mov	r5, r7
 80066ec:	2400      	movs	r4, #0
 80066ee:	b18d      	cbz	r5, 8006714 <GUI__DispStringInRect+0xa0>
 80066f0:	4629      	mov	r1, r5
 80066f2:	9801      	ldr	r0, [sp, #4]
 80066f4:	f004 fe12 	bl	800b31c <GUI__GetLineNumChars>
 80066f8:	4601      	mov	r1, r0
 80066fa:	1a2d      	subs	r5, r5, r0
 80066fc:	9801      	ldr	r0, [sp, #4]
 80066fe:	f000 fe0d 	bl	800731c <GUI_UC__NumChars2NumBytes>
 8006702:	9b01      	ldr	r3, [sp, #4]
 8006704:	4418      	add	r0, r3
 8006706:	9001      	str	r0, [sp, #4]
 8006708:	a801      	add	r0, sp, #4
 800670a:	3401      	adds	r4, #1
 800670c:	f7fe fe96 	bl	800543c <GUI__HandleEOLine>
 8006710:	2800      	cmp	r0, #0
 8006712:	d0ec      	beq.n	80066ee <GUI__DispStringInRect+0x7a>
 8006714:	f1b8 0f08 	cmp.w	r8, #8
 8006718:	d005      	beq.n	8006726 <GUI__DispStringInRect+0xb2>
 800671a:	f1b8 0f0c 	cmp.w	r8, #12
 800671e:	d008      	beq.n	8006732 <GUI__DispStringInRect+0xbe>
 8006720:	f1b8 0f04 	cmp.w	r8, #4
 8006724:	d112      	bne.n	800674c <GUI__DispStringInRect+0xd8>
 8006726:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800672a:	fb0a 5514 	mls	r5, sl, r4, r5
 800672e:	3501      	adds	r5, #1
 8006730:	e7b9      	b.n	80066a6 <GUI__DispStringInRect+0x32>
 8006732:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8006736:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 800673a:	1aed      	subs	r5, r5, r3
 800673c:	3501      	adds	r5, #1
 800673e:	fb0a 5514 	mls	r5, sl, r4, r5
 8006742:	2402      	movs	r4, #2
 8006744:	fb95 f5f4 	sdiv	r5, r5, r4
 8006748:	441d      	add	r5, r3
 800674a:	e7ac      	b.n	80066a6 <GUI__DispStringInRect+0x32>
 800674c:	2500      	movs	r5, #0
 800674e:	e7aa      	b.n	80066a6 <GUI__DispStringInRect+0x32>
 8006750:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8006754:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8006758:	1ae4      	subs	r4, r4, r3
 800675a:	1a24      	subs	r4, r4, r0
 800675c:	fb94 f4f6 	sdiv	r4, r4, r6
 8006760:	441c      	add	r4, r3
 8006762:	f8db 1000 	ldr.w	r1, [fp]
 8006766:	b22b      	sxth	r3, r5
 8006768:	3801      	subs	r0, #1
 800676a:	b222      	sxth	r2, r4
 800676c:	848b      	strh	r3, [r1, #36]	; 0x24
 800676e:	4420      	add	r0, r4
 8006770:	f8ad 300a 	strh.w	r3, [sp, #10]
 8006774:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006778:	844a      	strh	r2, [r1, #34]	; 0x22
 800677a:	442b      	add	r3, r5
 800677c:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006780:	f8ad 000c 	strh.w	r0, [sp, #12]
 8006784:	aa02      	add	r2, sp, #8
 8006786:	4641      	mov	r1, r8
 8006788:	9801      	ldr	r0, [sp, #4]
 800678a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800678e:	f004 fe21 	bl	800b3d4 <GUI__DispLine>
 8006792:	4b33      	ldr	r3, [pc, #204]	; (8006860 <GUI__DispStringInRect+0x1ec>)
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	b373      	cbz	r3, 80067f6 <GUI__DispStringInRect+0x182>
 8006798:	f8db 3000 	ldr.w	r3, [fp]
 800679c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679e:	079a      	lsls	r2, r3, #30
 80067a0:	d429      	bmi.n	80067f6 <GUI__DispStringInRect+0x182>
 80067a2:	9b01      	ldr	r3, [sp, #4]
 80067a4:	4599      	cmp	r9, r3
 80067a6:	d10c      	bne.n	80067c2 <GUI__DispStringInRect+0x14e>
 80067a8:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80067ac:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80067b0:	428b      	cmp	r3, r1
 80067b2:	dd06      	ble.n	80067c2 <GUI__DispStringInRect+0x14e>
 80067b4:	3b01      	subs	r3, #1
 80067b6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80067ba:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80067be:	f7ff fd37 	bl	8006230 <GUI_ClearRect>
 80067c2:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80067c6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 80067ca:	4282      	cmp	r2, r0
 80067cc:	dd06      	ble.n	80067dc <GUI__DispStringInRect+0x168>
 80067ce:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80067d2:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80067d6:	3a01      	subs	r2, #1
 80067d8:	f7ff fd2a 	bl	8006230 <GUI_ClearRect>
 80067dc:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 80067e0:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80067e4:	4290      	cmp	r0, r2
 80067e6:	da06      	bge.n	80067f6 <GUI__DispStringInRect+0x182>
 80067e8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80067ec:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
 80067f0:	3001      	adds	r0, #1
 80067f2:	f7ff fd1d 	bl	8006230 <GUI_ClearRect>
 80067f6:	4641      	mov	r1, r8
 80067f8:	9801      	ldr	r0, [sp, #4]
 80067fa:	f000 fd8f 	bl	800731c <GUI_UC__NumChars2NumBytes>
 80067fe:	9b01      	ldr	r3, [sp, #4]
 8006800:	f10d 0818 	add.w	r8, sp, #24
 8006804:	4418      	add	r0, r3
 8006806:	f848 0d14 	str.w	r0, [r8, #-20]!
 800680a:	f7ff f9f5 	bl	8005bf8 <GUI_GetFontDistY>
 800680e:	4405      	add	r5, r0
 8006810:	4640      	mov	r0, r8
 8006812:	f7fe fe13 	bl	800543c <GUI__HandleEOLine>
 8006816:	2800      	cmp	r0, #0
 8006818:	f43f af4c 	beq.w	80066b4 <GUI__DispStringInRect+0x40>
 800681c:	4b10      	ldr	r3, [pc, #64]	; (8006860 <GUI__DispStringInRect+0x1ec>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	b93b      	cbnz	r3, 8006832 <GUI__DispStringInRect+0x1be>
 8006822:	b007      	add	sp, #28
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 800682c:	1a24      	subs	r4, r4, r0
 800682e:	3401      	adds	r4, #1
 8006830:	e797      	b.n	8006762 <GUI__DispStringInRect+0xee>
 8006832:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <GUI__DispStringInRect+0x1f0>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006838:	079b      	lsls	r3, r3, #30
 800683a:	d4f2      	bmi.n	8006822 <GUI__DispStringInRect+0x1ae>
 800683c:	9b01      	ldr	r3, [sp, #4]
 800683e:	4599      	cmp	r9, r3
 8006840:	d0ef      	beq.n	8006822 <GUI__DispStringInRect+0x1ae>
 8006842:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 8006846:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 800684a:	4299      	cmp	r1, r3
 800684c:	dae9      	bge.n	8006822 <GUI__DispStringInRect+0x1ae>
 800684e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8006852:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8006856:	3101      	adds	r1, #1
 8006858:	f7ff fcea 	bl	8006230 <GUI_ClearRect>
 800685c:	e7e1      	b.n	8006822 <GUI__DispStringInRect+0x1ae>
 800685e:	bf00      	nop
 8006860:	20000254 	.word	0x20000254
 8006864:	200000d8 	.word	0x200000d8

08006868 <GUI_DispStringInRectMax>:
 8006868:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800686c:	460c      	mov	r4, r1
 800686e:	4617      	mov	r7, r2
 8006870:	4698      	mov	r8, r3
 8006872:	4606      	mov	r6, r0
 8006874:	b1b0      	cbz	r0, 80068a4 <GUI_DispStringInRectMax+0x3c>
 8006876:	b1c1      	cbz	r1, 80068aa <GUI_DispStringInRectMax+0x42>
 8006878:	4608      	mov	r0, r1
 800687a:	f004 f901 	bl	800aa80 <WM_SetUserClipRect>
 800687e:	4605      	mov	r5, r0
 8006880:	b138      	cbz	r0, 8006892 <GUI_DispStringInRectMax+0x2a>
 8006882:	4602      	mov	r2, r0
 8006884:	4621      	mov	r1, r4
 8006886:	4668      	mov	r0, sp
 8006888:	f7fe fe07 	bl	800549a <GUI__IntersectRects>
 800688c:	4668      	mov	r0, sp
 800688e:	f004 f8f7 	bl	800aa80 <WM_SetUserClipRect>
 8006892:	4630      	mov	r0, r6
 8006894:	4643      	mov	r3, r8
 8006896:	463a      	mov	r2, r7
 8006898:	4621      	mov	r1, r4
 800689a:	f7ff feeb 	bl	8006674 <GUI__DispStringInRect>
 800689e:	4628      	mov	r0, r5
 80068a0:	f004 f8ee 	bl	800aa80 <WM_SetUserClipRect>
 80068a4:	b002      	add	sp, #8
 80068a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068aa:	460d      	mov	r5, r1
 80068ac:	e7f1      	b.n	8006892 <GUI_DispStringInRectMax+0x2a>

080068ae <GUI_DispStringInRect>:
 80068ae:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80068b2:	f7ff bfd9 	b.w	8006868 <GUI_DispStringInRectMax>

080068b6 <GUI_DRAW__Draw>:
 80068b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068ba:	460e      	mov	r6, r1
 80068bc:	4617      	mov	r7, r2
 80068be:	4698      	mov	r8, r3
 80068c0:	4605      	mov	r5, r0
 80068c2:	b170      	cbz	r0, 80068e2 <GUI_DRAW__Draw+0x2c>
 80068c4:	f7fe ff82 	bl	80057cc <GUI_ALLOC_LockH>
 80068c8:	4604      	mov	r4, r0
 80068ca:	a802      	add	r0, sp, #8
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	f840 4d04 	str.w	r4, [r0, #-4]!
 80068d2:	681c      	ldr	r4, [r3, #0]
 80068d4:	f7fe ff88 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80068d8:	4643      	mov	r3, r8
 80068da:	463a      	mov	r2, r7
 80068dc:	4631      	mov	r1, r6
 80068de:	4628      	mov	r0, r5
 80068e0:	47a0      	blx	r4
 80068e2:	b002      	add	sp, #8
 80068e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068e8 <_DrawGradient>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	b08d      	sub	sp, #52	; 0x34
 80068ee:	461c      	mov	r4, r3
 80068f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80068f2:	9301      	str	r3, [sp, #4]
 80068f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80068f6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80068fa:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	4605      	mov	r5, r0
 8006902:	4689      	mov	r9, r1
 8006904:	4616      	mov	r6, r2
 8006906:	f7ff fb32 	bl	8005f6e <GUI_GetColor>
 800690a:	45d8      	cmp	r8, fp
 800690c:	9007      	str	r0, [sp, #28]
 800690e:	d115      	bne.n	800693c <_DrawGradient+0x54>
 8006910:	4640      	mov	r0, r8
 8006912:	f002 f931 	bl	8008b78 <LCD_SetColor>
 8006916:	9b00      	ldr	r3, [sp, #0]
 8006918:	b123      	cbz	r3, 8006924 <_DrawGradient+0x3c>
 800691a:	4623      	mov	r3, r4
 800691c:	4632      	mov	r2, r6
 800691e:	4649      	mov	r1, r9
 8006920:	4628      	mov	r0, r5
 8006922:	e003      	b.n	800692c <_DrawGradient+0x44>
 8006924:	4633      	mov	r3, r6
 8006926:	4622      	mov	r2, r4
 8006928:	4629      	mov	r1, r5
 800692a:	4648      	mov	r0, r9
 800692c:	f001 fe50 	bl	80085d0 <LCD_FillRect>
 8006930:	9807      	ldr	r0, [sp, #28]
 8006932:	b00d      	add	sp, #52	; 0x34
 8006934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006938:	f002 b91e 	b.w	8008b78 <LCD_SetColor>
 800693c:	ebb4 0709 	subs.w	r7, r4, r9
 8006940:	f000 809a 	beq.w	8006a78 <_DrawGradient+0x190>
 8006944:	fa5f f288 	uxtb.w	r2, r8
 8006948:	fa5f f38b 	uxtb.w	r3, fp
 800694c:	1a9b      	subs	r3, r3, r2
 800694e:	9308      	str	r3, [sp, #32]
 8006950:	2302      	movs	r3, #2
 8006952:	fb97 f3f3 	sdiv	r3, r7, r3
 8006956:	fb02 3207 	mla	r2, r2, r7, r3
 800695a:	9202      	str	r2, [sp, #8]
 800695c:	f3cb 2107 	ubfx	r1, fp, #8, #8
 8006960:	f3c8 2207 	ubfx	r2, r8, #8, #8
 8006964:	1a89      	subs	r1, r1, r2
 8006966:	fb02 3207 	mla	r2, r2, r7, r3
 800696a:	9109      	str	r1, [sp, #36]	; 0x24
 800696c:	9203      	str	r2, [sp, #12]
 800696e:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8006972:	f3c8 4207 	ubfx	r2, r8, #16, #8
 8006976:	1a89      	subs	r1, r1, r2
 8006978:	ea4f 6818 	mov.w	r8, r8, lsr #24
 800697c:	fb02 3207 	mla	r2, r2, r7, r3
 8006980:	9204      	str	r2, [sp, #16]
 8006982:	fb08 3307 	mla	r3, r8, r7, r3
 8006986:	ebc8 621b 	rsb	r2, r8, fp, lsr #24
 800698a:	9807      	ldr	r0, [sp, #28]
 800698c:	910a      	str	r1, [sp, #40]	; 0x28
 800698e:	920b      	str	r2, [sp, #44]	; 0x2c
 8006990:	9305      	str	r3, [sp, #20]
 8006992:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 8006996:	f04f 0a01 	mov.w	sl, #1
 800699a:	f108 0b01 	add.w	fp, r8, #1
 800699e:	455c      	cmp	r4, fp
 80069a0:	da0d      	bge.n	80069be <_DrawGradient+0xd6>
 80069a2:	f002 f8e9 	bl	8008b78 <LCD_SetColor>
 80069a6:	f1ba 0f01 	cmp.w	sl, #1
 80069aa:	d05a      	beq.n	8006a62 <_DrawGradient+0x17a>
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	eba4 000a 	sub.w	r0, r4, sl
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d050      	beq.n	8006a58 <_DrawGradient+0x170>
 80069b6:	4623      	mov	r3, r4
 80069b8:	4632      	mov	r2, r6
 80069ba:	1c41      	adds	r1, r0, #1
 80069bc:	e7b0      	b.n	8006920 <_DrawGradient+0x38>
 80069be:	9b02      	ldr	r3, [sp, #8]
 80069c0:	9a08      	ldr	r2, [sp, #32]
 80069c2:	fb93 f1f7 	sdiv	r1, r3, r7
 80069c6:	4413      	add	r3, r2
 80069c8:	9302      	str	r3, [sp, #8]
 80069ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	fb93 fef7 	sdiv	lr, r3, r7
 80069d2:	4413      	add	r3, r2
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069d8:	9b04      	ldr	r3, [sp, #16]
 80069da:	fb93 fcf7 	sdiv	ip, r3, r7
 80069de:	4413      	add	r3, r2
 80069e0:	9304      	str	r3, [sp, #16]
 80069e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069e4:	9b05      	ldr	r3, [sp, #20]
 80069e6:	fb93 f3f7 	sdiv	r3, r3, r7
 80069ea:	9306      	str	r3, [sp, #24]
 80069ec:	9b05      	ldr	r3, [sp, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	9305      	str	r3, [sp, #20]
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	061a      	lsls	r2, r3, #24
 80069f6:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80069fa:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 80069fe:	ea42 0301 	orr.w	r3, r2, r1
 8006a02:	45d9      	cmp	r9, fp
 8006a04:	9306      	str	r3, [sp, #24]
 8006a06:	da03      	bge.n	8006a10 <_DrawGradient+0x128>
 8006a08:	4298      	cmp	r0, r3
 8006a0a:	d104      	bne.n	8006a16 <_DrawGradient+0x12e>
 8006a0c:	f10a 0a01 	add.w	sl, sl, #1
 8006a10:	46d8      	mov	r8, fp
 8006a12:	9806      	ldr	r0, [sp, #24]
 8006a14:	e7c1      	b.n	800699a <_DrawGradient+0xb2>
 8006a16:	f002 f8af 	bl	8008b78 <LCD_SetColor>
 8006a1a:	f1ba 0f01 	cmp.w	sl, #1
 8006a1e:	d010      	beq.n	8006a42 <_DrawGradient+0x15a>
 8006a20:	9b00      	ldr	r3, [sp, #0]
 8006a22:	ebab 000a 	sub.w	r0, fp, sl
 8006a26:	b143      	cbz	r3, 8006a3a <_DrawGradient+0x152>
 8006a28:	4601      	mov	r1, r0
 8006a2a:	4643      	mov	r3, r8
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	4628      	mov	r0, r5
 8006a30:	f001 fdce 	bl	80085d0 <LCD_FillRect>
 8006a34:	f04f 0a01 	mov.w	sl, #1
 8006a38:	e7ea      	b.n	8006a10 <_DrawGradient+0x128>
 8006a3a:	4633      	mov	r3, r6
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	4629      	mov	r1, r5
 8006a40:	e7f6      	b.n	8006a30 <_DrawGradient+0x148>
 8006a42:	9b00      	ldr	r3, [sp, #0]
 8006a44:	4632      	mov	r2, r6
 8006a46:	b123      	cbz	r3, 8006a52 <_DrawGradient+0x16a>
 8006a48:	4641      	mov	r1, r8
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	9b01      	ldr	r3, [sp, #4]
 8006a4e:	4798      	blx	r3
 8006a50:	e7de      	b.n	8006a10 <_DrawGradient+0x128>
 8006a52:	4629      	mov	r1, r5
 8006a54:	4640      	mov	r0, r8
 8006a56:	e7f9      	b.n	8006a4c <_DrawGradient+0x164>
 8006a58:	4633      	mov	r3, r6
 8006a5a:	4622      	mov	r2, r4
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	3001      	adds	r0, #1
 8006a60:	e764      	b.n	800692c <_DrawGradient+0x44>
 8006a62:	9b00      	ldr	r3, [sp, #0]
 8006a64:	4632      	mov	r2, r6
 8006a66:	b123      	cbz	r3, 8006a72 <_DrawGradient+0x18a>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	9b01      	ldr	r3, [sp, #4]
 8006a6e:	4798      	blx	r3
 8006a70:	e75e      	b.n	8006930 <_DrawGradient+0x48>
 8006a72:	4629      	mov	r1, r5
 8006a74:	4620      	mov	r0, r4
 8006a76:	e7f9      	b.n	8006a6c <_DrawGradient+0x184>
 8006a78:	b00d      	add	sp, #52	; 0x34
 8006a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006a80 <GUI_DrawGradientV>:
 8006a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a84:	4c15      	ldr	r4, [pc, #84]	; (8006adc <GUI_DrawGradientV+0x5c>)
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8006a8a:	6ced      	ldr	r5, [r5, #76]	; 0x4c
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	eb04 0800 	add.w	r8, r4, r0
 8006a92:	eb05 0901 	add.w	r9, r5, r1
 8006a96:	4414      	add	r4, r2
 8006a98:	441d      	add	r5, r3
 8006a9a:	a804      	add	r0, sp, #16
 8006a9c:	f8ad 8010 	strh.w	r8, [sp, #16]
 8006aa0:	f8ad 4014 	strh.w	r4, [sp, #20]
 8006aa4:	f8ad 9012 	strh.w	r9, [sp, #18]
 8006aa8:	f8ad 5016 	strh.w	r5, [sp, #22]
 8006aac:	f003 faa8 	bl	800a000 <WM__InitIVRSearch>
 8006ab0:	b188      	cbz	r0, 8006ad6 <GUI_DrawGradientV+0x56>
 8006ab2:	4e0b      	ldr	r6, [pc, #44]	; (8006ae0 <GUI_DrawGradientV+0x60>)
 8006ab4:	2701      	movs	r7, #1
 8006ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4622      	mov	r2, r4
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	4649      	mov	r1, r9
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	9703      	str	r7, [sp, #12]
 8006ac8:	9602      	str	r6, [sp, #8]
 8006aca:	f7ff ff0d 	bl	80068e8 <_DrawGradient>
 8006ace:	f003 f9dd 	bl	8009e8c <WM__GetNextIVR>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d1ef      	bne.n	8006ab6 <GUI_DrawGradientV+0x36>
 8006ad6:	b007      	add	sp, #28
 8006ad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006adc:	200000d8 	.word	0x200000d8
 8006ae0:	08008529 	.word	0x08008529

08006ae4 <GUI_DrawHLine>:
 8006ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae6:	4d10      	ldr	r5, [pc, #64]	; (8006b28 <GUI_DrawHLine+0x44>)
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 8006aec:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8006aee:	4406      	add	r6, r0
 8006af0:	1867      	adds	r7, r4, r1
 8006af2:	b233      	sxth	r3, r6
 8006af4:	4414      	add	r4, r2
 8006af6:	4668      	mov	r0, sp
 8006af8:	f8ad 7000 	strh.w	r7, [sp]
 8006afc:	f8ad 4004 	strh.w	r4, [sp, #4]
 8006b00:	f8ad 3002 	strh.w	r3, [sp, #2]
 8006b04:	f8ad 3006 	strh.w	r3, [sp, #6]
 8006b08:	f003 fa7a 	bl	800a000 <WM__InitIVRSearch>
 8006b0c:	b148      	cbz	r0, 8006b22 <GUI_DrawHLine+0x3e>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b12:	4622      	mov	r2, r4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4631      	mov	r1, r6
 8006b18:	4638      	mov	r0, r7
 8006b1a:	4798      	blx	r3
 8006b1c:	f003 f9b6 	bl	8009e8c <WM__GetNextIVR>
 8006b20:	e7f4      	b.n	8006b0c <GUI_DrawHLine+0x28>
 8006b22:	b003      	add	sp, #12
 8006b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200000d8 	.word	0x200000d8

08006b2c <GL_DrawPoint>:
 8006b2c:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <GL_DrawPoint+0x1c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	7e1a      	ldrb	r2, [r3, #24]
 8006b32:	2a01      	cmp	r2, #1
 8006b34:	d102      	bne.n	8006b3c <GL_DrawPoint+0x10>
 8006b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	4718      	bx	r3
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	2302      	movs	r3, #2
 8006b40:	fb92 f2f3 	sdiv	r2, r2, r3
 8006b44:	f004 bc98 	b.w	800b478 <GL_FillCircle>
 8006b48:	200000d8 	.word	0x200000d8

08006b4c <GUI_DrawVLine>:
 8006b4c:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <GUI_DrawVLine+0x40>)
 8006b4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 8006b54:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8006b56:	4405      	add	r5, r0
 8006b58:	1866      	adds	r6, r4, r1
 8006b5a:	b22b      	sxth	r3, r5
 8006b5c:	4414      	add	r4, r2
 8006b5e:	4668      	mov	r0, sp
 8006b60:	f8ad 3000 	strh.w	r3, [sp]
 8006b64:	f8ad 3004 	strh.w	r3, [sp, #4]
 8006b68:	f8ad 6002 	strh.w	r6, [sp, #2]
 8006b6c:	f8ad 4006 	strh.w	r4, [sp, #6]
 8006b70:	f003 fa46 	bl	800a000 <WM__InitIVRSearch>
 8006b74:	b138      	cbz	r0, 8006b86 <GUI_DrawVLine+0x3a>
 8006b76:	4622      	mov	r2, r4
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	f001 fcfe 	bl	800857c <LCD_DrawVLine>
 8006b80:	f003 f984 	bl	8009e8c <WM__GetNextIVR>
 8006b84:	e7f6      	b.n	8006b74 <GUI_DrawVLine+0x28>
 8006b86:	b002      	add	sp, #8
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200000d8 	.word	0x200000d8

08006b90 <GUI_FillRect>:
 8006b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b92:	4c0f      	ldr	r4, [pc, #60]	; (8006bd0 <GUI_FillRect+0x40>)
 8006b94:	6825      	ldr	r5, [r4, #0]
 8006b96:	6cac      	ldr	r4, [r5, #72]	; 0x48
 8006b98:	6ced      	ldr	r5, [r5, #76]	; 0x4c
 8006b9a:	1826      	adds	r6, r4, r0
 8006b9c:	186f      	adds	r7, r5, r1
 8006b9e:	4414      	add	r4, r2
 8006ba0:	441d      	add	r5, r3
 8006ba2:	4668      	mov	r0, sp
 8006ba4:	f8ad 6000 	strh.w	r6, [sp]
 8006ba8:	f8ad 4004 	strh.w	r4, [sp, #4]
 8006bac:	f8ad 7002 	strh.w	r7, [sp, #2]
 8006bb0:	f8ad 5006 	strh.w	r5, [sp, #6]
 8006bb4:	f003 fa24 	bl	800a000 <WM__InitIVRSearch>
 8006bb8:	b140      	cbz	r0, 8006bcc <GUI_FillRect+0x3c>
 8006bba:	462b      	mov	r3, r5
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4639      	mov	r1, r7
 8006bc0:	4630      	mov	r0, r6
 8006bc2:	f001 fd05 	bl	80085d0 <LCD_FillRect>
 8006bc6:	f003 f961 	bl	8009e8c <WM__GetNextIVR>
 8006bca:	e7f5      	b.n	8006bb8 <GUI_FillRect+0x28>
 8006bcc:	b003      	add	sp, #12
 8006bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bd0:	200000d8 	.word	0x200000d8

08006bd4 <_SetLineColor>:
 8006bd4:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <_SetLineColor+0x78>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	7e9b      	ldrb	r3, [r3, #26]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d830      	bhi.n	8006c42 <_SetLineColor+0x6e>
 8006be0:	e8df f003 	tbb	[pc, r3]
 8006be4:	25180f02 	.word	0x25180f02
 8006be8:	3006      	adds	r0, #6
 8006bea:	4243      	negs	r3, r0
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	f000 000f 	and.w	r0, r0, #15
 8006bf4:	bf58      	it	pl
 8006bf6:	4258      	negpl	r0, r3
 8006bf8:	280b      	cmp	r0, #11
 8006bfa:	bfcc      	ite	gt
 8006bfc:	2000      	movgt	r0, #0
 8006bfe:	2001      	movle	r0, #1
 8006c00:	4770      	bx	lr
 8006c02:	4243      	negs	r3, r0
 8006c04:	f003 0303 	and.w	r3, r3, #3
 8006c08:	f000 0003 	and.w	r0, r0, #3
 8006c0c:	bf58      	it	pl
 8006c0e:	4258      	negpl	r0, r3
 8006c10:	2801      	cmp	r0, #1
 8006c12:	e7f2      	b.n	8006bfa <_SetLineColor+0x26>
 8006c14:	2214      	movs	r2, #20
 8006c16:	fb90 f3f2 	sdiv	r3, r0, r2
 8006c1a:	fb02 0013 	mls	r0, r2, r3, r0
 8006c1e:	280b      	cmp	r0, #11
 8006c20:	dd11      	ble.n	8006c46 <_SetLineColor+0x72>
 8006c22:	3810      	subs	r0, #16
 8006c24:	2801      	cmp	r0, #1
 8006c26:	bf8c      	ite	hi
 8006c28:	2000      	movhi	r0, #0
 8006c2a:	2001      	movls	r0, #1
 8006c2c:	4770      	bx	lr
 8006c2e:	2218      	movs	r2, #24
 8006c30:	fb90 f3f2 	sdiv	r3, r0, r2
 8006c34:	fb02 0013 	mls	r0, r2, r3, r0
 8006c38:	280b      	cmp	r0, #11
 8006c3a:	dd04      	ble.n	8006c46 <_SetLineColor+0x72>
 8006c3c:	f020 0004 	bic.w	r0, r0, #4
 8006c40:	e7ef      	b.n	8006c22 <_SetLineColor+0x4e>
 8006c42:	2000      	movs	r0, #0
 8006c44:	4770      	bx	lr
 8006c46:	2001      	movs	r0, #1
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	200000d8 	.word	0x200000d8

08006c50 <GUI_sin>:
 8006c50:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8006c54:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006c58:	bfc6      	itte	gt
 8006c5a:	f5a0 6000 	subgt.w	r0, r0, #2048	; 0x800
 8006c5e:	2101      	movgt	r1, #1
 8006c60:	2100      	movle	r1, #0
 8006c62:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006c66:	bfc8      	it	gt
 8006c68:	f5c0 6000 	rsbgt	r0, r0, #2048	; 0x800
 8006c6c:	1182      	asrs	r2, r0, #6
 8006c6e:	b510      	push	{r4, lr}
 8006c70:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006c74:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <GUI_sin+0x58>)
 8006c76:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c7a:	b280      	uxth	r0, r0
 8006c7c:	f834 3012 	ldrh.w	r3, [r4, r2, lsl #1]
 8006c80:	2840      	cmp	r0, #64	; 0x40
 8006c82:	fb00 f303 	mul.w	r3, r0, r3
 8006c86:	d008      	beq.n	8006c9a <GUI_sin+0x4a>
 8006c88:	2a10      	cmp	r2, #16
 8006c8a:	bf1f      	itttt	ne
 8006c8c:	3201      	addne	r2, #1
 8006c8e:	f1c0 0040 	rsbne	r0, r0, #64	; 0x40
 8006c92:	f834 2012 	ldrhne.w	r2, [r4, r2, lsl #1]
 8006c96:	fb00 3302 	mlane	r3, r0, r2, r3
 8006c9a:	f103 0020 	add.w	r0, r3, #32
 8006c9e:	0980      	lsrs	r0, r0, #6
 8006ca0:	b101      	cbz	r1, 8006ca4 <GUI_sin+0x54>
 8006ca2:	4240      	negs	r0, r0
 8006ca4:	bd10      	pop	{r4, pc}
 8006ca6:	bf00      	nop
 8006ca8:	08010bac 	.word	0x08010bac

08006cac <GUI_cos>:
 8006cac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006cb0:	f7ff bfce 	b.w	8006c50 <GUI_sin>

08006cb4 <GL_DrawLine1Ex>:
 8006cb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	1a15      	subs	r5, r2, r0
 8006cba:	1a5c      	subs	r4, r3, r1
 8006cbc:	ea55 0e04 	orrs.w	lr, r5, r4
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	460f      	mov	r7, r1
 8006cc4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006cc8:	d104      	bne.n	8006cd4 <GL_DrawLine1Ex+0x20>
 8006cca:	b003      	add	sp, #12
 8006ccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd0:	f7ff bf2c 	b.w	8006b2c <GL_DrawPoint>
 8006cd4:	ea84 70e4 	eor.w	r0, r4, r4, asr #31
 8006cd8:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8006cdc:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
 8006ce0:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 8006ce4:	4288      	cmp	r0, r1
 8006ce6:	dd2e      	ble.n	8006d46 <GL_DrawLine1Ex+0x92>
 8006ce8:	4629      	mov	r1, r5
 8006cea:	4625      	mov	r5, r4
 8006cec:	460c      	mov	r4, r1
 8006cee:	4611      	mov	r1, r2
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4631      	mov	r1, r6
 8006cf6:	463e      	mov	r6, r7
 8006cf8:	460f      	mov	r7, r1
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	9100      	str	r1, [sp, #0]
 8006cfe:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8006d02:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 8006d06:	42a9      	cmp	r1, r5
 8006d08:	bf1f      	itttt	ne
 8006d0a:	461f      	movne	r7, r3
 8006d0c:	4264      	negne	r4, r4
 8006d0e:	4633      	movne	r3, r6
 8006d10:	426d      	negne	r5, r5
 8006d12:	bf1d      	ittte	ne
 8006d14:	4616      	movne	r6, r2
 8006d16:	f04f 3bff 	movne.w	fp, #4294967295	; 0xffffffff
 8006d1a:	461a      	movne	r2, r3
 8006d1c:	f04f 0b01 	moveq.w	fp, #1
 8006d20:	2c00      	cmp	r4, #0
 8006d22:	f8d8 a000 	ldr.w	sl, [r8]
 8006d26:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8006e68 <GL_DrawLine1Ex+0x1b4>
 8006d2a:	d13f      	bne.n	8006dac <GL_DrawLine1Ex+0xf8>
 8006d2c:	9b00      	ldr	r3, [sp, #0]
 8006d2e:	b30b      	cbz	r3, 8006d74 <GL_DrawLine1Ex+0xc0>
 8006d30:	f8d9 3000 	ldr.w	r3, [r9]
 8006d34:	7e9b      	ldrb	r3, [r3, #26]
 8006d36:	b99b      	cbnz	r3, 8006d60 <GL_DrawLine1Ex+0xac>
 8006d38:	4631      	mov	r1, r6
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	b003      	add	sp, #12
 8006d3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d42:	f001 bc1b 	b.w	800857c <LCD_DrawVLine>
 8006d46:	2100      	movs	r1, #0
 8006d48:	e7d8      	b.n	8006cfc <GL_DrawLine1Ex+0x48>
 8006d4a:	f7ff ff43 	bl	8006bd4 <_SetLineColor>
 8006d4e:	b930      	cbnz	r0, 8006d5e <GL_DrawLine1Ex+0xaa>
 8006d50:	f8d9 3000 	ldr.w	r3, [r9]
 8006d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d56:	1931      	adds	r1, r6, r4
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	4638      	mov	r0, r7
 8006d5c:	4798      	blx	r3
 8006d5e:	3401      	adds	r4, #1
 8006d60:	42ac      	cmp	r4, r5
 8006d62:	eb04 000a 	add.w	r0, r4, sl
 8006d66:	ddf0      	ble.n	8006d4a <GL_DrawLine1Ex+0x96>
 8006d68:	3801      	subs	r0, #1
 8006d6a:	f8c8 0000 	str.w	r0, [r8]
 8006d6e:	b003      	add	sp, #12
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d74:	f8d9 3000 	ldr.w	r3, [r9]
 8006d78:	7e99      	ldrb	r1, [r3, #26]
 8006d7a:	b991      	cbnz	r1, 8006da2 <GL_DrawLine1Ex+0xee>
 8006d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4639      	mov	r1, r7
 8006d82:	4630      	mov	r0, r6
 8006d84:	b003      	add	sp, #12
 8006d86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d8a:	4718      	bx	r3
 8006d8c:	f7ff ff22 	bl	8006bd4 <_SetLineColor>
 8006d90:	b930      	cbnz	r0, 8006da0 <GL_DrawLine1Ex+0xec>
 8006d92:	f8d9 3000 	ldr.w	r3, [r9]
 8006d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d98:	4639      	mov	r1, r7
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	1930      	adds	r0, r6, r4
 8006d9e:	4798      	blx	r3
 8006da0:	3401      	adds	r4, #1
 8006da2:	42ac      	cmp	r4, r5
 8006da4:	eb0a 0004 	add.w	r0, sl, r4
 8006da8:	ddf0      	ble.n	8006d8c <GL_DrawLine1Ex+0xd8>
 8006daa:	e7dd      	b.n	8006d68 <GL_DrawLine1Ex+0xb4>
 8006dac:	f8d9 1000 	ldr.w	r1, [r9]
 8006db0:	7e89      	ldrb	r1, [r1, #26]
 8006db2:	f04f 0202 	mov.w	r2, #2
 8006db6:	fb95 f2f2 	sdiv	r2, r5, r2
 8006dba:	bfb8      	it	lt
 8006dbc:	4252      	neglt	r2, r2
 8006dbe:	b9d9      	cbnz	r1, 8006df8 <GL_DrawLine1Ex+0x144>
 8006dc0:	4690      	mov	r8, r2
 8006dc2:	46b2      	mov	sl, r6
 8006dc4:	ebaa 0306 	sub.w	r3, sl, r6
 8006dc8:	429d      	cmp	r5, r3
 8006dca:	dbd0      	blt.n	8006d6e <GL_DrawLine1Ex+0xba>
 8006dcc:	fb98 f0f5 	sdiv	r0, r8, r5
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	4438      	add	r0, r7
 8006dd4:	b953      	cbnz	r3, 8006dec <GL_DrawLine1Ex+0x138>
 8006dd6:	f8d9 3000 	ldr.w	r3, [r9]
 8006dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4601      	mov	r1, r0
 8006de0:	4650      	mov	r0, sl
 8006de2:	4798      	blx	r3
 8006de4:	f10a 0a01 	add.w	sl, sl, #1
 8006de8:	44a0      	add	r8, r4
 8006dea:	e7eb      	b.n	8006dc4 <GL_DrawLine1Ex+0x110>
 8006dec:	f8d9 3000 	ldr.w	r3, [r9]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	4651      	mov	r1, sl
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	e7f4      	b.n	8006de2 <GL_DrawLine1Ex+0x12e>
 8006df8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006dfc:	bf04      	itt	eq
 8006dfe:	eb05 010a 	addeq.w	r1, r5, sl
 8006e02:	f8c8 1000 	streq.w	r1, [r8]
 8006e06:	9201      	str	r2, [sp, #4]
 8006e08:	46b2      	mov	sl, r6
 8006e0a:	ebaa 0206 	sub.w	r2, sl, r6
 8006e0e:	4295      	cmp	r5, r2
 8006e10:	f8d8 0000 	ldr.w	r0, [r8]
 8006e14:	da0c      	bge.n	8006e30 <GL_DrawLine1Ex+0x17c>
 8006e16:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8006e1a:	bf04      	itt	eq
 8006e1c:	1940      	addeq	r0, r0, r5
 8006e1e:	f8c8 0000 	streq.w	r0, [r8]
 8006e22:	f8d8 2000 	ldr.w	r2, [r8]
 8006e26:	eba2 030b 	sub.w	r3, r2, fp
 8006e2a:	f8c8 3000 	str.w	r3, [r8]
 8006e2e:	e79e      	b.n	8006d6e <GL_DrawLine1Ex+0xba>
 8006e30:	4458      	add	r0, fp
 8006e32:	f8c8 0000 	str.w	r0, [r8]
 8006e36:	f7ff fecd 	bl	8006bd4 <_SetLineColor>
 8006e3a:	b960      	cbnz	r0, 8006e56 <GL_DrawLine1Ex+0x1a2>
 8006e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8006e40:	9b01      	ldr	r3, [sp, #4]
 8006e42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e44:	fb93 f0f5 	sdiv	r0, r3, r5
 8006e48:	9b00      	ldr	r3, [sp, #0]
 8006e4a:	6852      	ldr	r2, [r2, #4]
 8006e4c:	4438      	add	r0, r7
 8006e4e:	b943      	cbnz	r3, 8006e62 <GL_DrawLine1Ex+0x1ae>
 8006e50:	4601      	mov	r1, r0
 8006e52:	4650      	mov	r0, sl
 8006e54:	4790      	blx	r2
 8006e56:	9b01      	ldr	r3, [sp, #4]
 8006e58:	4423      	add	r3, r4
 8006e5a:	f10a 0a01 	add.w	sl, sl, #1
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	e7d3      	b.n	8006e0a <GL_DrawLine1Ex+0x156>
 8006e62:	4651      	mov	r1, sl
 8006e64:	e7f6      	b.n	8006e54 <GL_DrawLine1Ex+0x1a0>
 8006e66:	bf00      	nop
 8006e68:	200000d8 	.word	0x200000d8

08006e6c <GL_DrawLineEx>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8007018 <GL_DrawLineEx+0x1ac>
 8006e74:	f8d9 4000 	ldr.w	r4, [r9]
 8006e78:	7e24      	ldrb	r4, [r4, #24]
 8006e7a:	2c01      	cmp	r4, #1
 8006e7c:	b087      	sub	sp, #28
 8006e7e:	4607      	mov	r7, r0
 8006e80:	4688      	mov	r8, r1
 8006e82:	4615      	mov	r5, r2
 8006e84:	461e      	mov	r6, r3
 8006e86:	d106      	bne.n	8006e96 <GL_DrawLineEx+0x2a>
 8006e88:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8006e8a:	9400      	str	r4, [sp, #0]
 8006e8c:	f7ff ff12 	bl	8006cb4 <GL_DrawLine1Ex>
 8006e90:	b007      	add	sp, #28
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	1a83      	subs	r3, r0, r2
 8006e98:	1b8a      	subs	r2, r1, r6
 8006e9a:	ea53 0102 	orrs.w	r1, r3, r2
 8006e9e:	d0f7      	beq.n	8006e90 <GL_DrawLineEx+0x24>
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bfb6      	itet	lt
 8006ea4:	2101      	movlt	r1, #1
 8006ea6:	2100      	movge	r1, #0
 8006ea8:	425b      	neglt	r3, r3
 8006eaa:	2a00      	cmp	r2, #0
 8006eac:	bfbc      	itt	lt
 8006eae:	4252      	neglt	r2, r2
 8006eb0:	f041 0102 	orrlt.w	r1, r1, #2
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	bfbe      	ittt	lt
 8006eb8:	4618      	movlt	r0, r3
 8006eba:	4613      	movlt	r3, r2
 8006ebc:	4602      	movlt	r2, r0
 8006ebe:	ea4f 0063 	mov.w	r0, r3, asr #1
 8006ec2:	eb00 2282 	add.w	r2, r0, r2, lsl #10
 8006ec6:	fb92 f3f3 	sdiv	r3, r2, r3
 8006eca:	4a52      	ldr	r2, [pc, #328]	; (8007014 <GL_DrawLineEx+0x1a8>)
 8006ecc:	ea4f 1ea3 	mov.w	lr, r3, asr #6
 8006ed0:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8006ed4:	f1c3 0c10 	rsb	ip, r3, #16
 8006ed8:	bfb8      	it	lt
 8006eda:	f041 0104 	orrlt.w	r1, r1, #4
 8006ede:	eb02 004e 	add.w	r0, r2, lr, lsl #1
 8006ee2:	f1bc 0f10 	cmp.w	ip, #16
 8006ee6:	bf18      	it	ne
 8006ee8:	eb02 024e 	addne.w	r2, r2, lr, lsl #1
 8006eec:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006ef0:	bf18      	it	ne
 8006ef2:	f9b2 2024 	ldrshne.w	r2, [r2, #36]	; 0x24
 8006ef6:	fb0c f000 	mul.w	r0, ip, r0
 8006efa:	bf18      	it	ne
 8006efc:	fb03 0002 	mlane	r0, r3, r2, r0
 8006f00:	3008      	adds	r0, #8
 8006f02:	2310      	movs	r3, #16
 8006f04:	fb90 f0f3 	sdiv	r0, r0, r3
 8006f08:	074b      	lsls	r3, r1, #29
 8006f0a:	bf48      	it	mi
 8006f0c:	f5c0 6080 	rsbmi	r0, r0, #1024	; 0x400
 8006f10:	07ca      	lsls	r2, r1, #31
 8006f12:	bf48      	it	mi
 8006f14:	f5c0 6000 	rsbmi	r0, r0, #2048	; 0x800
 8006f18:	078b      	lsls	r3, r1, #30
 8006f1a:	bf48      	it	mi
 8006f1c:	f5c0 5080 	rsbmi	r0, r0, #4096	; 0x1000
 8006f20:	f500 6b80 	add.w	fp, r0, #1024	; 0x400
 8006f24:	4658      	mov	r0, fp
 8006f26:	f7ff fec1 	bl	8006cac <GUI_cos>
 8006f2a:	3c01      	subs	r4, #1
 8006f2c:	fb00 fa04 	mul.w	sl, r0, r4
 8006f30:	4658      	mov	r0, fp
 8006f32:	f7ff fe8d 	bl	8006c50 <GUI_sin>
 8006f36:	f1ba 0f00 	cmp.w	sl, #0
 8006f3a:	bfb8      	it	lt
 8006f3c:	f5ca 7300 	rsblt	r3, sl, #512	; 0x200
 8006f40:	fb00 f004 	mul.w	r0, r0, r4
 8006f44:	bfb5      	itete	lt
 8006f46:	129b      	asrlt	r3, r3, #10
 8006f48:	f50a 7300 	addge.w	r3, sl, #512	; 0x200
 8006f4c:	425b      	neglt	r3, r3
 8006f4e:	129b      	asrge	r3, r3, #10
 8006f50:	2800      	cmp	r0, #0
 8006f52:	bfbb      	ittet	lt
 8006f54:	f5c0 7000 	rsblt	r0, r0, #512	; 0x200
 8006f58:	1280      	asrlt	r0, r0, #10
 8006f5a:	f500 7000 	addge.w	r0, r0, #512	; 0x200
 8006f5e:	4240      	neglt	r0, r0
 8006f60:	bfa8      	it	ge
 8006f62:	1280      	asrge	r0, r0, #10
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bfcb      	itete	gt
 8006f68:	1c5a      	addgt	r2, r3, #1
 8006f6a:	2102      	movle	r1, #2
 8006f6c:	1052      	asrgt	r2, r2, #1
 8006f6e:	fb93 f2f1 	sdivle	r2, r3, r1
 8006f72:	bfce      	itee	gt
 8006f74:	105b      	asrgt	r3, r3, #1
 8006f76:	f103 33ff 	addle.w	r3, r3, #4294967295	; 0xffffffff
 8006f7a:	fb93 f3f1 	sdivle	r3, r3, r1
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	bfcc      	ite	gt
 8006f82:	1c44      	addgt	r4, r0, #1
 8006f84:	2102      	movle	r1, #2
 8006f86:	fa1f fe82 	uxth.w	lr, r2
 8006f8a:	bfde      	ittt	le
 8006f8c:	fb90 f4f1 	sdivle	r4, r0, r1
 8006f90:	f100 30ff 	addle.w	r0, r0, #4294967295	; 0xffffffff
 8006f94:	fb90 f0f1 	sdivle	r0, r0, r1
 8006f98:	b2b9      	uxth	r1, r7
 8006f9a:	eb01 020e 	add.w	r2, r1, lr
 8006f9e:	bfc4      	itt	gt
 8006fa0:	1064      	asrgt	r4, r4, #1
 8006fa2:	1040      	asrgt	r0, r0, #1
 8006fa4:	f8ad 2008 	strh.w	r2, [sp, #8]
 8006fa8:	b2a4      	uxth	r4, r4
 8006faa:	fa1f f288 	uxth.w	r2, r8
 8006fae:	b280      	uxth	r0, r0
 8006fb0:	eb02 0c04 	add.w	ip, r2, r4
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	1a12      	subs	r2, r2, r0
 8006fb8:	1ac9      	subs	r1, r1, r3
 8006fba:	f8ad 200e 	strh.w	r2, [sp, #14]
 8006fbe:	b2aa      	uxth	r2, r5
 8006fc0:	f8ad 100c 	strh.w	r1, [sp, #12]
 8006fc4:	1ad1      	subs	r1, r2, r3
 8006fc6:	b2b3      	uxth	r3, r6
 8006fc8:	1a18      	subs	r0, r3, r0
 8006fca:	4423      	add	r3, r4
 8006fcc:	4472      	add	r2, lr
 8006fce:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f8ad 1010 	strh.w	r1, [sp, #16]
 8006fd8:	f8ad 0012 	strh.w	r0, [sp, #18]
 8006fdc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006fe0:	2104      	movs	r1, #4
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	a802      	add	r0, sp, #8
 8006fe6:	f8ad c00a 	strh.w	ip, [sp, #10]
 8006fea:	f000 f863 	bl	80070b4 <GL_FillPolygon>
 8006fee:	f8d9 3000 	ldr.w	r3, [r9]
 8006ff2:	7e5b      	ldrb	r3, [r3, #25]
 8006ff4:	b91b      	cbnz	r3, 8006ffe <GL_DrawLineEx+0x192>
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	4638      	mov	r0, r7
 8006ffa:	f7ff fd97 	bl	8006b2c <GL_DrawPoint>
 8006ffe:	f8d9 3000 	ldr.w	r3, [r9]
 8007002:	7e5b      	ldrb	r3, [r3, #25]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f47f af43 	bne.w	8006e90 <GL_DrawLineEx+0x24>
 800700a:	4631      	mov	r1, r6
 800700c:	4628      	mov	r0, r5
 800700e:	f7ff fd8d 	bl	8006b2c <GL_DrawPoint>
 8007012:	e73d      	b.n	8006e90 <GL_DrawLineEx+0x24>
 8007014:	08010bac 	.word	0x08010bac
 8007018:	200000d8 	.word	0x200000d8

0800701c <GL_DrawLine>:
 800701c:	b530      	push	{r4, r5, lr}
 800701e:	b085      	sub	sp, #20
 8007020:	ac04      	add	r4, sp, #16
 8007022:	2500      	movs	r5, #0
 8007024:	f844 5d04 	str.w	r5, [r4, #-4]!
 8007028:	9400      	str	r4, [sp, #0]
 800702a:	f7ff ff1f 	bl	8006e6c <GL_DrawLineEx>
 800702e:	b005      	add	sp, #20
 8007030:	bd30      	pop	{r4, r5, pc}
	...

08007034 <GUI_DrawLine>:
 8007034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007038:	461e      	mov	r6, r3
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <GUI_DrawLine+0x3c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4680      	mov	r8, r0
 8007040:	2000      	movs	r0, #0
 8007042:	4689      	mov	r9, r1
 8007044:	4615      	mov	r5, r2
 8007046:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8007048:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800704a:	f002 ffd9 	bl	800a000 <WM__InitIVRSearch>
 800704e:	b168      	cbz	r0, 800706c <GUI_DrawLine+0x38>
 8007050:	4426      	add	r6, r4
 8007052:	443d      	add	r5, r7
 8007054:	444c      	add	r4, r9
 8007056:	4633      	mov	r3, r6
 8007058:	462a      	mov	r2, r5
 800705a:	4621      	mov	r1, r4
 800705c:	eb07 0008 	add.w	r0, r7, r8
 8007060:	f7ff ffdc 	bl	800701c <GL_DrawLine>
 8007064:	f002 ff12 	bl	8009e8c <WM__GetNextIVR>
 8007068:	2800      	cmp	r0, #0
 800706a:	d1f4      	bne.n	8007056 <GUI_DrawLine+0x22>
 800706c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007070:	200000d8 	.word	0x200000d8

08007074 <_Add>:
 8007074:	490e      	ldr	r1, [pc, #56]	; (80070b0 <_Add+0x3c>)
 8007076:	680b      	ldr	r3, [r1, #0]
 8007078:	2b0b      	cmp	r3, #11
 800707a:	b570      	push	{r4, r5, r6, lr}
 800707c:	dc07      	bgt.n	800708e <_Add+0x1a>
 800707e:	2b00      	cmp	r3, #0
 8007080:	dc06      	bgt.n	8007090 <_Add+0x1c>
 8007082:	2200      	movs	r2, #0
 8007084:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007088:	3301      	adds	r3, #1
 800708a:	8090      	strh	r0, [r2, #4]
 800708c:	600b      	str	r3, [r1, #0]
 800708e:	bd70      	pop	{r4, r5, r6, pc}
 8007090:	1d0c      	adds	r4, r1, #4
 8007092:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8007096:	461a      	mov	r2, r3
 8007098:	f934 5d02 	ldrsh.w	r5, [r4, #-2]!
 800709c:	4285      	cmp	r5, r0
 800709e:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 80070a2:	dbef      	blt.n	8007084 <_Add+0x10>
 80070a4:	8065      	strh	r5, [r4, #2]
 80070a6:	4632      	mov	r2, r6
 80070a8:	2e00      	cmp	r6, #0
 80070aa:	d1f5      	bne.n	8007098 <_Add+0x24>
 80070ac:	e7e9      	b.n	8007082 <_Add+0xe>
 80070ae:	bf00      	nop
 80070b0:	20000258 	.word	0x20000258

080070b4 <GL_FillPolygon>:
 80070b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b8:	4f6e      	ldr	r7, [pc, #440]	; (8007274 <GL_FillPolygon+0x1c0>)
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4605      	mov	r5, r0
 80070be:	9101      	str	r1, [sp, #4]
 80070c0:	4690      	mov	r8, r2
 80070c2:	f643 74ff 	movw	r4, #16383	; 0x3fff
 80070c6:	2300      	movs	r3, #0
 80070c8:	9a01      	ldr	r2, [sp, #4]
 80070ca:	4293      	cmp	r3, r2
 80070cc:	db1b      	blt.n	8007106 <GL_FillPolygon+0x52>
 80070ce:	4e6a      	ldr	r6, [pc, #424]	; (8007278 <GL_FillPolygon+0x1c4>)
 80070d0:	6833      	ldr	r3, [r6, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	b16b      	cbz	r3, 80070f2 <GL_FillPolygon+0x3e>
 80070d6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80070da:	9900      	ldr	r1, [sp, #0]
 80070dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070e0:	1a52      	subs	r2, r2, r1
 80070e2:	4297      	cmp	r7, r2
 80070e4:	eba3 0301 	sub.w	r3, r3, r1
 80070e8:	bfa8      	it	ge
 80070ea:	4617      	movge	r7, r2
 80070ec:	429c      	cmp	r4, r3
 80070ee:	bfb8      	it	lt
 80070f0:	461c      	movlt	r4, r3
 80070f2:	9b00      	ldr	r3, [sp, #0]
 80070f4:	441c      	add	r4, r3
 80070f6:	9b00      	ldr	r3, [sp, #0]
 80070f8:	eba4 0903 	sub.w	r9, r4, r3
 80070fc:	454f      	cmp	r7, r9
 80070fe:	da0e      	bge.n	800711e <GL_FillPolygon+0x6a>
 8007100:	b003      	add	sp, #12
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800710a:	3301      	adds	r3, #1
 800710c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007110:	4294      	cmp	r4, r2
 8007112:	bfa8      	it	ge
 8007114:	4614      	movge	r4, r2
 8007116:	4297      	cmp	r7, r2
 8007118:	bfb8      	it	lt
 800711a:	4617      	movlt	r7, r2
 800711c:	e7d4      	b.n	80070c8 <GL_FillPolygon+0x14>
 800711e:	4a57      	ldr	r2, [pc, #348]	; (800727c <GL_FillPolygon+0x1c8>)
 8007120:	2300      	movs	r3, #0
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	469a      	mov	sl, r3
 8007126:	9b01      	ldr	r3, [sp, #4]
 8007128:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800712c:	9b01      	ldr	r3, [sp, #4]
 800712e:	459a      	cmp	sl, r3
 8007130:	db09      	blt.n	8007146 <GL_FillPolygon+0x92>
 8007132:	f04f 0900 	mov.w	r9, #0
 8007136:	4648      	mov	r0, r9
 8007138:	46ca      	mov	sl, r9
 800713a:	4b50      	ldr	r3, [pc, #320]	; (800727c <GL_FillPolygon+0x1c8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	459a      	cmp	sl, r3
 8007140:	db65      	blt.n	800720e <GL_FillPolygon+0x15a>
 8007142:	3401      	adds	r4, #1
 8007144:	e7d7      	b.n	80070f6 <GL_FillPolygon+0x42>
 8007146:	45da      	cmp	sl, fp
 8007148:	eb05 038a 	add.w	r3, r5, sl, lsl #2
 800714c:	bfb4      	ite	lt
 800714e:	f10a 0c01 	addlt.w	ip, sl, #1
 8007152:	f04f 0c00 	movge.w	ip, #0
 8007156:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800715a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800715e:	eb05 020c 	add.w	r2, r5, ip
 8007162:	454b      	cmp	r3, r9
 8007164:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 8007168:	d127      	bne.n	80071ba <GL_FillPolygon+0x106>
 800716a:	4549      	cmp	r1, r9
 800716c:	d006      	beq.n	800717c <GL_FillPolygon+0xc8>
 800716e:	4653      	mov	r3, sl
 8007170:	2000      	movs	r0, #0
 8007172:	4583      	cmp	fp, r0
 8007174:	dc15      	bgt.n	80071a2 <GL_FillPolygon+0xee>
 8007176:	f10a 0a01 	add.w	sl, sl, #1
 800717a:	e7d7      	b.n	800712c <GL_FillPolygon+0x78>
 800717c:	6833      	ldr	r3, [r6, #0]
 800717e:	f935 e02a 	ldrsh.w	lr, [r5, sl, lsl #2]
 8007182:	f935 000c 	ldrsh.w	r0, [r5, ip]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	44c6      	add	lr, r8
 800718a:	4440      	add	r0, r8
 800718c:	4586      	cmp	lr, r0
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	bfbd      	ittte	lt
 8007192:	4602      	movlt	r2, r0
 8007194:	4621      	movlt	r1, r4
 8007196:	4670      	movlt	r0, lr
 8007198:	4672      	movge	r2, lr
 800719a:	bfa8      	it	ge
 800719c:	4621      	movge	r1, r4
 800719e:	4798      	blx	r3
 80071a0:	e7e9      	b.n	8007176 <GL_FillPolygon+0xc2>
 80071a2:	b143      	cbz	r3, 80071b6 <GL_FillPolygon+0x102>
 80071a4:	3b01      	subs	r3, #1
 80071a6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80071aa:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80071ae:	4591      	cmp	r9, r2
 80071b0:	d141      	bne.n	8007236 <GL_FillPolygon+0x182>
 80071b2:	3001      	adds	r0, #1
 80071b4:	e7dd      	b.n	8007172 <GL_FillPolygon+0xbe>
 80071b6:	465b      	mov	r3, fp
 80071b8:	e7f5      	b.n	80071a6 <GL_FillPolygon+0xf2>
 80071ba:	4549      	cmp	r1, r9
 80071bc:	d0db      	beq.n	8007176 <GL_FillPolygon+0xc2>
 80071be:	db04      	blt.n	80071ca <GL_FillPolygon+0x116>
 80071c0:	454b      	cmp	r3, r9
 80071c2:	dd49      	ble.n	8007258 <GL_FillPolygon+0x1a4>
 80071c4:	4549      	cmp	r1, r9
 80071c6:	dcd6      	bgt.n	8007176 <GL_FillPolygon+0xc2>
 80071c8:	e001      	b.n	80071ce <GL_FillPolygon+0x11a>
 80071ca:	454b      	cmp	r3, r9
 80071cc:	dbd3      	blt.n	8007176 <GL_FillPolygon+0xc2>
 80071ce:	428b      	cmp	r3, r1
 80071d0:	dc48      	bgt.n	8007264 <GL_FillPolygon+0x1b0>
 80071d2:	454b      	cmp	r3, r9
 80071d4:	dccf      	bgt.n	8007176 <GL_FillPolygon+0xc2>
 80071d6:	4549      	cmp	r1, r9
 80071d8:	dbcd      	blt.n	8007176 <GL_FillPolygon+0xc2>
 80071da:	f935 e02a 	ldrsh.w	lr, [r5, sl, lsl #2]
 80071de:	f935 200c 	ldrsh.w	r2, [r5, ip]
 80071e2:	eba9 0003 	sub.w	r0, r9, r3
 80071e6:	eba2 020e 	sub.w	r2, r2, lr
 80071ea:	4342      	muls	r2, r0
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	eba1 0303 	sub.w	r3, r1, r3
 80071f2:	bfdd      	ittte	le
 80071f4:	1058      	asrle	r0, r3, #1
 80071f6:	f100 30ff 	addle.w	r0, r0, #4294967295	; 0xffffffff
 80071fa:	1a12      	suble	r2, r2, r0
 80071fc:	eb02 0263 	addgt.w	r2, r2, r3, asr #1
 8007200:	fb92 f2f3 	sdiv	r2, r2, r3
 8007204:	eb02 000e 	add.w	r0, r2, lr
 8007208:	f7ff ff34 	bl	8007074 <_Add>
 800720c:	e7b3      	b.n	8007176 <GL_FillPolygon+0xc2>
 800720e:	4b1c      	ldr	r3, [pc, #112]	; (8007280 <GL_FillPolygon+0x1cc>)
 8007210:	f933 b01a 	ldrsh.w	fp, [r3, sl, lsl #1]
 8007214:	f1b9 0f00 	cmp.w	r9, #0
 8007218:	d007      	beq.n	800722a <GL_FillPolygon+0x176>
 800721a:	6833      	ldr	r3, [r6, #0]
 800721c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800721e:	eb08 020b 	add.w	r2, r8, fp
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4621      	mov	r1, r4
 8007226:	4440      	add	r0, r8
 8007228:	4798      	blx	r3
 800722a:	f089 0901 	eor.w	r9, r9, #1
 800722e:	f10a 0a01 	add.w	sl, sl, #1
 8007232:	4658      	mov	r0, fp
 8007234:	e781      	b.n	800713a <GL_FillPolygon+0x86>
 8007236:	eba2 0209 	sub.w	r2, r2, r9
 800723a:	eba1 0109 	sub.w	r1, r1, r9
 800723e:	ea92 0f01 	teq	r2, r1
 8007242:	f935 002a 	ldrsh.w	r0, [r5, sl, lsl #2]
 8007246:	d4df      	bmi.n	8007208 <GL_FillPolygon+0x154>
 8007248:	6833      	ldr	r3, [r6, #0]
 800724a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724c:	eb00 0208 	add.w	r2, r0, r8
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4621      	mov	r1, r4
 8007254:	4610      	mov	r0, r2
 8007256:	e7a2      	b.n	800719e <GL_FillPolygon+0xea>
 8007258:	428b      	cmp	r3, r1
 800725a:	ddbe      	ble.n	80071da <GL_FillPolygon+0x126>
 800725c:	4549      	cmp	r1, r9
 800725e:	dc8a      	bgt.n	8007176 <GL_FillPolygon+0xc2>
 8007260:	454b      	cmp	r3, r9
 8007262:	db88      	blt.n	8007176 <GL_FillPolygon+0xc2>
 8007264:	4618      	mov	r0, r3
 8007266:	f935 e00c 	ldrsh.w	lr, [r5, ip]
 800726a:	f935 202a 	ldrsh.w	r2, [r5, sl, lsl #2]
 800726e:	460b      	mov	r3, r1
 8007270:	4601      	mov	r1, r0
 8007272:	e7b6      	b.n	80071e2 <GL_FillPolygon+0x12e>
 8007274:	ffffc001 	.word	0xffffc001
 8007278:	200000d8 	.word	0x200000d8
 800727c:	20000258 	.word	0x20000258
 8007280:	2000025c 	.word	0x2000025c

08007284 <GUI_StoreKey>:
 8007284:	4b02      	ldr	r3, [pc, #8]	; (8007290 <GUI_StoreKey+0xc>)
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	b902      	cbnz	r2, 800728c <GUI_StoreKey+0x8>
 800728a:	6018      	str	r0, [r3, #0]
 800728c:	f000 b862 	b.w	8007354 <GUI_SignalEvent>
 8007290:	20000274 	.word	0x20000274

08007294 <GUI_PollKeyMsg>:
 8007294:	4a09      	ldr	r2, [pc, #36]	; (80072bc <GUI_PollKeyMsg+0x28>)
 8007296:	6813      	ldr	r3, [r2, #0]
 8007298:	6851      	ldr	r1, [r2, #4]
 800729a:	428b      	cmp	r3, r1
 800729c:	b510      	push	{r4, lr}
 800729e:	d00b      	beq.n	80072b8 <GUI_PollKeyMsg+0x24>
 80072a0:	4c07      	ldr	r4, [pc, #28]	; (80072c0 <GUI_PollKeyMsg+0x2c>)
 80072a2:	42a3      	cmp	r3, r4
 80072a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80072a8:	bf14      	ite	ne
 80072aa:	3308      	addne	r3, #8
 80072ac:	3b50      	subeq	r3, #80	; 0x50
 80072ae:	6013      	str	r3, [r2, #0]
 80072b0:	f003 fad2 	bl	800a858 <WM_OnKey>
 80072b4:	2001      	movs	r0, #1
 80072b6:	bd10      	pop	{r4, pc}
 80072b8:	2000      	movs	r0, #0
 80072ba:	bd10      	pop	{r4, pc}
 80072bc:	200000ec 	.word	0x200000ec
 80072c0:	200002c8 	.word	0x200002c8

080072c4 <GUI_Delay>:
 80072c4:	b570      	push	{r4, r5, r6, lr}
 80072c6:	4604      	mov	r4, r0
 80072c8:	f7f9 f924 	bl	8000514 <GUI_X_GetTime>
 80072cc:	4e08      	ldr	r6, [pc, #32]	; (80072f0 <GUI_Delay+0x2c>)
 80072ce:	4404      	add	r4, r0
 80072d0:	f7f9 f920 	bl	8000514 <GUI_X_GetTime>
 80072d4:	1a25      	subs	r5, r4, r0
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	dc00      	bgt.n	80072dc <GUI_Delay+0x18>
 80072da:	bd70      	pop	{r4, r5, r6, pc}
 80072dc:	f7fe feb8 	bl	8006050 <GUI_Exec>
 80072e0:	6830      	ldr	r0, [r6, #0]
 80072e2:	42a8      	cmp	r0, r5
 80072e4:	bfa8      	it	ge
 80072e6:	4628      	movge	r0, r5
 80072e8:	f7f9 f920 	bl	800052c <GUI_X_Delay>
 80072ec:	e7f0      	b.n	80072d0 <GUI_Delay+0xc>
 80072ee:	bf00      	nop
 80072f0:	200000f4 	.word	0x200000f4

080072f4 <GUI_UC__GetCharCodeInc>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	4e08      	ldr	r6, [pc, #32]	; (8007318 <GUI_UC__GetCharCodeInc+0x24>)
 80072f8:	6804      	ldr	r4, [r0, #0]
 80072fa:	6833      	ldr	r3, [r6, #0]
 80072fc:	4605      	mov	r5, r0
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4620      	mov	r0, r4
 8007302:	4798      	blx	r3
 8007304:	6833      	ldr	r3, [r6, #0]
 8007306:	4607      	mov	r7, r0
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	4620      	mov	r0, r4
 800730c:	4798      	blx	r3
 800730e:	4420      	add	r0, r4
 8007310:	6028      	str	r0, [r5, #0]
 8007312:	4638      	mov	r0, r7
 8007314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007316:	bf00      	nop
 8007318:	200089b0 	.word	0x200089b0

0800731c <GUI_UC__NumChars2NumBytes>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	4f07      	ldr	r7, [pc, #28]	; (800733c <GUI_UC__NumChars2NumBytes+0x20>)
 8007320:	4606      	mov	r6, r0
 8007322:	460d      	mov	r5, r1
 8007324:	2400      	movs	r4, #0
 8007326:	b90d      	cbnz	r5, 800732c <GUI_UC__NumChars2NumBytes+0x10>
 8007328:	4620      	mov	r0, r4
 800732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	4630      	mov	r0, r6
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	4798      	blx	r3
 8007334:	3d01      	subs	r5, #1
 8007336:	4406      	add	r6, r0
 8007338:	4404      	add	r4, r0
 800733a:	e7f4      	b.n	8007326 <GUI_UC__NumChars2NumBytes+0xa>
 800733c:	200089b0 	.word	0x200089b0

08007340 <_GetCharCode>:
 8007340:	7800      	ldrb	r0, [r0, #0]
 8007342:	4770      	bx	lr

08007344 <_GetCharSize>:
 8007344:	2001      	movs	r0, #1
 8007346:	4770      	bx	lr

08007348 <_CalcSizeOfChar>:
 8007348:	2001      	movs	r0, #1
 800734a:	4770      	bx	lr

0800734c <_Encode>:
 800734c:	7001      	strb	r1, [r0, #0]
 800734e:	2001      	movs	r0, #1
 8007350:	4770      	bx	lr
	...

08007354 <GUI_SignalEvent>:
 8007354:	4b02      	ldr	r3, [pc, #8]	; (8007360 <GUI_SignalEvent+0xc>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	b103      	cbz	r3, 800735c <GUI_SignalEvent+0x8>
 800735a:	4718      	bx	r3
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200002d4 	.word	0x200002d4

08007364 <LCD_Color2Index_1>:
 8007364:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8007368:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800736c:	4413      	add	r3, r2
 800736e:	fa53 f080 	uxtab	r0, r3, r0
 8007372:	f200 107f 	addw	r0, r0, #383	; 0x17f
 8007376:	f240 23fd 	movw	r3, #765	; 0x2fd
 800737a:	fb90 f0f3 	sdiv	r0, r0, r3
 800737e:	4770      	bx	lr

08007380 <_Index2Color_1>:
 8007380:	f030 437f 	bics.w	r3, r0, #4278190080	; 0xff000000
 8007384:	bf14      	ite	ne
 8007386:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800738a:	f04f 407f 	moveq.w	r0, #4278190080	; 0xff000000
 800738e:	4770      	bx	lr

08007390 <_GetIndexMask_1>:
 8007390:	2001      	movs	r0, #1
 8007392:	4770      	bx	lr

08007394 <_ReadData>:
 8007394:	7800      	ldrb	r0, [r0, #0]
 8007396:	4770      	bx	lr

08007398 <_WriteData>:
 8007398:	7001      	strb	r1, [r0, #0]
 800739a:	4770      	bx	lr

0800739c <_Write>:
 800739c:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800739e:	4608      	mov	r0, r1
 80073a0:	4718      	bx	r3

080073a2 <_OnExit>:
 80073a2:	b538      	push	{r3, r4, r5, lr}
 80073a4:	6884      	ldr	r4, [r0, #8]
 80073a6:	4605      	mov	r5, r0
 80073a8:	b1b4      	cbz	r4, 80073d8 <_OnExit+0x36>
 80073aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80073ac:	b118      	cbz	r0, 80073b6 <_OnExit+0x14>
 80073ae:	f7fe f9f9 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 80073b2:	2300      	movs	r3, #0
 80073b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80073b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80073b8:	b118      	cbz	r0, 80073c2 <_OnExit+0x20>
 80073ba:	f7fe f9f3 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 80073be:	2300      	movs	r3, #0
 80073c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80073c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80073c4:	b118      	cbz	r0, 80073ce <_OnExit+0x2c>
 80073c6:	f7fe f9ed 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 80073ca:	2300      	movs	r3, #0
 80073cc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80073ce:	4620      	mov	r0, r4
 80073d0:	f7fe f9e8 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 80073d4:	2300      	movs	r3, #0
 80073d6:	60ab      	str	r3, [r5, #8]
 80073d8:	bd38      	pop	{r3, r4, r5, pc}
	...

080073dc <_InitOnce.isra.0>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	6805      	ldr	r5, [r0, #0]
 80073e0:	4604      	mov	r4, r0
 80073e2:	b97d      	cbnz	r5, 8007404 <_InitOnce.isra.0+0x28>
 80073e4:	20c8      	movs	r0, #200	; 0xc8
 80073e6:	f7fe fac3 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 80073ea:	4b07      	ldr	r3, [pc, #28]	; (8007408 <_InitOnce.isra.0+0x2c>)
 80073ec:	6020      	str	r0, [r4, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	22c8      	movs	r2, #200	; 0xc8
 80073f2:	4629      	mov	r1, r5
 80073f4:	4798      	blx	r3
 80073f6:	6823      	ldr	r3, [r4, #0]
 80073f8:	4a04      	ldr	r2, [pc, #16]	; (800740c <_InitOnce.isra.0+0x30>)
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54
 80073fc:	4a04      	ldr	r2, [pc, #16]	; (8007410 <_InitOnce.isra.0+0x34>)
 80073fe:	659a      	str	r2, [r3, #88]	; 0x58
 8007400:	4a04      	ldr	r2, [pc, #16]	; (8007414 <_InitOnce.isra.0+0x38>)
 8007402:	65da      	str	r2, [r3, #92]	; 0x5c
 8007404:	2000      	movs	r0, #0
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	200000d4 	.word	0x200000d4
 800740c:	08007395 	.word	0x08007395
 8007410:	08007399 	.word	0x08007399
 8007414:	0800739d 	.word	0x0800739d

08007418 <_SetSize>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	4606      	mov	r6, r0
 800741c:	3008      	adds	r0, #8
 800741e:	460d      	mov	r5, r1
 8007420:	4614      	mov	r4, r2
 8007422:	f7ff ffdb 	bl	80073dc <_InitOnce.isra.0>
 8007426:	68b3      	ldr	r3, [r6, #8]
 8007428:	b13b      	cbz	r3, 800743a <_SetSize+0x22>
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	601d      	str	r5, [r3, #0]
 800742e:	605c      	str	r4, [r3, #4]
 8007430:	b902      	cbnz	r2, 8007434 <_SetSize+0x1c>
 8007432:	609d      	str	r5, [r3, #8]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	b902      	cbnz	r2, 800743a <_SetSize+0x22>
 8007438:	60dc      	str	r4, [r3, #12]
 800743a:	bd70      	pop	{r4, r5, r6, pc}

0800743c <_SetVSize>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4604      	mov	r4, r0
 8007440:	3008      	adds	r0, #8
 8007442:	460e      	mov	r6, r1
 8007444:	4615      	mov	r5, r2
 8007446:	f7ff ffc9 	bl	80073dc <_InitOnce.isra.0>
 800744a:	68a3      	ldr	r3, [r4, #8]
 800744c:	b10b      	cbz	r3, 8007452 <_SetVSize+0x16>
 800744e:	609e      	str	r6, [r3, #8]
 8007450:	60dd      	str	r5, [r3, #12]
 8007452:	bd70      	pop	{r4, r5, r6, pc}

08007454 <GUIDRV__SPage_SetOrg>:
 8007454:	b507      	push	{r0, r1, r2, lr}
 8007456:	6980      	ldr	r0, [r0, #24]
 8007458:	e88d 0006 	stmia.w	sp, {r1, r2}
 800745c:	466a      	mov	r2, sp
 800745e:	2103      	movs	r1, #3
 8007460:	f7f9 f8d2 	bl	8000608 <LCD_X_DisplayDriver>
 8007464:	b003      	add	sp, #12
 8007466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800746c <GUIDRV__SPage_GetDevFunc>:
 800746c:	290b      	cmp	r1, #11
 800746e:	d006      	beq.n	800747e <GUIDRV__SPage_GetDevFunc+0x12>
 8007470:	2930      	cmp	r1, #48	; 0x30
 8007472:	d006      	beq.n	8007482 <GUIDRV__SPage_GetDevFunc+0x16>
 8007474:	290a      	cmp	r1, #10
 8007476:	4804      	ldr	r0, [pc, #16]	; (8007488 <GUIDRV__SPage_GetDevFunc+0x1c>)
 8007478:	bf18      	it	ne
 800747a:	2000      	movne	r0, #0
 800747c:	4770      	bx	lr
 800747e:	4803      	ldr	r0, [pc, #12]	; (800748c <GUIDRV__SPage_GetDevFunc+0x20>)
 8007480:	4770      	bx	lr
 8007482:	4803      	ldr	r0, [pc, #12]	; (8007490 <GUIDRV__SPage_GetDevFunc+0x24>)
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	0800743d 	.word	0x0800743d
 800748c:	08007419 	.word	0x08007419
 8007490:	080073a3 	.word	0x080073a3

08007494 <GUIDRV__SPage_GetDevProp>:
 8007494:	3901      	subs	r1, #1
 8007496:	6883      	ldr	r3, [r0, #8]
 8007498:	290a      	cmp	r1, #10
 800749a:	d807      	bhi.n	80074ac <GUIDRV__SPage_GetDevProp+0x18>
 800749c:	e8df f001 	tbb	[pc, r1]
 80074a0:	0f0d0b09 	.word	0x0f0d0b09
 80074a4:	06060606 	.word	0x06060606
 80074a8:	1106      	.short	0x1106
 80074aa:	11          	.byte	0x11
 80074ab:	00          	.byte	0x00
 80074ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b0:	4770      	bx	lr
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	6858      	ldr	r0, [r3, #4]
 80074b8:	4770      	bx	lr
 80074ba:	6898      	ldr	r0, [r3, #8]
 80074bc:	4770      	bx	lr
 80074be:	68d8      	ldr	r0, [r3, #12]
 80074c0:	4770      	bx	lr
 80074c2:	2001      	movs	r0, #1
 80074c4:	4770      	bx	lr

080074c6 <GUIDRV__SPage_GetRect>:
 80074c6:	6882      	ldr	r2, [r0, #8]
 80074c8:	2300      	movs	r3, #0
 80074ca:	800b      	strh	r3, [r1, #0]
 80074cc:	804b      	strh	r3, [r1, #2]
 80074ce:	6893      	ldr	r3, [r2, #8]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	808b      	strh	r3, [r1, #4]
 80074d4:	68d3      	ldr	r3, [r2, #12]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	80cb      	strh	r3, [r1, #6]
 80074da:	4770      	bx	lr

080074dc <GUIDRV__SPage_Init>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	3008      	adds	r0, #8
 80074e2:	f7ff ff7b 	bl	80073dc <_InitOnce.isra.0>
 80074e6:	69a0      	ldr	r0, [r4, #24]
 80074e8:	2200      	movs	r2, #0
 80074ea:	2101      	movs	r1, #1
 80074ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f0:	f7f9 b88a 	b.w	8000608 <LCD_X_DisplayDriver>

080074f4 <GUIDRV_SPage_Config>:
 80074f4:	b538      	push	{r3, r4, r5, lr}
 80074f6:	4605      	mov	r5, r0
 80074f8:	3008      	adds	r0, #8
 80074fa:	460c      	mov	r4, r1
 80074fc:	f7ff ff6e 	bl	80073dc <_InitOnce.isra.0>
 8007500:	68ab      	ldr	r3, [r5, #8]
 8007502:	b11b      	cbz	r3, 800750c <GUIDRV_SPage_Config+0x18>
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	61da      	str	r2, [r3, #28]
 8007508:	6862      	ldr	r2, [r4, #4]
 800750a:	621a      	str	r2, [r3, #32]
 800750c:	bd38      	pop	{r3, r4, r5, pc}

0800750e <GUIDRV_SPage_SetBus8>:
 800750e:	b538      	push	{r3, r4, r5, lr}
 8007510:	4604      	mov	r4, r0
 8007512:	3008      	adds	r0, #8
 8007514:	460d      	mov	r5, r1
 8007516:	f7ff ff61 	bl	80073dc <_InitOnce.isra.0>
 800751a:	68a0      	ldr	r0, [r4, #8]
 800751c:	b120      	cbz	r0, 8007528 <GUIDRV_SPage_SetBus8+0x1a>
 800751e:	2268      	movs	r2, #104	; 0x68
 8007520:	4629      	mov	r1, r5
 8007522:	3060      	adds	r0, #96	; 0x60
 8007524:	f007 f802 	bl	800e52c <memcpy>
 8007528:	bd38      	pop	{r3, r4, r5, pc}

0800752a <_XorPixel>:
 800752a:	68c3      	ldr	r3, [r0, #12]
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	460e      	mov	r6, r1
 8007536:	4617      	mov	r7, r2
 8007538:	4798      	blx	r3
 800753a:	6923      	ldr	r3, [r4, #16]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	4680      	mov	r8, r0
 8007540:	4798      	blx	r3
 8007542:	68e3      	ldr	r3, [r4, #12]
 8007544:	699d      	ldr	r5, [r3, #24]
 8007546:	463a      	mov	r2, r7
 8007548:	ea88 0300 	eor.w	r3, r8, r0
 800754c:	4631      	mov	r1, r6
 800754e:	4620      	mov	r0, r4
 8007550:	46ac      	mov	ip, r5
 8007552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	4760      	bx	ip

08007558 <_DrawHLine>:
 8007558:	b513      	push	{r0, r1, r4, lr}
 800755a:	68c4      	ldr	r4, [r0, #12]
 800755c:	9200      	str	r2, [sp, #0]
 800755e:	6924      	ldr	r4, [r4, #16]
 8007560:	47a0      	blx	r4
 8007562:	b002      	add	sp, #8
 8007564:	bd10      	pop	{r4, pc}

08007566 <_DrawVLine>:
 8007566:	b513      	push	{r0, r1, r4, lr}
 8007568:	68c4      	ldr	r4, [r0, #12]
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	6924      	ldr	r4, [r4, #16]
 800756e:	460b      	mov	r3, r1
 8007570:	47a0      	blx	r4
 8007572:	b002      	add	sp, #8
 8007574:	bd10      	pop	{r4, pc}
	...

08007578 <_GetDevData>:
 8007578:	2901      	cmp	r1, #1
 800757a:	4802      	ldr	r0, [pc, #8]	; (8007584 <_GetDevData+0xc>)
 800757c:	bf18      	it	ne
 800757e:	2000      	movne	r0, #0
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	08010c8c 	.word	0x08010c8c

08007588 <_GetDevProp_1C1>:
 8007588:	f1a1 020c 	sub.w	r2, r1, #12
 800758c:	2a02      	cmp	r2, #2
 800758e:	d907      	bls.n	80075a0 <_GetDevProp_1C1+0x18>
 8007590:	2908      	cmp	r1, #8
 8007592:	d007      	beq.n	80075a4 <_GetDevProp_1C1+0x1c>
 8007594:	2909      	cmp	r1, #9
 8007596:	d101      	bne.n	800759c <_GetDevProp_1C1+0x14>
 8007598:	2002      	movs	r0, #2
 800759a:	4770      	bx	lr
 800759c:	f7ff bf7a 	b.w	8007494 <GUIDRV__SPage_GetDevProp>
 80075a0:	2000      	movs	r0, #0
 80075a2:	4770      	bx	lr
 80075a4:	2001      	movs	r0, #1
 80075a6:	4770      	bx	lr

080075a8 <_GetDevFunc>:
 80075a8:	290c      	cmp	r1, #12
 80075aa:	d005      	beq.n	80075b8 <_GetDevFunc+0x10>
 80075ac:	290d      	cmp	r1, #13
 80075ae:	d101      	bne.n	80075b4 <_GetDevFunc+0xc>
 80075b0:	4802      	ldr	r0, [pc, #8]	; (80075bc <_GetDevFunc+0x14>)
 80075b2:	4770      	bx	lr
 80075b4:	f7ff bf5a 	b.w	800746c <GUIDRV__SPage_GetDevFunc>
 80075b8:	4801      	ldr	r0, [pc, #4]	; (80075c0 <_GetDevFunc+0x18>)
 80075ba:	4770      	bx	lr
 80075bc:	080083e7 	.word	0x080083e7
 80075c0:	080075c5 	.word	0x080075c5

080075c4 <_Init>:
 80075c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c6:	68c3      	ldr	r3, [r0, #12]
 80075c8:	6884      	ldr	r4, [r0, #8]
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	210e      	movs	r1, #14
 80075ce:	4606      	mov	r6, r0
 80075d0:	4798      	blx	r3
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	b910      	cbnz	r0, 80075de <_Init+0x1a>
 80075d8:	4611      	mov	r1, r2
 80075da:	461a      	mov	r2, r3
 80075dc:	460b      	mov	r3, r1
 80075de:	6a25      	ldr	r5, [r4, #32]
 80075e0:	6362      	str	r2, [r4, #52]	; 0x34
 80075e2:	441d      	add	r5, r3
 80075e4:	3507      	adds	r5, #7
 80075e6:	10ed      	asrs	r5, r5, #3
 80075e8:	2101      	movs	r1, #1
 80075ea:	61a5      	str	r5, [r4, #24]
 80075ec:	4355      	muls	r5, r2
 80075ee:	6161      	str	r1, [r4, #20]
 80075f0:	4628      	mov	r0, r5
 80075f2:	f7fe f9bd 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 80075f6:	62a0      	str	r0, [r4, #40]	; 0x28
 80075f8:	69a0      	ldr	r0, [r4, #24]
 80075fa:	4f10      	ldr	r7, [pc, #64]	; (800763c <_Init+0x78>)
 80075fc:	0040      	lsls	r0, r0, #1
 80075fe:	f7fe f9b7 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 8007602:	63a0      	str	r0, [r4, #56]	; 0x38
 8007604:	69a0      	ldr	r0, [r4, #24]
 8007606:	0040      	lsls	r0, r0, #1
 8007608:	f7fe f9b2 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007610:	462a      	mov	r2, r5
 8007612:	2100      	movs	r1, #0
 8007614:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007616:	4798      	blx	r3
 8007618:	69a2      	ldr	r2, [r4, #24]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800761e:	0052      	lsls	r2, r2, #1
 8007620:	21ff      	movs	r1, #255	; 0xff
 8007622:	4798      	blx	r3
 8007624:	69a2      	ldr	r2, [r4, #24]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800762a:	0052      	lsls	r2, r2, #1
 800762c:	2100      	movs	r1, #0
 800762e:	4798      	blx	r3
 8007630:	4630      	mov	r0, r6
 8007632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007636:	f7ff bf51 	b.w	80074dc <GUIDRV__SPage_Init>
 800763a:	bf00      	nop
 800763c:	200000d4 	.word	0x200000d4

08007640 <_GetPixelIndex_1C1>:
 8007640:	b510      	push	{r4, lr}
 8007642:	6880      	ldr	r0, [r0, #8]
 8007644:	6a04      	ldr	r4, [r0, #32]
 8007646:	4414      	add	r4, r2
 8007648:	10e2      	asrs	r2, r4, #3
 800764a:	f000 feaa 	bl	80083a2 <GUIDRV__SPage_ReadCache>
 800764e:	f004 0407 	and.w	r4, r4, #7
 8007652:	4120      	asrs	r0, r4
 8007654:	f000 0001 	and.w	r0, r0, #1
 8007658:	bd10      	pop	{r4, pc}

0800765a <_SetPixelIndex_1C1>:
 800765a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765e:	6886      	ldr	r6, [r0, #8]
 8007660:	6a34      	ldr	r4, [r6, #32]
 8007662:	4414      	add	r4, r2
 8007664:	10e7      	asrs	r7, r4, #3
 8007666:	463a      	mov	r2, r7
 8007668:	4630      	mov	r0, r6
 800766a:	461d      	mov	r5, r3
 800766c:	4688      	mov	r8, r1
 800766e:	f000 fe98 	bl	80083a2 <GUIDRV__SPage_ReadCache>
 8007672:	f004 0407 	and.w	r4, r4, #7
 8007676:	2301      	movs	r3, #1
 8007678:	40a3      	lsls	r3, r4
 800767a:	ea20 0003 	bic.w	r0, r0, r3
 800767e:	fa05 f404 	lsl.w	r4, r5, r4
 8007682:	4304      	orrs	r4, r0
 8007684:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8007688:	4623      	mov	r3, r4
 800768a:	463a      	mov	r2, r7
 800768c:	4641      	mov	r1, r8
 800768e:	4630      	mov	r0, r6
 8007690:	f000 fe68 	bl	8008364 <GUIDRV__SPage_WriteCache>
 8007694:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8007696:	b94b      	cbnz	r3, 80076ac <_SetPixelIndex_1C1+0x52>
 8007698:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800769a:	4630      	mov	r0, r6
 800769c:	463a      	mov	r2, r7
 800769e:	4641      	mov	r1, r8
 80076a0:	4798      	blx	r3
 80076a2:	6e73      	ldr	r3, [r6, #100]	; 0x64
 80076a4:	4620      	mov	r0, r4
 80076a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076aa:	4718      	bx	r3
 80076ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076b0 <_FillRect>:
 80076b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	6886      	ldr	r6, [r0, #8]
 80076b6:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 800785c <_FillRect+0x1ac>
 80076ba:	6834      	ldr	r4, [r6, #0]
 80076bc:	461f      	mov	r7, r3
 80076be:	6a33      	ldr	r3, [r6, #32]
 80076c0:	eb03 0a02 	add.w	sl, r3, r2
 80076c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076c6:	4688      	mov	r8, r1
 80076c8:	441a      	add	r2, r3
 80076ca:	ea4f 01ea 	mov.w	r1, sl, asr #3
 80076ce:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80076d0:	fb04 8401 	mla	r4, r4, r1, r8
 80076d4:	441c      	add	r4, r3
 80076d6:	f8db 3000 	ldr.w	r3, [fp]
 80076da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076dc:	eba2 050a 	sub.w	r5, r2, sl
 80076e0:	f8d3 9000 	ldr.w	r9, [r3]
 80076e4:	9700      	str	r7, [sp, #0]
 80076e6:	4643      	mov	r3, r8
 80076e8:	10d2      	asrs	r2, r2, #3
 80076ea:	4630      	mov	r0, r6
 80076ec:	f000 fe65 	bl	80083ba <GUIDRV__SPage_AddDirtyRect>
 80076f0:	f8db 3000 	ldr.w	r3, [fp]
 80076f4:	7c19      	ldrb	r1, [r3, #16]
 80076f6:	f011 0101 	ands.w	r1, r1, #1
 80076fa:	f105 0501 	add.w	r5, r5, #1
 80076fe:	f00a 0207 	and.w	r2, sl, #7
 8007702:	d049      	beq.n	8007798 <_FillRect+0xe8>
 8007704:	b1c2      	cbz	r2, 8007738 <_FillRect+0x88>
 8007706:	f1c2 0108 	rsb	r1, r2, #8
 800770a:	428d      	cmp	r5, r1
 800770c:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8007710:	bfb8      	it	lt
 8007712:	1b4d      	sublt	r5, r1, r5
 8007714:	fa03 f202 	lsl.w	r2, r3, r2
 8007718:	bfbf      	itttt	lt
 800771a:	412b      	asrlt	r3, r5
 800771c:	401a      	andlt	r2, r3
 800771e:	b2d2      	uxtblt	r2, r2
 8007720:	2500      	movlt	r5, #0
 8007722:	bfa4      	itt	ge
 8007724:	b2d2      	uxtbge	r2, r2
 8007726:	1a6d      	subge	r5, r5, r1
 8007728:	4623      	mov	r3, r4
 800772a:	eba8 0004 	sub.w	r0, r8, r4
 800772e:	1819      	adds	r1, r3, r0
 8007730:	428f      	cmp	r7, r1
 8007732:	da07      	bge.n	8007744 <_FillRect+0x94>
 8007734:	6833      	ldr	r3, [r6, #0]
 8007736:	441c      	add	r4, r3
 8007738:	2d07      	cmp	r5, #7
 800773a:	dd15      	ble.n	8007768 <_FillRect+0xb8>
 800773c:	4623      	mov	r3, r4
 800773e:	eba8 0104 	sub.w	r1, r8, r4
 8007742:	e00a      	b.n	800775a <_FillRect+0xaa>
 8007744:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007748:	4051      	eors	r1, r2
 800774a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800774e:	e7ee      	b.n	800772e <_FillRect+0x7e>
 8007750:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007754:	43d2      	mvns	r2, r2
 8007756:	f803 2c01 	strb.w	r2, [r3, #-1]
 800775a:	185a      	adds	r2, r3, r1
 800775c:	4297      	cmp	r7, r2
 800775e:	daf7      	bge.n	8007750 <_FillRect+0xa0>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	3d08      	subs	r5, #8
 8007764:	441c      	add	r4, r3
 8007766:	e7e7      	b.n	8007738 <_FillRect+0x88>
 8007768:	b92d      	cbnz	r5, 8007776 <_FillRect+0xc6>
 800776a:	4630      	mov	r0, r6
 800776c:	b003      	add	sp, #12
 800776e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007772:	f000 be1d 	b.w	80083b0 <GUIDRV__SPage_FlushCache>
 8007776:	f1c5 0308 	rsb	r3, r5, #8
 800777a:	25ff      	movs	r5, #255	; 0xff
 800777c:	411d      	asrs	r5, r3
 800777e:	b2ed      	uxtb	r5, r5
 8007780:	eba8 0804 	sub.w	r8, r8, r4
 8007784:	eb04 0308 	add.w	r3, r4, r8
 8007788:	429f      	cmp	r7, r3
 800778a:	dbee      	blt.n	800776a <_FillRect+0xba>
 800778c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007790:	406b      	eors	r3, r5
 8007792:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007796:	e7f5      	b.n	8007784 <_FillRect+0xd4>
 8007798:	b352      	cbz	r2, 80077f0 <_FillRect+0x140>
 800779a:	f1c2 0008 	rsb	r0, r2, #8
 800779e:	4285      	cmp	r5, r0
 80077a0:	f04f 03ff 	mov.w	r3, #255	; 0xff
 80077a4:	bfb8      	it	lt
 80077a6:	1b45      	sublt	r5, r0, r5
 80077a8:	fa03 f202 	lsl.w	r2, r3, r2
 80077ac:	bfbb      	ittet	lt
 80077ae:	412b      	asrlt	r3, r5
 80077b0:	401a      	andlt	r2, r3
 80077b2:	1a2d      	subge	r5, r5, r0
 80077b4:	b2d2      	uxtblt	r2, r2
 80077b6:	bfb4      	ite	lt
 80077b8:	460d      	movlt	r5, r1
 80077ba:	b2d2      	uxtbge	r2, r2
 80077bc:	eba8 0004 	sub.w	r0, r8, r4
 80077c0:	4623      	mov	r3, r4
 80077c2:	f1b9 0f00 	cmp.w	r9, #0
 80077c6:	d10e      	bne.n	80077e6 <_FillRect+0x136>
 80077c8:	43d2      	mvns	r2, r2
 80077ca:	1819      	adds	r1, r3, r0
 80077cc:	428f      	cmp	r7, r1
 80077ce:	db0d      	blt.n	80077ec <_FillRect+0x13c>
 80077d0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80077d4:	4011      	ands	r1, r2
 80077d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077da:	e7f6      	b.n	80077ca <_FillRect+0x11a>
 80077dc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80077e0:	4311      	orrs	r1, r2
 80077e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077e6:	1819      	adds	r1, r3, r0
 80077e8:	428f      	cmp	r7, r1
 80077ea:	daf7      	bge.n	80077dc <_FillRect+0x12c>
 80077ec:	6833      	ldr	r3, [r6, #0]
 80077ee:	441c      	add	r4, r3
 80077f0:	eba7 0a08 	sub.w	sl, r7, r8
 80077f4:	f8df b068 	ldr.w	fp, [pc, #104]	; 8007860 <_FillRect+0x1b0>
 80077f8:	f10a 0a01 	add.w	sl, sl, #1
 80077fc:	2d07      	cmp	r5, #7
 80077fe:	dc16      	bgt.n	800782e <_FillRect+0x17e>
 8007800:	2d00      	cmp	r5, #0
 8007802:	d0b2      	beq.n	800776a <_FillRect+0xba>
 8007804:	f1c5 0508 	rsb	r5, r5, #8
 8007808:	23ff      	movs	r3, #255	; 0xff
 800780a:	fa43 f505 	asr.w	r5, r3, r5
 800780e:	eba8 0804 	sub.w	r8, r8, r4
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	d11b      	bne.n	8007850 <_FillRect+0x1a0>
 8007818:	43ed      	mvns	r5, r5
 800781a:	eb04 0308 	add.w	r3, r4, r8
 800781e:	429f      	cmp	r7, r3
 8007820:	dba3      	blt.n	800776a <_FillRect+0xba>
 8007822:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007826:	402b      	ands	r3, r5
 8007828:	f804 3c01 	strb.w	r3, [r4, #-1]
 800782c:	e7f5      	b.n	800781a <_FillRect+0x16a>
 800782e:	f1c9 0100 	rsb	r1, r9, #0
 8007832:	4620      	mov	r0, r4
 8007834:	f8db 3000 	ldr.w	r3, [fp]
 8007838:	4652      	mov	r2, sl
 800783a:	b2c9      	uxtb	r1, r1
 800783c:	4798      	blx	r3
 800783e:	6833      	ldr	r3, [r6, #0]
 8007840:	3d08      	subs	r5, #8
 8007842:	441c      	add	r4, r3
 8007844:	e7da      	b.n	80077fc <_FillRect+0x14c>
 8007846:	f814 3b01 	ldrb.w	r3, [r4], #1
 800784a:	432b      	orrs	r3, r5
 800784c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007850:	eb04 0308 	add.w	r3, r4, r8
 8007854:	429f      	cmp	r7, r3
 8007856:	daf6      	bge.n	8007846 <_FillRect+0x196>
 8007858:	e787      	b.n	800776a <_FillRect+0xba>
 800785a:	bf00      	nop
 800785c:	200000d8 	.word	0x200000d8
 8007860:	200000d4 	.word	0x200000d4

08007864 <_DrawBitmap>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	b091      	sub	sp, #68	; 0x44
 800786a:	9308      	str	r3, [sp, #32]
 800786c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800786e:	9304      	str	r3, [sp, #16]
 8007870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007872:	930b      	str	r3, [sp, #44]	; 0x2c
 8007874:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007876:	9303      	str	r3, [sp, #12]
 8007878:	6883      	ldr	r3, [r0, #8]
 800787a:	930c      	str	r3, [sp, #48]	; 0x30
 800787c:	6a1c      	ldr	r4, [r3, #32]
 800787e:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8007882:	9107      	str	r1, [sp, #28]
 8007884:	4414      	add	r4, r2
 8007886:	10e3      	asrs	r3, r4, #3
 8007888:	9309      	str	r3, [sp, #36]	; 0x24
 800788a:	9a04      	ldr	r2, [sp, #16]
 800788c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800788e:	9006      	str	r0, [sp, #24]
 8007890:	460b      	mov	r3, r1
 8007892:	9908      	ldr	r1, [sp, #32]
 8007894:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007896:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800789a:	445b      	add	r3, fp
 800789c:	1859      	adds	r1, r3, r1
 800789e:	18a2      	adds	r2, r4, r2
 80078a0:	3901      	subs	r1, #1
 80078a2:	3a01      	subs	r2, #1
 80078a4:	9100      	str	r1, [sp, #0]
 80078a6:	10d2      	asrs	r2, r2, #3
 80078a8:	10e1      	asrs	r1, r4, #3
 80078aa:	3d01      	subs	r5, #1
 80078ac:	f000 fd85 	bl	80083ba <GUIDRV__SPage_AddDirtyRect>
 80078b0:	2d07      	cmp	r5, #7
 80078b2:	f200 80b7 	bhi.w	8007a24 <_DrawBitmap+0x1c0>
 80078b6:	e8df f005 	tbb	[pc, r5]
 80078ba:	68a3      	.short	0x68a3
 80078bc:	b5b52eb5 	.word	0xb5b52eb5
 80078c0:	04b5      	.short	0x04b5
 80078c2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80078c6:	930a      	str	r3, [sp, #40]	; 0x28
 80078c8:	f004 0307 	and.w	r3, r4, #7
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	f1c3 0308 	rsb	r3, r3, #8
 80078d2:	f04f 0b00 	mov.w	fp, #0
 80078d6:	2401      	movs	r4, #1
 80078d8:	930d      	str	r3, [sp, #52]	; 0x34
 80078da:	9b08      	ldr	r3, [sp, #32]
 80078dc:	459b      	cmp	fp, r3
 80078de:	f280 80a1 	bge.w	8007a24 <_DrawBitmap+0x1c0>
 80078e2:	9906      	ldr	r1, [sp, #24]
 80078e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80078e6:	688e      	ldr	r6, [r1, #8]
 80078e8:	9907      	ldr	r1, [sp, #28]
 80078ea:	6830      	ldr	r0, [r6, #0]
 80078ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ee:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 80078f0:	4459      	add	r1, fp
 80078f2:	fb00 1005 	mla	r0, r0, r5, r1
 80078f6:	4daf      	ldr	r5, [pc, #700]	; (8007bb4 <_DrawBitmap+0x350>)
 80078f8:	682d      	ldr	r5, [r5, #0]
 80078fa:	7c2d      	ldrb	r5, [r5, #16]
 80078fc:	f015 0503 	ands.w	r5, r5, #3
 8007900:	445b      	add	r3, fp
 8007902:	eb07 0100 	add.w	r1, r7, r0
 8007906:	f000 839a 	beq.w	800803e <_DrawBitmap+0x7da>
 800790a:	2d02      	cmp	r5, #2
 800790c:	f000 843a 	beq.w	8008184 <_DrawBitmap+0x920>
 8007910:	f10b 0b01 	add.w	fp, fp, #1
 8007914:	e7e1      	b.n	80078da <_DrawBitmap+0x76>
 8007916:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800791a:	9a08      	ldr	r2, [sp, #32]
 800791c:	930a      	str	r3, [sp, #40]	; 0x28
 800791e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007922:	930d      	str	r3, [sp, #52]	; 0x34
 8007924:	f00b 0301 	and.w	r3, fp, #1
 8007928:	441a      	add	r2, r3
 800792a:	f004 0307 	and.w	r3, r4, #7
 800792e:	9308      	str	r3, [sp, #32]
 8007930:	f1c3 0308 	rsb	r3, r3, #8
 8007934:	920e      	str	r2, [sp, #56]	; 0x38
 8007936:	930f      	str	r3, [sp, #60]	; 0x3c
 8007938:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800793a:	459b      	cmp	fp, r3
 800793c:	da72      	bge.n	8007a24 <_DrawBitmap+0x1c0>
 800793e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007940:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007944:	f002 0104 	and.w	r1, r2, #4
 8007948:	20f0      	movs	r0, #240	; 0xf0
 800794a:	9a06      	ldr	r2, [sp, #24]
 800794c:	4108      	asrs	r0, r1
 800794e:	6897      	ldr	r7, [r2, #8]
 8007950:	b2c2      	uxtb	r2, r0
 8007952:	9205      	str	r2, [sp, #20]
 8007954:	9a07      	ldr	r2, [sp, #28]
 8007956:	683d      	ldr	r5, [r7, #0]
 8007958:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 800795c:	445a      	add	r2, fp
 800795e:	fb05 2504 	mla	r5, r5, r4, r2
 8007962:	4c94      	ldr	r4, [pc, #592]	; (8007bb4 <_DrawBitmap+0x350>)
 8007964:	6824      	ldr	r4, [r4, #0]
 8007966:	7c24      	ldrb	r4, [r4, #16]
 8007968:	f014 0403 	ands.w	r4, r4, #3
 800796c:	eb03 036b 	add.w	r3, r3, fp, asr #1
 8007970:	eb0c 0205 	add.w	r2, ip, r5
 8007974:	f000 8278 	beq.w	8007e68 <_DrawBitmap+0x604>
 8007978:	2c02      	cmp	r4, #2
 800797a:	f000 82e4 	beq.w	8007f46 <_DrawBitmap+0x6e2>
 800797e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007980:	3304      	adds	r3, #4
 8007982:	f10b 0b01 	add.w	fp, fp, #1
 8007986:	930a      	str	r3, [sp, #40]	; 0x28
 8007988:	e7d6      	b.n	8007938 <_DrawBitmap+0xd4>
 800798a:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800798e:	9a08      	ldr	r2, [sp, #32]
 8007990:	930a      	str	r3, [sp, #40]	; 0x28
 8007992:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007996:	930d      	str	r3, [sp, #52]	; 0x34
 8007998:	f00b 0303 	and.w	r3, fp, #3
 800799c:	441a      	add	r2, r3
 800799e:	f004 0307 	and.w	r3, r4, #7
 80079a2:	9308      	str	r3, [sp, #32]
 80079a4:	f1c3 0308 	rsb	r3, r3, #8
 80079a8:	920e      	str	r2, [sp, #56]	; 0x38
 80079aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ae:	459b      	cmp	fp, r3
 80079b0:	da38      	bge.n	8007a24 <_DrawBitmap+0x1c0>
 80079b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b8:	f002 0106 	and.w	r1, r2, #6
 80079bc:	9a06      	ldr	r2, [sp, #24]
 80079be:	6897      	ldr	r7, [r2, #8]
 80079c0:	22c0      	movs	r2, #192	; 0xc0
 80079c2:	fa42 f401 	asr.w	r4, r2, r1
 80079c6:	b2e2      	uxtb	r2, r4
 80079c8:	9205      	str	r2, [sp, #20]
 80079ca:	9a07      	ldr	r2, [sp, #28]
 80079cc:	683d      	ldr	r5, [r7, #0]
 80079ce:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 80079d2:	445a      	add	r2, fp
 80079d4:	fb05 2500 	mla	r5, r5, r0, r2
 80079d8:	4876      	ldr	r0, [pc, #472]	; (8007bb4 <_DrawBitmap+0x350>)
 80079da:	6800      	ldr	r0, [r0, #0]
 80079dc:	7c00      	ldrb	r0, [r0, #16]
 80079de:	f010 0003 	ands.w	r0, r0, #3
 80079e2:	eb03 03ab 	add.w	r3, r3, fp, asr #2
 80079e6:	eb0c 0205 	add.w	r2, ip, r5
 80079ea:	f000 8158 	beq.w	8007c9e <_DrawBitmap+0x43a>
 80079ee:	2802      	cmp	r0, #2
 80079f0:	f000 81c4 	beq.w	8007d7c <_DrawBitmap+0x518>
 80079f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079f6:	3302      	adds	r3, #2
 80079f8:	f10b 0b01 	add.w	fp, fp, #1
 80079fc:	930a      	str	r3, [sp, #40]	; 0x28
 80079fe:	e7d5      	b.n	80079ac <_DrawBitmap+0x148>
 8007a00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007a04:	9a08      	ldr	r2, [sp, #32]
 8007a06:	930a      	str	r3, [sp, #40]	; 0x28
 8007a08:	f00b 0307 	and.w	r3, fp, #7
 8007a0c:	441a      	add	r2, r3
 8007a0e:	f004 0307 	and.w	r3, r4, #7
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	f1c3 0308 	rsb	r3, r3, #8
 8007a18:	920f      	str	r2, [sp, #60]	; 0x3c
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a20:	459b      	cmp	fp, r3
 8007a22:	db05      	blt.n	8007a30 <_DrawBitmap+0x1cc>
 8007a24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a26:	b011      	add	sp, #68	; 0x44
 8007a28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	f000 bcc0 	b.w	80083b0 <GUIDRV__SPage_FlushCache>
 8007a30:	9a06      	ldr	r2, [sp, #24]
 8007a32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007a34:	6896      	ldr	r6, [r2, #8]
 8007a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a38:	6834      	ldr	r4, [r6, #0]
 8007a3a:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8007a3c:	f00b 0207 	and.w	r2, fp, #7
 8007a40:	2180      	movs	r1, #128	; 0x80
 8007a42:	4111      	asrs	r1, r2
 8007a44:	9a03      	ldr	r2, [sp, #12]
 8007a46:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8007a4a:	9a07      	ldr	r2, [sp, #28]
 8007a4c:	445a      	add	r2, fp
 8007a4e:	fb04 2205 	mla	r2, r4, r5, r2
 8007a52:	4d58      	ldr	r5, [pc, #352]	; (8007bb4 <_DrawBitmap+0x350>)
 8007a54:	9205      	str	r2, [sp, #20]
 8007a56:	682d      	ldr	r5, [r5, #0]
 8007a58:	7c2d      	ldrb	r5, [r5, #16]
 8007a5a:	f005 0503 	and.w	r5, r5, #3
 8007a5e:	2d02      	cmp	r5, #2
 8007a60:	eb03 03eb 	add.w	r3, r3, fp, asr #3
 8007a64:	b2c9      	uxtb	r1, r1
 8007a66:	443a      	add	r2, r7
 8007a68:	d065      	beq.n	8007b36 <_DrawBitmap+0x2d2>
 8007a6a:	2d03      	cmp	r5, #3
 8007a6c:	f000 80c5 	beq.w	8007bfa <_DrawBitmap+0x396>
 8007a70:	2d01      	cmp	r5, #1
 8007a72:	f000 80c2 	beq.w	8007bfa <_DrawBitmap+0x396>
 8007a76:	9d03      	ldr	r5, [sp, #12]
 8007a78:	f8d5 9000 	ldr.w	r9, [r5]
 8007a7c:	9d08      	ldr	r5, [sp, #32]
 8007a7e:	2d00      	cmp	r5, #0
 8007a80:	d03d      	beq.n	8007afe <_DrawBitmap+0x29a>
 8007a82:	9c05      	ldr	r4, [sp, #20]
 8007a84:	46a8      	mov	r8, r5
 8007a86:	f817 e004 	ldrb.w	lr, [r7, r4]
 8007a8a:	9d04      	ldr	r5, [sp, #16]
 8007a8c:	781c      	ldrb	r4, [r3, #0]
 8007a8e:	4221      	tst	r1, r4
 8007a90:	bf0c      	ite	eq
 8007a92:	464c      	moveq	r4, r9
 8007a94:	4664      	movne	r4, ip
 8007a96:	940e      	str	r4, [sp, #56]	; 0x38
 8007a98:	fa00 f408 	lsl.w	r4, r0, r8
 8007a9c:	ea2e 0e04 	bic.w	lr, lr, r4
 8007aa0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007aa2:	fa04 f408 	lsl.w	r4, r4, r8
 8007aa6:	ea4e 0e04 	orr.w	lr, lr, r4
 8007aaa:	f1b8 0f07 	cmp.w	r8, #7
 8007aae:	fa5f fe8e 	uxtb.w	lr, lr
 8007ab2:	4453      	add	r3, sl
 8007ab4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007ab8:	d003      	beq.n	8007ac2 <_DrawBitmap+0x25e>
 8007aba:	f108 0801 	add.w	r8, r8, #1
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	d1e4      	bne.n	8007a8c <_DrawBitmap+0x228>
 8007ac2:	9c05      	ldr	r4, [sp, #20]
 8007ac4:	f807 e004 	strb.w	lr, [r7, r4]
 8007ac8:	6834      	ldr	r4, [r6, #0]
 8007aca:	4422      	add	r2, r4
 8007acc:	2d07      	cmp	r5, #7
 8007ace:	dc18      	bgt.n	8007b02 <_DrawBitmap+0x29e>
 8007ad0:	b195      	cbz	r5, 8007af8 <_DrawBitmap+0x294>
 8007ad2:	7814      	ldrb	r4, [r2, #0]
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	781f      	ldrb	r7, [r3, #0]
 8007ad8:	4239      	tst	r1, r7
 8007ada:	bf0c      	ite	eq
 8007adc:	464f      	moveq	r7, r9
 8007ade:	4667      	movne	r7, ip
 8007ae0:	fa00 fe06 	lsl.w	lr, r0, r6
 8007ae4:	40b7      	lsls	r7, r6
 8007ae6:	ea24 040e 	bic.w	r4, r4, lr
 8007aea:	3601      	adds	r6, #1
 8007aec:	433c      	orrs	r4, r7
 8007aee:	42b5      	cmp	r5, r6
 8007af0:	b2e4      	uxtb	r4, r4
 8007af2:	4453      	add	r3, sl
 8007af4:	d1ef      	bne.n	8007ad6 <_DrawBitmap+0x272>
 8007af6:	7014      	strb	r4, [r2, #0]
 8007af8:	f10b 0b01 	add.w	fp, fp, #1
 8007afc:	e78f      	b.n	8007a1e <_DrawBitmap+0x1ba>
 8007afe:	9d04      	ldr	r5, [sp, #16]
 8007b00:	e7e4      	b.n	8007acc <_DrawBitmap+0x268>
 8007b02:	2700      	movs	r7, #0
 8007b04:	4698      	mov	r8, r3
 8007b06:	46be      	mov	lr, r7
 8007b08:	f898 4000 	ldrb.w	r4, [r8]
 8007b0c:	4221      	tst	r1, r4
 8007b0e:	bf14      	ite	ne
 8007b10:	4664      	movne	r4, ip
 8007b12:	464c      	moveq	r4, r9
 8007b14:	fa04 f40e 	lsl.w	r4, r4, lr
 8007b18:	f10e 0e01 	add.w	lr, lr, #1
 8007b1c:	4327      	orrs	r7, r4
 8007b1e:	f1be 0f08 	cmp.w	lr, #8
 8007b22:	b2ff      	uxtb	r7, r7
 8007b24:	44d0      	add	r8, sl
 8007b26:	d1ef      	bne.n	8007b08 <_DrawBitmap+0x2a4>
 8007b28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b2a:	7017      	strb	r7, [r2, #0]
 8007b2c:	4423      	add	r3, r4
 8007b2e:	6834      	ldr	r4, [r6, #0]
 8007b30:	3d08      	subs	r5, #8
 8007b32:	4422      	add	r2, r4
 8007b34:	e7ca      	b.n	8007acc <_DrawBitmap+0x268>
 8007b36:	9c08      	ldr	r4, [sp, #32]
 8007b38:	2c00      	cmp	r4, #0
 8007b3a:	d039      	beq.n	8007bb0 <_DrawBitmap+0x34c>
 8007b3c:	9c05      	ldr	r4, [sp, #20]
 8007b3e:	9d04      	ldr	r5, [sp, #16]
 8007b40:	f817 9004 	ldrb.w	r9, [r7, r4]
 8007b44:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007b46:	f1c4 0e08 	rsb	lr, r4, #8
 8007b4a:	f893 8000 	ldrb.w	r8, [r3]
 8007b4e:	ea11 0f08 	tst.w	r1, r8
 8007b52:	d009      	beq.n	8007b68 <_DrawBitmap+0x304>
 8007b54:	fa00 f80e 	lsl.w	r8, r0, lr
 8007b58:	ea29 0808 	bic.w	r8, r9, r8
 8007b5c:	fa0c f90e 	lsl.w	r9, ip, lr
 8007b60:	ea48 0809 	orr.w	r8, r8, r9
 8007b64:	fa5f f988 	uxtb.w	r9, r8
 8007b68:	f1be 0f07 	cmp.w	lr, #7
 8007b6c:	4453      	add	r3, sl
 8007b6e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007b72:	d003      	beq.n	8007b7c <_DrawBitmap+0x318>
 8007b74:	f10e 0e01 	add.w	lr, lr, #1
 8007b78:	2d00      	cmp	r5, #0
 8007b7a:	d1e6      	bne.n	8007b4a <_DrawBitmap+0x2e6>
 8007b7c:	9c05      	ldr	r4, [sp, #20]
 8007b7e:	f807 9004 	strb.w	r9, [r7, r4]
 8007b82:	6834      	ldr	r4, [r6, #0]
 8007b84:	4422      	add	r2, r4
 8007b86:	2d07      	cmp	r5, #7
 8007b88:	dc16      	bgt.n	8007bb8 <_DrawBitmap+0x354>
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	d0b4      	beq.n	8007af8 <_DrawBitmap+0x294>
 8007b8e:	7814      	ldrb	r4, [r2, #0]
 8007b90:	2600      	movs	r6, #0
 8007b92:	781f      	ldrb	r7, [r3, #0]
 8007b94:	4239      	tst	r1, r7
 8007b96:	d006      	beq.n	8007ba6 <_DrawBitmap+0x342>
 8007b98:	fa00 f706 	lsl.w	r7, r0, r6
 8007b9c:	f1bc 0f00 	cmp.w	ip, #0
 8007ba0:	d028      	beq.n	8007bf4 <_DrawBitmap+0x390>
 8007ba2:	433c      	orrs	r4, r7
 8007ba4:	b2e4      	uxtb	r4, r4
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	42b5      	cmp	r5, r6
 8007baa:	4453      	add	r3, sl
 8007bac:	d1f1      	bne.n	8007b92 <_DrawBitmap+0x32e>
 8007bae:	e7a2      	b.n	8007af6 <_DrawBitmap+0x292>
 8007bb0:	9d04      	ldr	r5, [sp, #16]
 8007bb2:	e7e8      	b.n	8007b86 <_DrawBitmap+0x322>
 8007bb4:	200000d8 	.word	0x200000d8
 8007bb8:	f892 8000 	ldrb.w	r8, [r2]
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	2400      	movs	r4, #0
 8007bc0:	f89e 7000 	ldrb.w	r7, [lr]
 8007bc4:	4239      	tst	r1, r7
 8007bc6:	d009      	beq.n	8007bdc <_DrawBitmap+0x378>
 8007bc8:	fa00 f704 	lsl.w	r7, r0, r4
 8007bcc:	ea28 0707 	bic.w	r7, r8, r7
 8007bd0:	fa0c f804 	lsl.w	r8, ip, r4
 8007bd4:	ea47 0708 	orr.w	r7, r7, r8
 8007bd8:	fa5f f887 	uxtb.w	r8, r7
 8007bdc:	3401      	adds	r4, #1
 8007bde:	2c08      	cmp	r4, #8
 8007be0:	44d6      	add	lr, sl
 8007be2:	d1ed      	bne.n	8007bc0 <_DrawBitmap+0x35c>
 8007be4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007be6:	f882 8000 	strb.w	r8, [r2]
 8007bea:	4423      	add	r3, r4
 8007bec:	6834      	ldr	r4, [r6, #0]
 8007bee:	3d08      	subs	r5, #8
 8007bf0:	4422      	add	r2, r4
 8007bf2:	e7c8      	b.n	8007b86 <_DrawBitmap+0x322>
 8007bf4:	ea24 0407 	bic.w	r4, r4, r7
 8007bf8:	e7d5      	b.n	8007ba6 <_DrawBitmap+0x342>
 8007bfa:	9c08      	ldr	r4, [sp, #32]
 8007bfc:	2c00      	cmp	r4, #0
 8007bfe:	d036      	beq.n	8007c6e <_DrawBitmap+0x40a>
 8007c00:	9c05      	ldr	r4, [sp, #20]
 8007c02:	9d04      	ldr	r5, [sp, #16]
 8007c04:	f817 c004 	ldrb.w	ip, [r7, r4]
 8007c08:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007c0a:	f1c4 0e08 	rsb	lr, r4, #8
 8007c0e:	f893 8000 	ldrb.w	r8, [r3]
 8007c12:	ea11 0f08 	tst.w	r1, r8
 8007c16:	bf1e      	ittt	ne
 8007c18:	fa00 f80e 	lslne.w	r8, r0, lr
 8007c1c:	ea88 0c0c 	eorne.w	ip, r8, ip
 8007c20:	fa5f fc8c 	uxtbne.w	ip, ip
 8007c24:	f1be 0f07 	cmp.w	lr, #7
 8007c28:	4453      	add	r3, sl
 8007c2a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8007c2e:	d003      	beq.n	8007c38 <_DrawBitmap+0x3d4>
 8007c30:	f10e 0e01 	add.w	lr, lr, #1
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	d1ea      	bne.n	8007c0e <_DrawBitmap+0x3aa>
 8007c38:	9c05      	ldr	r4, [sp, #20]
 8007c3a:	f807 c004 	strb.w	ip, [r7, r4]
 8007c3e:	6834      	ldr	r4, [r6, #0]
 8007c40:	4422      	add	r2, r4
 8007c42:	2d07      	cmp	r5, #7
 8007c44:	dc15      	bgt.n	8007c72 <_DrawBitmap+0x40e>
 8007c46:	2d00      	cmp	r5, #0
 8007c48:	f43f af56 	beq.w	8007af8 <_DrawBitmap+0x294>
 8007c4c:	7816      	ldrb	r6, [r2, #0]
 8007c4e:	2400      	movs	r4, #0
 8007c50:	781f      	ldrb	r7, [r3, #0]
 8007c52:	4239      	tst	r1, r7
 8007c54:	bf1c      	itt	ne
 8007c56:	fa00 f704 	lslne.w	r7, r0, r4
 8007c5a:	407e      	eorne	r6, r7
 8007c5c:	f104 0401 	add.w	r4, r4, #1
 8007c60:	bf18      	it	ne
 8007c62:	b2f6      	uxtbne	r6, r6
 8007c64:	42a5      	cmp	r5, r4
 8007c66:	4453      	add	r3, sl
 8007c68:	d1f2      	bne.n	8007c50 <_DrawBitmap+0x3ec>
 8007c6a:	7016      	strb	r6, [r2, #0]
 8007c6c:	e744      	b.n	8007af8 <_DrawBitmap+0x294>
 8007c6e:	9d04      	ldr	r5, [sp, #16]
 8007c70:	e7e7      	b.n	8007c42 <_DrawBitmap+0x3de>
 8007c72:	f893 e000 	ldrb.w	lr, [r3]
 8007c76:	7817      	ldrb	r7, [r2, #0]
 8007c78:	ea01 0e0e 	and.w	lr, r1, lr
 8007c7c:	2400      	movs	r4, #0
 8007c7e:	f1be 0f00 	cmp.w	lr, #0
 8007c82:	d004      	beq.n	8007c8e <_DrawBitmap+0x42a>
 8007c84:	fa00 fc04 	lsl.w	ip, r0, r4
 8007c88:	ea8c 0707 	eor.w	r7, ip, r7
 8007c8c:	b2ff      	uxtb	r7, r7
 8007c8e:	3401      	adds	r4, #1
 8007c90:	2c08      	cmp	r4, #8
 8007c92:	d1f4      	bne.n	8007c7e <_DrawBitmap+0x41a>
 8007c94:	7017      	strb	r7, [r2, #0]
 8007c96:	6834      	ldr	r4, [r6, #0]
 8007c98:	3d08      	subs	r5, #8
 8007c9a:	4422      	add	r2, r4
 8007c9c:	e7d1      	b.n	8007c42 <_DrawBitmap+0x3de>
 8007c9e:	9803      	ldr	r0, [sp, #12]
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	f43f aea7 	beq.w	80079f4 <_DrawBitmap+0x190>
 8007ca6:	9808      	ldr	r0, [sp, #32]
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d048      	beq.n	8007d3e <_DrawBitmap+0x4da>
 8007cac:	f81c 0005 	ldrb.w	r0, [ip, r5]
 8007cb0:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007cb4:	9e04      	ldr	r6, [sp, #16]
 8007cb6:	f1c1 0806 	rsb	r8, r1, #6
 8007cba:	2401      	movs	r4, #1
 8007cbc:	fa04 f90e 	lsl.w	r9, r4, lr
 8007cc0:	ea20 0009 	bic.w	r0, r0, r9
 8007cc4:	9c05      	ldr	r4, [sp, #20]
 8007cc6:	f893 9000 	ldrb.w	r9, [r3]
 8007cca:	ea04 0909 	and.w	r9, r4, r9
 8007cce:	fa49 f908 	asr.w	r9, r9, r8
 8007cd2:	9c03      	ldr	r4, [sp, #12]
 8007cd4:	f854 9029 	ldr.w	r9, [r4, r9, lsl #2]
 8007cd8:	fa09 f90e 	lsl.w	r9, r9, lr
 8007cdc:	ea40 0009 	orr.w	r0, r0, r9
 8007ce0:	f1be 0f07 	cmp.w	lr, #7
 8007ce4:	b2c0      	uxtb	r0, r0
 8007ce6:	4453      	add	r3, sl
 8007ce8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007cec:	d003      	beq.n	8007cf6 <_DrawBitmap+0x492>
 8007cee:	f10e 0e01 	add.w	lr, lr, #1
 8007cf2:	2e00      	cmp	r6, #0
 8007cf4:	d1e1      	bne.n	8007cba <_DrawBitmap+0x456>
 8007cf6:	f80c 0005 	strb.w	r0, [ip, r5]
 8007cfa:	6838      	ldr	r0, [r7, #0]
 8007cfc:	4402      	add	r2, r0
 8007cfe:	f1c1 0c06 	rsb	ip, r1, #6
 8007d02:	2e07      	cmp	r6, #7
 8007d04:	dc1d      	bgt.n	8007d42 <_DrawBitmap+0x4de>
 8007d06:	2e00      	cmp	r6, #0
 8007d08:	f43f ae74 	beq.w	80079f4 <_DrawBitmap+0x190>
 8007d0c:	7810      	ldrb	r0, [r2, #0]
 8007d0e:	2500      	movs	r5, #0
 8007d10:	f1c1 0106 	rsb	r1, r1, #6
 8007d14:	2401      	movs	r4, #1
 8007d16:	fa04 f705 	lsl.w	r7, r4, r5
 8007d1a:	ea20 0007 	bic.w	r0, r0, r7
 8007d1e:	9c05      	ldr	r4, [sp, #20]
 8007d20:	781f      	ldrb	r7, [r3, #0]
 8007d22:	4027      	ands	r7, r4
 8007d24:	410f      	asrs	r7, r1
 8007d26:	9c03      	ldr	r4, [sp, #12]
 8007d28:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8007d2c:	40af      	lsls	r7, r5
 8007d2e:	3501      	adds	r5, #1
 8007d30:	4338      	orrs	r0, r7
 8007d32:	42ae      	cmp	r6, r5
 8007d34:	b2c0      	uxtb	r0, r0
 8007d36:	4453      	add	r3, sl
 8007d38:	d1ec      	bne.n	8007d14 <_DrawBitmap+0x4b0>
 8007d3a:	7010      	strb	r0, [r2, #0]
 8007d3c:	e65a      	b.n	80079f4 <_DrawBitmap+0x190>
 8007d3e:	9e04      	ldr	r6, [sp, #16]
 8007d40:	e7dd      	b.n	8007cfe <_DrawBitmap+0x49a>
 8007d42:	2500      	movs	r5, #0
 8007d44:	4698      	mov	r8, r3
 8007d46:	46ae      	mov	lr, r5
 8007d48:	f898 0000 	ldrb.w	r0, [r8]
 8007d4c:	9c05      	ldr	r4, [sp, #20]
 8007d4e:	4020      	ands	r0, r4
 8007d50:	fa40 f00c 	asr.w	r0, r0, ip
 8007d54:	9c03      	ldr	r4, [sp, #12]
 8007d56:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8007d5a:	fa00 f00e 	lsl.w	r0, r0, lr
 8007d5e:	f10e 0e01 	add.w	lr, lr, #1
 8007d62:	4305      	orrs	r5, r0
 8007d64:	f1be 0f08 	cmp.w	lr, #8
 8007d68:	b2ed      	uxtb	r5, r5
 8007d6a:	44d0      	add	r8, sl
 8007d6c:	d1ec      	bne.n	8007d48 <_DrawBitmap+0x4e4>
 8007d6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007d70:	7015      	strb	r5, [r2, #0]
 8007d72:	4403      	add	r3, r0
 8007d74:	6838      	ldr	r0, [r7, #0]
 8007d76:	3e08      	subs	r6, #8
 8007d78:	4402      	add	r2, r0
 8007d7a:	e7c2      	b.n	8007d02 <_DrawBitmap+0x49e>
 8007d7c:	9803      	ldr	r0, [sp, #12]
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f ae38 	beq.w	80079f4 <_DrawBitmap+0x190>
 8007d84:	9808      	ldr	r0, [sp, #32]
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d04d      	beq.n	8007e26 <_DrawBitmap+0x5c2>
 8007d8a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007d8c:	f81c 6005 	ldrb.w	r6, [ip, r5]
 8007d90:	f1c0 0808 	rsb	r8, r0, #8
 8007d94:	9804      	ldr	r0, [sp, #16]
 8007d96:	f1c1 0906 	rsb	r9, r1, #6
 8007d9a:	f893 e000 	ldrb.w	lr, [r3]
 8007d9e:	9c05      	ldr	r4, [sp, #20]
 8007da0:	ea04 0e0e 	and.w	lr, r4, lr
 8007da4:	fa5e fe09 	asrs.w	lr, lr, r9
 8007da8:	d00c      	beq.n	8007dc4 <_DrawBitmap+0x560>
 8007daa:	2401      	movs	r4, #1
 8007dac:	fa04 f408 	lsl.w	r4, r4, r8
 8007db0:	ea26 0604 	bic.w	r6, r6, r4
 8007db4:	9c03      	ldr	r4, [sp, #12]
 8007db6:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8007dba:	fa0e fe08 	lsl.w	lr, lr, r8
 8007dbe:	ea46 060e 	orr.w	r6, r6, lr
 8007dc2:	b2f6      	uxtb	r6, r6
 8007dc4:	f1b8 0f07 	cmp.w	r8, #7
 8007dc8:	4453      	add	r3, sl
 8007dca:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8007dce:	d003      	beq.n	8007dd8 <_DrawBitmap+0x574>
 8007dd0:	f108 0801 	add.w	r8, r8, #1
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d1e0      	bne.n	8007d9a <_DrawBitmap+0x536>
 8007dd8:	f80c 6005 	strb.w	r6, [ip, r5]
 8007ddc:	683d      	ldr	r5, [r7, #0]
 8007dde:	442a      	add	r2, r5
 8007de0:	f1c1 0c06 	rsb	ip, r1, #6
 8007de4:	2807      	cmp	r0, #7
 8007de6:	dc20      	bgt.n	8007e2a <_DrawBitmap+0x5c6>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f43f ae03 	beq.w	80079f4 <_DrawBitmap+0x190>
 8007dee:	7817      	ldrb	r7, [r2, #0]
 8007df0:	2600      	movs	r6, #0
 8007df2:	f1c1 0106 	rsb	r1, r1, #6
 8007df6:	781d      	ldrb	r5, [r3, #0]
 8007df8:	9c05      	ldr	r4, [sp, #20]
 8007dfa:	4025      	ands	r5, r4
 8007dfc:	410d      	asrs	r5, r1
 8007dfe:	d00c      	beq.n	8007e1a <_DrawBitmap+0x5b6>
 8007e00:	2401      	movs	r4, #1
 8007e02:	fa04 fe06 	lsl.w	lr, r4, r6
 8007e06:	9c03      	ldr	r4, [sp, #12]
 8007e08:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8007e0c:	ea27 070e 	bic.w	r7, r7, lr
 8007e10:	fa05 fe06 	lsl.w	lr, r5, r6
 8007e14:	ea47 070e 	orr.w	r7, r7, lr
 8007e18:	b2ff      	uxtb	r7, r7
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	42b0      	cmp	r0, r6
 8007e1e:	4453      	add	r3, sl
 8007e20:	d1e9      	bne.n	8007df6 <_DrawBitmap+0x592>
 8007e22:	7017      	strb	r7, [r2, #0]
 8007e24:	e5e6      	b.n	80079f4 <_DrawBitmap+0x190>
 8007e26:	9804      	ldr	r0, [sp, #16]
 8007e28:	e7da      	b.n	8007de0 <_DrawBitmap+0x57c>
 8007e2a:	f892 e000 	ldrb.w	lr, [r2]
 8007e2e:	4698      	mov	r8, r3
 8007e30:	2600      	movs	r6, #0
 8007e32:	f898 5000 	ldrb.w	r5, [r8]
 8007e36:	9c05      	ldr	r4, [sp, #20]
 8007e38:	4025      	ands	r5, r4
 8007e3a:	fa55 f50c 	asrs.w	r5, r5, ip
 8007e3e:	d007      	beq.n	8007e50 <_DrawBitmap+0x5ec>
 8007e40:	9c03      	ldr	r4, [sp, #12]
 8007e42:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8007e46:	40b5      	lsls	r5, r6
 8007e48:	ea4e 0e05 	orr.w	lr, lr, r5
 8007e4c:	fa5f fe8e 	uxtb.w	lr, lr
 8007e50:	3601      	adds	r6, #1
 8007e52:	2e08      	cmp	r6, #8
 8007e54:	44d0      	add	r8, sl
 8007e56:	d1ec      	bne.n	8007e32 <_DrawBitmap+0x5ce>
 8007e58:	f882 e000 	strb.w	lr, [r2]
 8007e5c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007e5e:	683d      	ldr	r5, [r7, #0]
 8007e60:	4423      	add	r3, r4
 8007e62:	442a      	add	r2, r5
 8007e64:	3808      	subs	r0, #8
 8007e66:	e7bd      	b.n	8007de4 <_DrawBitmap+0x580>
 8007e68:	9c03      	ldr	r4, [sp, #12]
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	f43f ad87 	beq.w	800797e <_DrawBitmap+0x11a>
 8007e70:	9c08      	ldr	r4, [sp, #32]
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	d048      	beq.n	8007f08 <_DrawBitmap+0x6a4>
 8007e76:	f81c 4005 	ldrb.w	r4, [ip, r5]
 8007e7a:	f8dd e020 	ldr.w	lr, [sp, #32]
 8007e7e:	9e04      	ldr	r6, [sp, #16]
 8007e80:	f1c1 0804 	rsb	r8, r1, #4
 8007e84:	2001      	movs	r0, #1
 8007e86:	fa00 f90e 	lsl.w	r9, r0, lr
 8007e8a:	ea24 0409 	bic.w	r4, r4, r9
 8007e8e:	9805      	ldr	r0, [sp, #20]
 8007e90:	f893 9000 	ldrb.w	r9, [r3]
 8007e94:	ea00 0909 	and.w	r9, r0, r9
 8007e98:	fa49 f908 	asr.w	r9, r9, r8
 8007e9c:	9803      	ldr	r0, [sp, #12]
 8007e9e:	f850 9029 	ldr.w	r9, [r0, r9, lsl #2]
 8007ea2:	fa09 f90e 	lsl.w	r9, r9, lr
 8007ea6:	ea44 0409 	orr.w	r4, r4, r9
 8007eaa:	f1be 0f07 	cmp.w	lr, #7
 8007eae:	b2e4      	uxtb	r4, r4
 8007eb0:	4453      	add	r3, sl
 8007eb2:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 8007eb6:	d003      	beq.n	8007ec0 <_DrawBitmap+0x65c>
 8007eb8:	f10e 0e01 	add.w	lr, lr, #1
 8007ebc:	2e00      	cmp	r6, #0
 8007ebe:	d1e1      	bne.n	8007e84 <_DrawBitmap+0x620>
 8007ec0:	f80c 4005 	strb.w	r4, [ip, r5]
 8007ec4:	683c      	ldr	r4, [r7, #0]
 8007ec6:	4422      	add	r2, r4
 8007ec8:	f1c1 0c04 	rsb	ip, r1, #4
 8007ecc:	2e07      	cmp	r6, #7
 8007ece:	dc1d      	bgt.n	8007f0c <_DrawBitmap+0x6a8>
 8007ed0:	2e00      	cmp	r6, #0
 8007ed2:	f43f ad54 	beq.w	800797e <_DrawBitmap+0x11a>
 8007ed6:	7814      	ldrb	r4, [r2, #0]
 8007ed8:	2500      	movs	r5, #0
 8007eda:	f1c1 0104 	rsb	r1, r1, #4
 8007ede:	2001      	movs	r0, #1
 8007ee0:	fa00 f705 	lsl.w	r7, r0, r5
 8007ee4:	ea24 0407 	bic.w	r4, r4, r7
 8007ee8:	9805      	ldr	r0, [sp, #20]
 8007eea:	781f      	ldrb	r7, [r3, #0]
 8007eec:	4007      	ands	r7, r0
 8007eee:	410f      	asrs	r7, r1
 8007ef0:	9803      	ldr	r0, [sp, #12]
 8007ef2:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
 8007ef6:	40af      	lsls	r7, r5
 8007ef8:	3501      	adds	r5, #1
 8007efa:	433c      	orrs	r4, r7
 8007efc:	42ae      	cmp	r6, r5
 8007efe:	b2e4      	uxtb	r4, r4
 8007f00:	4453      	add	r3, sl
 8007f02:	d1ec      	bne.n	8007ede <_DrawBitmap+0x67a>
 8007f04:	7014      	strb	r4, [r2, #0]
 8007f06:	e53a      	b.n	800797e <_DrawBitmap+0x11a>
 8007f08:	9e04      	ldr	r6, [sp, #16]
 8007f0a:	e7dd      	b.n	8007ec8 <_DrawBitmap+0x664>
 8007f0c:	2500      	movs	r5, #0
 8007f0e:	4698      	mov	r8, r3
 8007f10:	46ae      	mov	lr, r5
 8007f12:	f898 4000 	ldrb.w	r4, [r8]
 8007f16:	9805      	ldr	r0, [sp, #20]
 8007f18:	4004      	ands	r4, r0
 8007f1a:	fa44 f40c 	asr.w	r4, r4, ip
 8007f1e:	9803      	ldr	r0, [sp, #12]
 8007f20:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8007f24:	fa04 f40e 	lsl.w	r4, r4, lr
 8007f28:	f10e 0e01 	add.w	lr, lr, #1
 8007f2c:	4325      	orrs	r5, r4
 8007f2e:	f1be 0f08 	cmp.w	lr, #8
 8007f32:	b2ed      	uxtb	r5, r5
 8007f34:	44d0      	add	r8, sl
 8007f36:	d1ec      	bne.n	8007f12 <_DrawBitmap+0x6ae>
 8007f38:	7015      	strb	r5, [r2, #0]
 8007f3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007f3c:	683c      	ldr	r4, [r7, #0]
 8007f3e:	4403      	add	r3, r0
 8007f40:	3e08      	subs	r6, #8
 8007f42:	4422      	add	r2, r4
 8007f44:	e7c2      	b.n	8007ecc <_DrawBitmap+0x668>
 8007f46:	9803      	ldr	r0, [sp, #12]
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	f43f ad18 	beq.w	800797e <_DrawBitmap+0x11a>
 8007f4e:	9808      	ldr	r0, [sp, #32]
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d04d      	beq.n	8007ff0 <_DrawBitmap+0x78c>
 8007f54:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007f56:	f81c 6005 	ldrb.w	r6, [ip, r5]
 8007f5a:	9c04      	ldr	r4, [sp, #16]
 8007f5c:	f1c0 0808 	rsb	r8, r0, #8
 8007f60:	f1c1 0904 	rsb	r9, r1, #4
 8007f64:	f893 e000 	ldrb.w	lr, [r3]
 8007f68:	9805      	ldr	r0, [sp, #20]
 8007f6a:	ea00 0e0e 	and.w	lr, r0, lr
 8007f6e:	fa5e fe09 	asrs.w	lr, lr, r9
 8007f72:	d00c      	beq.n	8007f8e <_DrawBitmap+0x72a>
 8007f74:	2001      	movs	r0, #1
 8007f76:	fa00 f008 	lsl.w	r0, r0, r8
 8007f7a:	ea26 0600 	bic.w	r6, r6, r0
 8007f7e:	9803      	ldr	r0, [sp, #12]
 8007f80:	f850 e02e 	ldr.w	lr, [r0, lr, lsl #2]
 8007f84:	fa0e fe08 	lsl.w	lr, lr, r8
 8007f88:	ea46 060e 	orr.w	r6, r6, lr
 8007f8c:	b2f6      	uxtb	r6, r6
 8007f8e:	f1b8 0f07 	cmp.w	r8, #7
 8007f92:	4453      	add	r3, sl
 8007f94:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007f98:	d003      	beq.n	8007fa2 <_DrawBitmap+0x73e>
 8007f9a:	f108 0801 	add.w	r8, r8, #1
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d1e0      	bne.n	8007f64 <_DrawBitmap+0x700>
 8007fa2:	f80c 6005 	strb.w	r6, [ip, r5]
 8007fa6:	683d      	ldr	r5, [r7, #0]
 8007fa8:	442a      	add	r2, r5
 8007faa:	f1c1 0804 	rsb	r8, r1, #4
 8007fae:	2c07      	cmp	r4, #7
 8007fb0:	dc20      	bgt.n	8007ff4 <_DrawBitmap+0x790>
 8007fb2:	2c00      	cmp	r4, #0
 8007fb4:	f43f ace3 	beq.w	800797e <_DrawBitmap+0x11a>
 8007fb8:	7817      	ldrb	r7, [r2, #0]
 8007fba:	2600      	movs	r6, #0
 8007fbc:	f1c1 0104 	rsb	r1, r1, #4
 8007fc0:	781d      	ldrb	r5, [r3, #0]
 8007fc2:	9805      	ldr	r0, [sp, #20]
 8007fc4:	4005      	ands	r5, r0
 8007fc6:	410d      	asrs	r5, r1
 8007fc8:	d00c      	beq.n	8007fe4 <_DrawBitmap+0x780>
 8007fca:	2001      	movs	r0, #1
 8007fcc:	fa00 fe06 	lsl.w	lr, r0, r6
 8007fd0:	9803      	ldr	r0, [sp, #12]
 8007fd2:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8007fd6:	ea27 070e 	bic.w	r7, r7, lr
 8007fda:	fa05 fe06 	lsl.w	lr, r5, r6
 8007fde:	ea47 070e 	orr.w	r7, r7, lr
 8007fe2:	b2ff      	uxtb	r7, r7
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	42b4      	cmp	r4, r6
 8007fe8:	4453      	add	r3, sl
 8007fea:	d1e9      	bne.n	8007fc0 <_DrawBitmap+0x75c>
 8007fec:	7017      	strb	r7, [r2, #0]
 8007fee:	e4c6      	b.n	800797e <_DrawBitmap+0x11a>
 8007ff0:	9c04      	ldr	r4, [sp, #16]
 8007ff2:	e7da      	b.n	8007faa <_DrawBitmap+0x746>
 8007ff4:	7815      	ldrb	r5, [r2, #0]
 8007ff6:	469c      	mov	ip, r3
 8007ff8:	f04f 0e00 	mov.w	lr, #0
 8007ffc:	f89c 6000 	ldrb.w	r6, [ip]
 8008000:	9805      	ldr	r0, [sp, #20]
 8008002:	4006      	ands	r6, r0
 8008004:	fa56 f608 	asrs.w	r6, r6, r8
 8008008:	d00c      	beq.n	8008024 <_DrawBitmap+0x7c0>
 800800a:	2001      	movs	r0, #1
 800800c:	fa00 f90e 	lsl.w	r9, r0, lr
 8008010:	9803      	ldr	r0, [sp, #12]
 8008012:	f850 6026 	ldr.w	r6, [r0, r6, lsl #2]
 8008016:	ea25 0509 	bic.w	r5, r5, r9
 800801a:	fa06 f90e 	lsl.w	r9, r6, lr
 800801e:	ea45 0509 	orr.w	r5, r5, r9
 8008022:	b2ed      	uxtb	r5, r5
 8008024:	f10e 0e01 	add.w	lr, lr, #1
 8008028:	f1be 0f08 	cmp.w	lr, #8
 800802c:	44d4      	add	ip, sl
 800802e:	d1e5      	bne.n	8007ffc <_DrawBitmap+0x798>
 8008030:	7015      	strb	r5, [r2, #0]
 8008032:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008034:	683d      	ldr	r5, [r7, #0]
 8008036:	4403      	add	r3, r0
 8008038:	442a      	add	r2, r5
 800803a:	3c08      	subs	r4, #8
 800803c:	e7b7      	b.n	8007fae <_DrawBitmap+0x74a>
 800803e:	9d03      	ldr	r5, [sp, #12]
 8008040:	9a05      	ldr	r2, [sp, #20]
 8008042:	2d00      	cmp	r5, #0
 8008044:	d055      	beq.n	80080f2 <_DrawBitmap+0x88e>
 8008046:	2a00      	cmp	r2, #0
 8008048:	d038      	beq.n	80080bc <_DrawBitmap+0x858>
 800804a:	f817 e000 	ldrb.w	lr, [r7, r0]
 800804e:	9d04      	ldr	r5, [sp, #16]
 8008050:	4694      	mov	ip, r2
 8008052:	fa04 f80c 	lsl.w	r8, r4, ip
 8008056:	ea2e 0e08 	bic.w	lr, lr, r8
 800805a:	9a03      	ldr	r2, [sp, #12]
 800805c:	f893 8000 	ldrb.w	r8, [r3]
 8008060:	f852 8028 	ldr.w	r8, [r2, r8, lsl #2]
 8008064:	fa08 f80c 	lsl.w	r8, r8, ip
 8008068:	ea4e 0e08 	orr.w	lr, lr, r8
 800806c:	f1bc 0f07 	cmp.w	ip, #7
 8008070:	fa5f fe8e 	uxtb.w	lr, lr
 8008074:	4453      	add	r3, sl
 8008076:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800807a:	d003      	beq.n	8008084 <_DrawBitmap+0x820>
 800807c:	f10c 0c01 	add.w	ip, ip, #1
 8008080:	2d00      	cmp	r5, #0
 8008082:	d1e6      	bne.n	8008052 <_DrawBitmap+0x7ee>
 8008084:	f807 e000 	strb.w	lr, [r7, r0]
 8008088:	6830      	ldr	r0, [r6, #0]
 800808a:	4401      	add	r1, r0
 800808c:	2d07      	cmp	r5, #7
 800808e:	dc17      	bgt.n	80080c0 <_DrawBitmap+0x85c>
 8008090:	2d00      	cmp	r5, #0
 8008092:	f43f ac3d 	beq.w	8007910 <_DrawBitmap+0xac>
 8008096:	7808      	ldrb	r0, [r1, #0]
 8008098:	2600      	movs	r6, #0
 800809a:	fa04 f706 	lsl.w	r7, r4, r6
 800809e:	ea20 0007 	bic.w	r0, r0, r7
 80080a2:	9a03      	ldr	r2, [sp, #12]
 80080a4:	781f      	ldrb	r7, [r3, #0]
 80080a6:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80080aa:	40b7      	lsls	r7, r6
 80080ac:	3601      	adds	r6, #1
 80080ae:	4338      	orrs	r0, r7
 80080b0:	42b5      	cmp	r5, r6
 80080b2:	b2c0      	uxtb	r0, r0
 80080b4:	4453      	add	r3, sl
 80080b6:	d1f0      	bne.n	800809a <_DrawBitmap+0x836>
 80080b8:	7008      	strb	r0, [r1, #0]
 80080ba:	e429      	b.n	8007910 <_DrawBitmap+0xac>
 80080bc:	9d04      	ldr	r5, [sp, #16]
 80080be:	e7e5      	b.n	800808c <_DrawBitmap+0x828>
 80080c0:	2700      	movs	r7, #0
 80080c2:	469c      	mov	ip, r3
 80080c4:	46be      	mov	lr, r7
 80080c6:	f89c 0000 	ldrb.w	r0, [ip]
 80080ca:	9a03      	ldr	r2, [sp, #12]
 80080cc:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80080d0:	fa00 f00e 	lsl.w	r0, r0, lr
 80080d4:	f10e 0e01 	add.w	lr, lr, #1
 80080d8:	4307      	orrs	r7, r0
 80080da:	f1be 0f08 	cmp.w	lr, #8
 80080de:	b2ff      	uxtb	r7, r7
 80080e0:	44d4      	add	ip, sl
 80080e2:	d1f0      	bne.n	80080c6 <_DrawBitmap+0x862>
 80080e4:	700f      	strb	r7, [r1, #0]
 80080e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e8:	6830      	ldr	r0, [r6, #0]
 80080ea:	4413      	add	r3, r2
 80080ec:	4401      	add	r1, r0
 80080ee:	3d08      	subs	r5, #8
 80080f0:	e7cc      	b.n	800808c <_DrawBitmap+0x828>
 80080f2:	b1f2      	cbz	r2, 8008132 <_DrawBitmap+0x8ce>
 80080f4:	f817 e000 	ldrb.w	lr, [r7, r0]
 80080f8:	9d04      	ldr	r5, [sp, #16]
 80080fa:	4694      	mov	ip, r2
 80080fc:	fa04 f80c 	lsl.w	r8, r4, ip
 8008100:	ea2e 0e08 	bic.w	lr, lr, r8
 8008104:	f893 8000 	ldrb.w	r8, [r3]
 8008108:	fa08 f80c 	lsl.w	r8, r8, ip
 800810c:	ea4e 0e08 	orr.w	lr, lr, r8
 8008110:	f1bc 0f07 	cmp.w	ip, #7
 8008114:	fa5f fe8e 	uxtb.w	lr, lr
 8008118:	4453      	add	r3, sl
 800811a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800811e:	d003      	beq.n	8008128 <_DrawBitmap+0x8c4>
 8008120:	f10c 0c01 	add.w	ip, ip, #1
 8008124:	2d00      	cmp	r5, #0
 8008126:	d1e9      	bne.n	80080fc <_DrawBitmap+0x898>
 8008128:	f807 e000 	strb.w	lr, [r7, r0]
 800812c:	6830      	ldr	r0, [r6, #0]
 800812e:	4401      	add	r1, r0
 8008130:	e000      	b.n	8008134 <_DrawBitmap+0x8d0>
 8008132:	9d04      	ldr	r5, [sp, #16]
 8008134:	2d07      	cmp	r5, #7
 8008136:	dc11      	bgt.n	800815c <_DrawBitmap+0x8f8>
 8008138:	2d00      	cmp	r5, #0
 800813a:	f43f abe9 	beq.w	8007910 <_DrawBitmap+0xac>
 800813e:	7808      	ldrb	r0, [r1, #0]
 8008140:	2600      	movs	r6, #0
 8008142:	fa04 f706 	lsl.w	r7, r4, r6
 8008146:	ea20 0007 	bic.w	r0, r0, r7
 800814a:	781f      	ldrb	r7, [r3, #0]
 800814c:	40b7      	lsls	r7, r6
 800814e:	3601      	adds	r6, #1
 8008150:	4338      	orrs	r0, r7
 8008152:	42ae      	cmp	r6, r5
 8008154:	b2c0      	uxtb	r0, r0
 8008156:	4453      	add	r3, sl
 8008158:	d1f3      	bne.n	8008142 <_DrawBitmap+0x8de>
 800815a:	e7ad      	b.n	80080b8 <_DrawBitmap+0x854>
 800815c:	2700      	movs	r7, #0
 800815e:	469c      	mov	ip, r3
 8008160:	46be      	mov	lr, r7
 8008162:	f89c 0000 	ldrb.w	r0, [ip]
 8008166:	fa00 f00e 	lsl.w	r0, r0, lr
 800816a:	f10e 0e01 	add.w	lr, lr, #1
 800816e:	4307      	orrs	r7, r0
 8008170:	f1be 0f08 	cmp.w	lr, #8
 8008174:	b2ff      	uxtb	r7, r7
 8008176:	44d4      	add	ip, sl
 8008178:	d1f3      	bne.n	8008162 <_DrawBitmap+0x8fe>
 800817a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800817c:	700f      	strb	r7, [r1, #0]
 800817e:	4413      	add	r3, r2
 8008180:	3d08      	subs	r5, #8
 8008182:	e7d3      	b.n	800812c <_DrawBitmap+0x8c8>
 8008184:	9a03      	ldr	r2, [sp, #12]
 8008186:	2a00      	cmp	r2, #0
 8008188:	d063      	beq.n	8008252 <_DrawBitmap+0x9ee>
 800818a:	9a05      	ldr	r2, [sp, #20]
 800818c:	2a00      	cmp	r2, #0
 800818e:	d03f      	beq.n	8008210 <_DrawBitmap+0x9ac>
 8008190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008192:	f817 e000 	ldrb.w	lr, [r7, r0]
 8008196:	9d04      	ldr	r5, [sp, #16]
 8008198:	f1c2 0c08 	rsb	ip, r2, #8
 800819c:	f893 8000 	ldrb.w	r8, [r3]
 80081a0:	f1b8 0f00 	cmp.w	r8, #0
 80081a4:	d00c      	beq.n	80081c0 <_DrawBitmap+0x95c>
 80081a6:	9a03      	ldr	r2, [sp, #12]
 80081a8:	fa04 f90c 	lsl.w	r9, r4, ip
 80081ac:	ea2e 0e09 	bic.w	lr, lr, r9
 80081b0:	f852 9028 	ldr.w	r9, [r2, r8, lsl #2]
 80081b4:	fa09 f90c 	lsl.w	r9, r9, ip
 80081b8:	ea4e 0e09 	orr.w	lr, lr, r9
 80081bc:	fa5f fe8e 	uxtb.w	lr, lr
 80081c0:	f1bc 0f07 	cmp.w	ip, #7
 80081c4:	4453      	add	r3, sl
 80081c6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 80081ca:	d003      	beq.n	80081d4 <_DrawBitmap+0x970>
 80081cc:	f10c 0c01 	add.w	ip, ip, #1
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	d1e3      	bne.n	800819c <_DrawBitmap+0x938>
 80081d4:	f807 e000 	strb.w	lr, [r7, r0]
 80081d8:	6830      	ldr	r0, [r6, #0]
 80081da:	4401      	add	r1, r0
 80081dc:	2d07      	cmp	r5, #7
 80081de:	dc19      	bgt.n	8008214 <_DrawBitmap+0x9b0>
 80081e0:	2d00      	cmp	r5, #0
 80081e2:	f43f ab95 	beq.w	8007910 <_DrawBitmap+0xac>
 80081e6:	7808      	ldrb	r0, [r1, #0]
 80081e8:	2600      	movs	r6, #0
 80081ea:	781f      	ldrb	r7, [r3, #0]
 80081ec:	b15f      	cbz	r7, 8008206 <_DrawBitmap+0x9a2>
 80081ee:	9a03      	ldr	r2, [sp, #12]
 80081f0:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
 80081f4:	fa04 fe06 	lsl.w	lr, r4, r6
 80081f8:	ea20 000e 	bic.w	r0, r0, lr
 80081fc:	fa07 fe06 	lsl.w	lr, r7, r6
 8008200:	ea40 000e 	orr.w	r0, r0, lr
 8008204:	b2c0      	uxtb	r0, r0
 8008206:	3601      	adds	r6, #1
 8008208:	42ae      	cmp	r6, r5
 800820a:	4453      	add	r3, sl
 800820c:	d1ed      	bne.n	80081ea <_DrawBitmap+0x986>
 800820e:	e753      	b.n	80080b8 <_DrawBitmap+0x854>
 8008210:	9d04      	ldr	r5, [sp, #16]
 8008212:	e7e3      	b.n	80081dc <_DrawBitmap+0x978>
 8008214:	7808      	ldrb	r0, [r1, #0]
 8008216:	469e      	mov	lr, r3
 8008218:	2700      	movs	r7, #0
 800821a:	f89e c000 	ldrb.w	ip, [lr]
 800821e:	f1bc 0f00 	cmp.w	ip, #0
 8008222:	d00b      	beq.n	800823c <_DrawBitmap+0x9d8>
 8008224:	9a03      	ldr	r2, [sp, #12]
 8008226:	fa04 f807 	lsl.w	r8, r4, r7
 800822a:	ea20 0008 	bic.w	r0, r0, r8
 800822e:	f852 802c 	ldr.w	r8, [r2, ip, lsl #2]
 8008232:	fa08 f807 	lsl.w	r8, r8, r7
 8008236:	ea40 0008 	orr.w	r0, r0, r8
 800823a:	b2c0      	uxtb	r0, r0
 800823c:	3701      	adds	r7, #1
 800823e:	2f08      	cmp	r7, #8
 8008240:	44d6      	add	lr, sl
 8008242:	d1ea      	bne.n	800821a <_DrawBitmap+0x9b6>
 8008244:	7008      	strb	r0, [r1, #0]
 8008246:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008248:	6830      	ldr	r0, [r6, #0]
 800824a:	4413      	add	r3, r2
 800824c:	4401      	add	r1, r0
 800824e:	3d08      	subs	r5, #8
 8008250:	e7c4      	b.n	80081dc <_DrawBitmap+0x978>
 8008252:	9a05      	ldr	r2, [sp, #20]
 8008254:	2a00      	cmp	r2, #0
 8008256:	d037      	beq.n	80082c8 <_DrawBitmap+0xa64>
 8008258:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800825a:	f817 e000 	ldrb.w	lr, [r7, r0]
 800825e:	9d04      	ldr	r5, [sp, #16]
 8008260:	f1c2 0c08 	rsb	ip, r2, #8
 8008264:	f893 8000 	ldrb.w	r8, [r3]
 8008268:	f1b8 0f00 	cmp.w	r8, #0
 800826c:	d009      	beq.n	8008282 <_DrawBitmap+0xa1e>
 800826e:	fa04 f90c 	lsl.w	r9, r4, ip
 8008272:	ea2e 0e09 	bic.w	lr, lr, r9
 8008276:	fa08 f80c 	lsl.w	r8, r8, ip
 800827a:	ea4e 0e08 	orr.w	lr, lr, r8
 800827e:	fa5f fe8e 	uxtb.w	lr, lr
 8008282:	f1bc 0f07 	cmp.w	ip, #7
 8008286:	4453      	add	r3, sl
 8008288:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800828c:	d003      	beq.n	8008296 <_DrawBitmap+0xa32>
 800828e:	f10c 0c01 	add.w	ip, ip, #1
 8008292:	2d00      	cmp	r5, #0
 8008294:	d1e6      	bne.n	8008264 <_DrawBitmap+0xa00>
 8008296:	f807 e000 	strb.w	lr, [r7, r0]
 800829a:	6830      	ldr	r0, [r6, #0]
 800829c:	4401      	add	r1, r0
 800829e:	2d07      	cmp	r5, #7
 80082a0:	dc14      	bgt.n	80082cc <_DrawBitmap+0xa68>
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	f43f ab34 	beq.w	8007910 <_DrawBitmap+0xac>
 80082a8:	7808      	ldrb	r0, [r1, #0]
 80082aa:	2600      	movs	r6, #0
 80082ac:	781f      	ldrb	r7, [r3, #0]
 80082ae:	b137      	cbz	r7, 80082be <_DrawBitmap+0xa5a>
 80082b0:	fa04 fe06 	lsl.w	lr, r4, r6
 80082b4:	ea20 000e 	bic.w	r0, r0, lr
 80082b8:	40b7      	lsls	r7, r6
 80082ba:	4338      	orrs	r0, r7
 80082bc:	b2c0      	uxtb	r0, r0
 80082be:	3601      	adds	r6, #1
 80082c0:	42ae      	cmp	r6, r5
 80082c2:	4453      	add	r3, sl
 80082c4:	d1f2      	bne.n	80082ac <_DrawBitmap+0xa48>
 80082c6:	e6f7      	b.n	80080b8 <_DrawBitmap+0x854>
 80082c8:	9d04      	ldr	r5, [sp, #16]
 80082ca:	e7e8      	b.n	800829e <_DrawBitmap+0xa3a>
 80082cc:	7808      	ldrb	r0, [r1, #0]
 80082ce:	469c      	mov	ip, r3
 80082d0:	2700      	movs	r7, #0
 80082d2:	f89c e000 	ldrb.w	lr, [ip]
 80082d6:	f1be 0f00 	cmp.w	lr, #0
 80082da:	d008      	beq.n	80082ee <_DrawBitmap+0xa8a>
 80082dc:	fa04 f807 	lsl.w	r8, r4, r7
 80082e0:	ea20 0008 	bic.w	r0, r0, r8
 80082e4:	fa0e fe07 	lsl.w	lr, lr, r7
 80082e8:	ea40 000e 	orr.w	r0, r0, lr
 80082ec:	b2c0      	uxtb	r0, r0
 80082ee:	3701      	adds	r7, #1
 80082f0:	2f08      	cmp	r7, #8
 80082f2:	44d4      	add	ip, sl
 80082f4:	d1ed      	bne.n	80082d2 <_DrawBitmap+0xa6e>
 80082f6:	7008      	strb	r0, [r1, #0]
 80082f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082fa:	6830      	ldr	r0, [r6, #0]
 80082fc:	4413      	add	r3, r2
 80082fe:	4401      	add	r1, r0
 8008300:	3d08      	subs	r5, #8
 8008302:	e7cc      	b.n	800829e <_DrawBitmap+0xa3a>

08008304 <GUIDRV__SPage_FlushCache.part.0>:
 8008304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008308:	4604      	mov	r4, r0
 800830a:	2500      	movs	r5, #0
 800830c:	69a2      	ldr	r2, [r4, #24]
 800830e:	4295      	cmp	r5, r2
 8008310:	db0d      	blt.n	800832e <GUIDRV__SPage_FlushCache.part.0+0x2a>
 8008312:	4d13      	ldr	r5, [pc, #76]	; (8008360 <GUIDRV__SPage_FlushCache.part.0+0x5c>)
 8008314:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008316:	682b      	ldr	r3, [r5, #0]
 8008318:	0052      	lsls	r2, r2, #1
 800831a:	21ff      	movs	r1, #255	; 0xff
 800831c:	4798      	blx	r3
 800831e:	69a2      	ldr	r2, [r4, #24]
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008324:	0052      	lsls	r2, r2, #1
 8008326:	2100      	movs	r1, #0
 8008328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800832c:	4718      	bx	r3
 800832e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008330:	f833 7015 	ldrh.w	r7, [r3, r5, lsl #1]
 8008334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008336:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
 800833a:	42b7      	cmp	r7, r6
 800833c:	d80d      	bhi.n	800835a <GUIDRV__SPage_FlushCache.part.0+0x56>
 800833e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008340:	462a      	mov	r2, r5
 8008342:	4639      	mov	r1, r7
 8008344:	4620      	mov	r0, r4
 8008346:	4798      	blx	r3
 8008348:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800834a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800834c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800834e:	1bf1      	subs	r1, r6, r7
 8008350:	fb00 7005 	mla	r0, r0, r5, r7
 8008354:	3101      	adds	r1, #1
 8008356:	4410      	add	r0, r2
 8008358:	4798      	blx	r3
 800835a:	3501      	adds	r5, #1
 800835c:	e7d6      	b.n	800830c <GUIDRV__SPage_FlushCache.part.0+0x8>
 800835e:	bf00      	nop
 8008360:	200000d4 	.word	0x200000d4

08008364 <GUIDRV__SPage_WriteCache>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4604      	mov	r4, r0
 8008368:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800836a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800836c:	fb00 1002 	mla	r0, r0, r2, r1
 8008370:	460e      	mov	r6, r1
 8008372:	4615      	mov	r5, r2
 8008374:	4619      	mov	r1, r3
 8008376:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008378:	4438      	add	r0, r7
 800837a:	4790      	blx	r2
 800837c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800837e:	b17b      	cbz	r3, 80083a0 <GUIDRV__SPage_WriteCache+0x3c>
 8008380:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008382:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8008386:	2301      	movs	r3, #1
 8008388:	428e      	cmp	r6, r1
 800838a:	6323      	str	r3, [r4, #48]	; 0x30
 800838c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800838e:	bfb8      	it	lt
 8008390:	f822 6015 	strhlt.w	r6, [r2, r5, lsl #1]
 8008394:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8008398:	4296      	cmp	r6, r2
 800839a:	bfc8      	it	gt
 800839c:	f823 6015 	strhgt.w	r6, [r3, r5, lsl #1]
 80083a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083a2 <GUIDRV__SPage_ReadCache>:
 80083a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80083a4:	fb03 1202 	mla	r2, r3, r2, r1
 80083a8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80083aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80083ac:	1888      	adds	r0, r1, r2
 80083ae:	4718      	bx	r3

080083b0 <GUIDRV__SPage_FlushCache>:
 80083b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80083b2:	b90b      	cbnz	r3, 80083b8 <GUIDRV__SPage_FlushCache+0x8>
 80083b4:	f7ff bfa6 	b.w	8008304 <GUIDRV__SPage_FlushCache.part.0>
 80083b8:	4770      	bx	lr

080083ba <GUIDRV__SPage_AddDirtyRect>:
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	2401      	movs	r4, #1
 80083be:	6304      	str	r4, [r0, #48]	; 0x30
 80083c0:	9d04      	ldr	r5, [sp, #16]
 80083c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80083c4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 80083c6:	f834 6011 	ldrh.w	r6, [r4, r1, lsl #1]
 80083ca:	429e      	cmp	r6, r3
 80083cc:	bfc8      	it	gt
 80083ce:	f824 3011 	strhgt.w	r3, [r4, r1, lsl #1]
 80083d2:	f830 6011 	ldrh.w	r6, [r0, r1, lsl #1]
 80083d6:	42ae      	cmp	r6, r5
 80083d8:	bfb8      	it	lt
 80083da:	f820 5011 	strhlt.w	r5, [r0, r1, lsl #1]
 80083de:	3101      	adds	r1, #1
 80083e0:	4291      	cmp	r1, r2
 80083e2:	ddf0      	ble.n	80083c6 <GUIDRV__SPage_AddDirtyRect+0xc>
 80083e4:	bd70      	pop	{r4, r5, r6, pc}

080083e6 <GUIDRV__SPage_ControlCache>:
 80083e6:	b538      	push	{r3, r4, r5, lr}
 80083e8:	2901      	cmp	r1, #1
 80083ea:	6884      	ldr	r4, [r0, #8]
 80083ec:	d00e      	beq.n	800840c <GUIDRV__SPage_ControlCache+0x26>
 80083ee:	2902      	cmp	r1, #2
 80083f0:	d001      	beq.n	80083f6 <GUIDRV__SPage_ControlCache+0x10>
 80083f2:	b961      	cbnz	r1, 800840e <GUIDRV__SPage_ControlCache+0x28>
 80083f4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80083f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80083f8:	b14b      	cbz	r3, 800840e <GUIDRV__SPage_ControlCache+0x28>
 80083fa:	2300      	movs	r3, #0
 80083fc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80083fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008402:	4620      	mov	r0, r4
 8008404:	f7ff ff7e 	bl	8008304 <GUIDRV__SPage_FlushCache.part.0>
 8008408:	62e5      	str	r5, [r4, #44]	; 0x2c
 800840a:	e000      	b.n	800840e <GUIDRV__SPage_ControlCache+0x28>
 800840c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800840e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008410:	bd38      	pop	{r3, r4, r5, pc}

08008412 <_SetAddr>:
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	69c4      	ldr	r4, [r0, #28]
 8008416:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8008418:	f002 020f 	and.w	r2, r2, #15
 800841c:	440c      	add	r4, r1
 800841e:	4605      	mov	r5, r0
 8008420:	f042 00b0 	orr.w	r0, r2, #176	; 0xb0
 8008424:	4798      	blx	r3
 8008426:	f3c4 1003 	ubfx	r0, r4, #4, #4
 800842a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800842c:	f040 0010 	orr.w	r0, r0, #16
 8008430:	4798      	blx	r3
 8008432:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8008434:	f004 000f 	and.w	r0, r4, #15
 8008438:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800843c:	4718      	bx	r3

0800843e <_ReadVMem>:
 800843e:	b513      	push	{r0, r1, r4, lr}
 8008440:	4604      	mov	r4, r0
 8008442:	f7ff ffe6 	bl	8008412 <_SetAddr>
 8008446:	a801      	add	r0, sp, #4
 8008448:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800844a:	2102      	movs	r1, #2
 800844c:	4798      	blx	r3
 800844e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8008452:	b002      	add	sp, #8
 8008454:	bd10      	pop	{r4, pc}

08008456 <_WriteVMem>:
 8008456:	b570      	push	{r4, r5, r6, lr}
 8008458:	4605      	mov	r5, r0
 800845a:	461c      	mov	r4, r3
 800845c:	f7ff ffd9 	bl	8008412 <_SetAddr>
 8008460:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8008462:	4620      	mov	r0, r4
 8008464:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008468:	4710      	bx	r2
	...

0800846c <GUIDRV_SPage_Set1510>:
 800846c:	6883      	ldr	r3, [r0, #8]
 800846e:	b14b      	cbz	r3, 8008484 <GUIDRV_SPage_Set1510+0x18>
 8008470:	4a05      	ldr	r2, [pc, #20]	; (8008488 <GUIDRV_SPage_Set1510+0x1c>)
 8008472:	645a      	str	r2, [r3, #68]	; 0x44
 8008474:	649a      	str	r2, [r3, #72]	; 0x48
 8008476:	4a05      	ldr	r2, [pc, #20]	; (800848c <GUIDRV_SPage_Set1510+0x20>)
 8008478:	64da      	str	r2, [r3, #76]	; 0x4c
 800847a:	4a05      	ldr	r2, [pc, #20]	; (8008490 <GUIDRV_SPage_Set1510+0x24>)
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
 800847e:	2201      	movs	r2, #1
 8008480:	611a      	str	r2, [r3, #16]
 8008482:	615a      	str	r2, [r3, #20]
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	08008413 	.word	0x08008413
 800848c:	0800843f 	.word	0x0800843f
 8008490:	08008457 	.word	0x08008457

08008494 <_SetDrawMode>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4b08      	ldr	r3, [pc, #32]	; (80084b8 <_SetDrawMode+0x24>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	7c1a      	ldrb	r2, [r3, #16]
 800849c:	ea82 0100 	eor.w	r1, r2, r0
 80084a0:	0749      	lsls	r1, r1, #29
 80084a2:	d505      	bpl.n	80084b0 <_SetDrawMode+0x1c>
 80084a4:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80084a6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80084a8:	6825      	ldr	r5, [r4, #0]
 80084aa:	680e      	ldr	r6, [r1, #0]
 80084ac:	6026      	str	r6, [r4, #0]
 80084ae:	600d      	str	r5, [r1, #0]
 80084b0:	7418      	strb	r0, [r3, #16]
 80084b2:	4610      	mov	r0, r2
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
 80084b6:	bf00      	nop
 80084b8:	200000d8 	.word	0x200000d8

080084bc <LCD_SetDrawMode>:
 80084bc:	4b01      	ldr	r3, [pc, #4]	; (80084c4 <LCD_SetDrawMode+0x8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	4718      	bx	r3
 80084c4:	200000f8 	.word	0x200000f8

080084c8 <LCD_DrawPixel>:
 80084c8:	4b15      	ldr	r3, [pc, #84]	; (8008520 <LCD_DrawPixel+0x58>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	460a      	mov	r2, r1
 80084ce:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80084d2:	4291      	cmp	r1, r2
 80084d4:	b430      	push	{r4, r5}
 80084d6:	4604      	mov	r4, r0
 80084d8:	dc20      	bgt.n	800851c <LCD_DrawPixel+0x54>
 80084da:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80084de:	428a      	cmp	r2, r1
 80084e0:	dc1c      	bgt.n	800851c <LCD_DrawPixel+0x54>
 80084e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80084e6:	4281      	cmp	r1, r0
 80084e8:	dc18      	bgt.n	800851c <LCD_DrawPixel+0x54>
 80084ea:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 80084ee:	4288      	cmp	r0, r1
 80084f0:	dc14      	bgt.n	800851c <LCD_DrawPixel+0x54>
 80084f2:	7c19      	ldrb	r1, [r3, #16]
 80084f4:	7c58      	ldrb	r0, [r3, #17]
 80084f6:	f011 0f01 	tst.w	r1, #1
 80084fa:	490a      	ldr	r1, [pc, #40]	; (8008524 <LCD_DrawPixel+0x5c>)
 80084fc:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8008500:	d004      	beq.n	800850c <LCD_DrawPixel+0x44>
 8008502:	68c3      	ldr	r3, [r0, #12]
 8008504:	4621      	mov	r1, r4
 8008506:	69db      	ldr	r3, [r3, #28]
 8008508:	bc30      	pop	{r4, r5}
 800850a:	4718      	bx	r3
 800850c:	68c1      	ldr	r1, [r0, #12]
 800850e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008510:	698d      	ldr	r5, [r1, #24]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4621      	mov	r1, r4
 8008516:	46ac      	mov	ip, r5
 8008518:	bc30      	pop	{r4, r5}
 800851a:	4760      	bx	ip
 800851c:	bc30      	pop	{r4, r5}
 800851e:	4770      	bx	lr
 8008520:	200000d8 	.word	0x200000d8
 8008524:	200089b8 	.word	0x200089b8

08008528 <LCD_DrawHLine>:
 8008528:	4b12      	ldr	r3, [pc, #72]	; (8008574 <LCD_DrawHLine+0x4c>)
 800852a:	b470      	push	{r4, r5, r6}
 800852c:	681c      	ldr	r4, [r3, #0]
 800852e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8008532:	428b      	cmp	r3, r1
 8008534:	460e      	mov	r6, r1
 8008536:	dc1a      	bgt.n	800856e <LCD_DrawHLine+0x46>
 8008538:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800853c:	4299      	cmp	r1, r3
 800853e:	dc16      	bgt.n	800856e <LCD_DrawHLine+0x46>
 8008540:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8008544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008548:	4285      	cmp	r5, r0
 800854a:	4629      	mov	r1, r5
 800854c:	bfb8      	it	lt
 800854e:	4601      	movlt	r1, r0
 8008550:	4293      	cmp	r3, r2
 8008552:	bfa8      	it	ge
 8008554:	4613      	movge	r3, r2
 8008556:	4299      	cmp	r1, r3
 8008558:	dc09      	bgt.n	800856e <LCD_DrawHLine+0x46>
 800855a:	7c60      	ldrb	r0, [r4, #17]
 800855c:	4a06      	ldr	r2, [pc, #24]	; (8008578 <LCD_DrawHLine+0x50>)
 800855e:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8008562:	68c2      	ldr	r2, [r0, #12]
 8008564:	6894      	ldr	r4, [r2, #8]
 8008566:	4632      	mov	r2, r6
 8008568:	46a4      	mov	ip, r4
 800856a:	bc70      	pop	{r4, r5, r6}
 800856c:	4760      	bx	ip
 800856e:	bc70      	pop	{r4, r5, r6}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	200000d8 	.word	0x200000d8
 8008578:	200089b8 	.word	0x200089b8

0800857c <LCD_DrawVLine>:
 800857c:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <LCD_DrawVLine+0x4c>)
 800857e:	b430      	push	{r4, r5}
 8008580:	681c      	ldr	r4, [r3, #0]
 8008582:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 8008586:	4283      	cmp	r3, r0
 8008588:	dc1b      	bgt.n	80085c2 <LCD_DrawVLine+0x46>
 800858a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800858e:	4298      	cmp	r0, r3
 8008590:	dc17      	bgt.n	80085c2 <LCD_DrawVLine+0x46>
 8008592:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 8008596:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 800859a:	42a9      	cmp	r1, r5
 800859c:	bfb8      	it	lt
 800859e:	4629      	movlt	r1, r5
 80085a0:	4293      	cmp	r3, r2
 80085a2:	bfa8      	it	ge
 80085a4:	4613      	movge	r3, r2
 80085a6:	4299      	cmp	r1, r3
 80085a8:	dc0b      	bgt.n	80085c2 <LCD_DrawVLine+0x46>
 80085aa:	4a08      	ldr	r2, [pc, #32]	; (80085cc <LCD_DrawVLine+0x50>)
 80085ac:	7c64      	ldrb	r4, [r4, #17]
 80085ae:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80085b2:	68e2      	ldr	r2, [r4, #12]
 80085b4:	68d5      	ldr	r5, [r2, #12]
 80085b6:	460a      	mov	r2, r1
 80085b8:	46ac      	mov	ip, r5
 80085ba:	4601      	mov	r1, r0
 80085bc:	4620      	mov	r0, r4
 80085be:	bc30      	pop	{r4, r5}
 80085c0:	4760      	bx	ip
 80085c2:	bc30      	pop	{r4, r5}
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	200000d8 	.word	0x200000d8
 80085cc:	200089b8 	.word	0x200089b8

080085d0 <LCD_FillRect>:
 80085d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085d2:	4c13      	ldr	r4, [pc, #76]	; (8008620 <LCD_FillRect+0x50>)
 80085d4:	6824      	ldr	r4, [r4, #0]
 80085d6:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80085da:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80085de:	4285      	cmp	r5, r0
 80085e0:	bfb8      	it	lt
 80085e2:	4605      	movlt	r5, r0
 80085e4:	4296      	cmp	r6, r2
 80085e6:	bfa8      	it	ge
 80085e8:	4616      	movge	r6, r2
 80085ea:	42ae      	cmp	r6, r5
 80085ec:	db15      	blt.n	800861a <LCD_FillRect+0x4a>
 80085ee:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80085f2:	428a      	cmp	r2, r1
 80085f4:	bfb8      	it	lt
 80085f6:	460a      	movlt	r2, r1
 80085f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085fc:	428b      	cmp	r3, r1
 80085fe:	bfa8      	it	ge
 8008600:	460b      	movge	r3, r1
 8008602:	429a      	cmp	r2, r3
 8008604:	dc09      	bgt.n	800861a <LCD_FillRect+0x4a>
 8008606:	7c60      	ldrb	r0, [r4, #17]
 8008608:	4906      	ldr	r1, [pc, #24]	; (8008624 <LCD_FillRect+0x54>)
 800860a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800860e:	68c1      	ldr	r1, [r0, #12]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	690c      	ldr	r4, [r1, #16]
 8008614:	4633      	mov	r3, r6
 8008616:	4629      	mov	r1, r5
 8008618:	47a0      	blx	r4
 800861a:	b002      	add	sp, #8
 800861c:	bd70      	pop	{r4, r5, r6, pc}
 800861e:	bf00      	nop
 8008620:	200000d8 	.word	0x200000d8
 8008624:	200089b8 	.word	0x200089b8

08008628 <LCD__DrawBitmap_1bpp>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b08f      	sub	sp, #60	; 0x3c
 800862e:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 80087f4 <LCD__DrawBitmap_1bpp+0x1cc>
 8008632:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8008634:	9502      	str	r5, [sp, #8]
 8008636:	f8de e000 	ldr.w	lr, [lr]
 800863a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800863c:	9508      	str	r5, [sp, #32]
 800863e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008640:	9503      	str	r5, [sp, #12]
 8008642:	9007      	str	r0, [sp, #28]
 8008644:	460c      	mov	r4, r1
 8008646:	4617      	mov	r7, r2
 8008648:	9301      	str	r3, [sp, #4]
 800864a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800864e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8008650:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8008654:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8008656:	f1be 0f00 	cmp.w	lr, #0
 800865a:	d006      	beq.n	800866a <LCD__DrawBitmap_1bpp+0x42>
 800865c:	f8de 4000 	ldr.w	r4, [lr]
 8008660:	46a4      	mov	ip, r4
 8008662:	b00f      	add	sp, #60	; 0x3c
 8008664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	4760      	bx	ip
 800866a:	9b02      	ldr	r3, [sp, #8]
 800866c:	9a08      	ldr	r2, [sp, #32]
 800866e:	4313      	orrs	r3, r2
 8008670:	2b01      	cmp	r3, #1
 8008672:	d14d      	bne.n	8008710 <LCD__DrawBitmap_1bpp+0xe8>
 8008674:	4b5d      	ldr	r3, [pc, #372]	; (80087ec <LCD__DrawBitmap_1bpp+0x1c4>)
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800867c:	1a53      	subs	r3, r2, r1
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd42      	ble.n	8008708 <LCD__DrawBitmap_1bpp+0xe0>
 8008682:	9901      	ldr	r1, [sp, #4]
 8008684:	eba1 0e03 	sub.w	lr, r1, r3
 8008688:	f1be 0f00 	cmp.w	lr, #0
 800868c:	dd4f      	ble.n	800872e <LCD__DrawBitmap_1bpp+0x106>
 800868e:	9903      	ldr	r1, [sp, #12]
 8008690:	fb01 6603 	mla	r6, r1, r3, r6
 8008694:	9b01      	ldr	r3, [sp, #4]
 8008696:	441c      	add	r4, r3
 8008698:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 800869c:	3c01      	subs	r4, #1
 800869e:	1ae4      	subs	r4, r4, r3
 80086a0:	2c00      	cmp	r4, #0
 80086a2:	dd04      	ble.n	80086ae <LCD__DrawBitmap_1bpp+0x86>
 80086a4:	ebae 0e04 	sub.w	lr, lr, r4
 80086a8:	f1be 0f00 	cmp.w	lr, #0
 80086ac:	dd3f      	ble.n	800872e <LCD__DrawBitmap_1bpp+0x106>
 80086ae:	9b07      	ldr	r3, [sp, #28]
 80086b0:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80086b4:	443b      	add	r3, r7
 80086b6:	3b01      	subs	r3, #1
 80086b8:	1a5b      	subs	r3, r3, r1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfc8      	it	gt
 80086be:	1aff      	subgt	r7, r7, r3
 80086c0:	9b07      	ldr	r3, [sp, #28]
 80086c2:	1b59      	subs	r1, r3, r5
 80086c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80086c8:	4299      	cmp	r1, r3
 80086ca:	da09      	bge.n	80086e0 <LCD__DrawBitmap_1bpp+0xb8>
 80086cc:	1a5b      	subs	r3, r3, r1
 80086ce:	441d      	add	r5, r3
 80086d0:	1aff      	subs	r7, r7, r3
 80086d2:	f023 0307 	bic.w	r3, r3, #7
 80086d6:	eb06 06e5 	add.w	r6, r6, r5, asr #3
 80086da:	4419      	add	r1, r3
 80086dc:	f005 0507 	and.w	r5, r5, #7
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	dd24      	ble.n	800872e <LCD__DrawBitmap_1bpp+0x106>
 80086e4:	7c40      	ldrb	r0, [r0, #17]
 80086e6:	4b42      	ldr	r3, [pc, #264]	; (80087f0 <LCD__DrawBitmap_1bpp+0x1c8>)
 80086e8:	9c03      	ldr	r4, [sp, #12]
 80086ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80086ee:	68c3      	ldr	r3, [r0, #12]
 80086f0:	f8cd b074 	str.w	fp, [sp, #116]	; 0x74
 80086f4:	951c      	str	r5, [sp, #112]	; 0x70
 80086f6:	961b      	str	r6, [sp, #108]	; 0x6c
 80086f8:	941a      	str	r4, [sp, #104]	; 0x68
 80086fa:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 80086fe:	f8cd e060 	str.w	lr, [sp, #96]	; 0x60
 8008702:	685c      	ldr	r4, [r3, #4]
 8008704:	463b      	mov	r3, r7
 8008706:	e7ab      	b.n	8008660 <LCD__DrawBitmap_1bpp+0x38>
 8008708:	f8dd e004 	ldr.w	lr, [sp, #4]
 800870c:	460a      	mov	r2, r1
 800870e:	e7c1      	b.n	8008694 <LCD__DrawBitmap_1bpp+0x6c>
 8008710:	f1ca 0308 	rsb	r3, sl, #8
 8008714:	930b      	str	r3, [sp, #44]	; 0x2c
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80087ec <LCD__DrawBitmap_1bpp+0x1c4>
 800871c:	f8cd e014 	str.w	lr, [sp, #20]
 8008720:	3b01      	subs	r3, #1
 8008722:	4675      	mov	r5, lr
 8008724:	930d      	str	r3, [sp, #52]	; 0x34
 8008726:	9b05      	ldr	r3, [sp, #20]
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	4293      	cmp	r3, r2
 800872c:	db02      	blt.n	8008734 <LCD__DrawBitmap_1bpp+0x10c>
 800872e:	b00f      	add	sp, #60	; 0x3c
 8008730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	18e3      	adds	r3, r4, r3
 8008738:	9309      	str	r3, [sp, #36]	; 0x24
 800873a:	3b01      	subs	r3, #1
 800873c:	930a      	str	r3, [sp, #40]	; 0x28
 800873e:	f8d9 3000 	ldr.w	r3, [r9]
 8008742:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008744:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008748:	428a      	cmp	r2, r1
 800874a:	dc0d      	bgt.n	8008768 <LCD__DrawBitmap_1bpp+0x140>
 800874c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008750:	429c      	cmp	r4, r3
 8008752:	dc09      	bgt.n	8008768 <LCD__DrawBitmap_1bpp+0x140>
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	9606      	str	r6, [sp, #24]
 8008758:	f04f 0800 	mov.w	r8, #0
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	f8cd 8010 	str.w	r8, [sp, #16]
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	42bb      	cmp	r3, r7
 8008766:	db06      	blt.n	8008776 <LCD__DrawBitmap_1bpp+0x14e>
 8008768:	9b05      	ldr	r3, [sp, #20]
 800876a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800876c:	3301      	adds	r3, #1
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	441e      	add	r6, r3
 8008774:	e7d7      	b.n	8008726 <LCD__DrawBitmap_1bpp+0xfe>
 8008776:	f1b8 0f00 	cmp.w	r8, #0
 800877a:	d105      	bne.n	8008788 <LCD__DrawBitmap_1bpp+0x160>
 800877c:	9b06      	ldr	r3, [sp, #24]
 800877e:	781d      	ldrb	r5, [r3, #0]
 8008780:	3301      	adds	r3, #1
 8008782:	9306      	str	r3, [sp, #24]
 8008784:	f04f 0808 	mov.w	r8, #8
 8008788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800878a:	fa45 f303 	asr.w	r3, r5, r3
 800878e:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 8008792:	fa05 f50a 	lsl.w	r5, r5, sl
 8008796:	b2ed      	uxtb	r5, r5
 8008798:	eba8 080a 	sub.w	r8, r8, sl
 800879c:	d104      	bne.n	80087a8 <LCD__DrawBitmap_1bpp+0x180>
 800879e:	f8d9 2000 	ldr.w	r2, [r9]
 80087a2:	7c12      	ldrb	r2, [r2, #16]
 80087a4:	0792      	lsls	r2, r2, #30
 80087a6:	d417      	bmi.n	80087d8 <LCD__DrawBitmap_1bpp+0x1b0>
 80087a8:	f8d9 2000 	ldr.w	r2, [r9]
 80087ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80087ae:	6810      	ldr	r0, [r2, #0]
 80087b0:	900c      	str	r0, [sp, #48]	; 0x30
 80087b2:	f1bb 0f00 	cmp.w	fp, #0
 80087b6:	d017      	beq.n	80087e8 <LCD__DrawBitmap_1bpp+0x1c0>
 80087b8:	f85b 3021 	ldr.w	r3, [fp, r1, lsl #2]
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	9900      	ldr	r1, [sp, #0]
 80087c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087c4:	9800      	ldr	r0, [sp, #0]
 80087c6:	440a      	add	r2, r1
 80087c8:	4621      	mov	r1, r4
 80087ca:	f7ff ff01 	bl	80085d0 <LCD_FillRect>
 80087ce:	f8d9 3000 	ldr.w	r3, [r9]
 80087d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80087d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	9b04      	ldr	r3, [sp, #16]
 80087da:	9a02      	ldr	r2, [sp, #8]
 80087dc:	3301      	adds	r3, #1
 80087de:	9304      	str	r3, [sp, #16]
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	4413      	add	r3, r2
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	e7bc      	b.n	8008762 <LCD__DrawBitmap_1bpp+0x13a>
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	e7e7      	b.n	80087bc <LCD__DrawBitmap_1bpp+0x194>
 80087ec:	200000d8 	.word	0x200000d8
 80087f0:	200089b8 	.word	0x200089b8
 80087f4:	20008974 	.word	0x20008974

080087f8 <LCD_DrawBitmap>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	b08f      	sub	sp, #60	; 0x3c
 80087fe:	f8df e210 	ldr.w	lr, [pc, #528]	; 8008a10 <LCD_DrawBitmap+0x218>
 8008802:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8008804:	9402      	str	r4, [sp, #8]
 8008806:	f8de b000 	ldr.w	fp, [lr]
 800880a:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800880c:	9408      	str	r4, [sp, #32]
 800880e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008810:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8008812:	9403      	str	r4, [sp, #12]
 8008814:	4605      	mov	r5, r0
 8008816:	9100      	str	r1, [sp, #0]
 8008818:	4690      	mov	r8, r2
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800881e:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008820:	9604      	str	r6, [sp, #16]
 8008822:	f1bb 0f00 	cmp.w	fp, #0
 8008826:	d006      	beq.n	8008836 <LCD_DrawBitmap+0x3e>
 8008828:	f8db 4000 	ldr.w	r4, [fp]
 800882c:	46a4      	mov	ip, r4
 800882e:	b00f      	add	sp, #60	; 0x3c
 8008830:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008834:	4760      	bx	ip
 8008836:	9b02      	ldr	r3, [sp, #8]
 8008838:	9a08      	ldr	r2, [sp, #32]
 800883a:	4313      	orrs	r3, r2
 800883c:	2b01      	cmp	r3, #1
 800883e:	d174      	bne.n	800892a <LCD_DrawBitmap+0x132>
 8008840:	4b71      	ldr	r3, [pc, #452]	; (8008a08 <LCD_DrawBitmap+0x210>)
 8008842:	9901      	ldr	r1, [sp, #4]
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	9b00      	ldr	r3, [sp, #0]
 8008848:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd33      	ble.n	80088ba <LCD_DrawBitmap+0xc2>
 8008852:	1ac9      	subs	r1, r1, r3
 8008854:	2900      	cmp	r1, #0
 8008856:	dd76      	ble.n	8008946 <LCD_DrawBitmap+0x14e>
 8008858:	9e03      	ldr	r6, [sp, #12]
 800885a:	fb06 4403 	mla	r4, r6, r3, r4
 800885e:	e89d 0048 	ldmia.w	sp, {r3, r6}
 8008862:	441e      	add	r6, r3
 8008864:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8008868:	3e01      	subs	r6, #1
 800886a:	1af6      	subs	r6, r6, r3
 800886c:	2e00      	cmp	r6, #0
 800886e:	dd02      	ble.n	8008876 <LCD_DrawBitmap+0x7e>
 8008870:	1b89      	subs	r1, r1, r6
 8008872:	2900      	cmp	r1, #0
 8008874:	dd67      	ble.n	8008946 <LCD_DrawBitmap+0x14e>
 8008876:	eb05 0308 	add.w	r3, r5, r8
 800887a:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 800887e:	3b01      	subs	r3, #1
 8008880:	1b9b      	subs	r3, r3, r6
 8008882:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfc8      	it	gt
 800888a:	eba8 0803 	subgt.w	r8, r8, r3
 800888e:	42b5      	cmp	r5, r6
 8008890:	da43      	bge.n	800891a <LCD_DrawBitmap+0x122>
 8008892:	1b73      	subs	r3, r6, r5
 8008894:	2f08      	cmp	r7, #8
 8008896:	eba8 0803 	sub.w	r8, r8, r3
 800889a:	d03c      	beq.n	8008916 <LCD_DrawBitmap+0x11e>
 800889c:	dc0f      	bgt.n	80088be <LCD_DrawBitmap+0xc6>
 800889e:	2f02      	cmp	r7, #2
 80088a0:	d029      	beq.n	80088f6 <LCD_DrawBitmap+0xfe>
 80088a2:	2f04      	cmp	r7, #4
 80088a4:	d02f      	beq.n	8008906 <LCD_DrawBitmap+0x10e>
 80088a6:	2f01      	cmp	r7, #1
 80088a8:	d10f      	bne.n	80088ca <LCD_DrawBitmap+0xd2>
 80088aa:	f023 0607 	bic.w	r6, r3, #7
 80088ae:	eb04 04e3 	add.w	r4, r4, r3, asr #3
 80088b2:	4435      	add	r5, r6
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	e007      	b.n	80088ca <LCD_DrawBitmap+0xd2>
 80088ba:	9a00      	ldr	r2, [sp, #0]
 80088bc:	e7cf      	b.n	800885e <LCD_DrawBitmap+0x66>
 80088be:	2f18      	cmp	r7, #24
 80088c0:	d030      	beq.n	8008924 <LCD_DrawBitmap+0x12c>
 80088c2:	2f20      	cmp	r7, #32
 80088c4:	d02e      	beq.n	8008924 <LCD_DrawBitmap+0x12c>
 80088c6:	2f10      	cmp	r7, #16
 80088c8:	d029      	beq.n	800891e <LCD_DrawBitmap+0x126>
 80088ca:	f1b8 0f00 	cmp.w	r8, #0
 80088ce:	dd3a      	ble.n	8008946 <LCD_DrawBitmap+0x14e>
 80088d0:	7c46      	ldrb	r6, [r0, #17]
 80088d2:	484e      	ldr	r0, [pc, #312]	; (8008a0c <LCD_DrawBitmap+0x214>)
 80088d4:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 80088d8:	9e04      	ldr	r6, [sp, #16]
 80088da:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80088de:	931c      	str	r3, [sp, #112]	; 0x70
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	931a      	str	r3, [sp, #104]	; 0x68
 80088e4:	9118      	str	r1, [sp, #96]	; 0x60
 80088e6:	961d      	str	r6, [sp, #116]	; 0x74
 80088e8:	941b      	str	r4, [sp, #108]	; 0x6c
 80088ea:	9719      	str	r7, [sp, #100]	; 0x64
 80088ec:	f8de 4004 	ldr.w	r4, [lr, #4]
 80088f0:	4643      	mov	r3, r8
 80088f2:	4629      	mov	r1, r5
 80088f4:	e79a      	b.n	800882c <LCD_DrawBitmap+0x34>
 80088f6:	f023 0603 	bic.w	r6, r3, #3
 80088fa:	eb04 04a3 	add.w	r4, r4, r3, asr #2
 80088fe:	4435      	add	r5, r6
 8008900:	f003 0303 	and.w	r3, r3, #3
 8008904:	e7e1      	b.n	80088ca <LCD_DrawBitmap+0xd2>
 8008906:	f023 0601 	bic.w	r6, r3, #1
 800890a:	eb04 0463 	add.w	r4, r4, r3, asr #1
 800890e:	4435      	add	r5, r6
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	e7d9      	b.n	80088ca <LCD_DrawBitmap+0xd2>
 8008916:	441c      	add	r4, r3
 8008918:	4635      	mov	r5, r6
 800891a:	2300      	movs	r3, #0
 800891c:	e7d5      	b.n	80088ca <LCD_DrawBitmap+0xd2>
 800891e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8008922:	e7f9      	b.n	8008918 <LCD_DrawBitmap+0x120>
 8008924:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008928:	e7f6      	b.n	8008918 <LCD_DrawBitmap+0x120>
 800892a:	f1c7 0308 	rsb	r3, r7, #8
 800892e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008930:	9b02      	ldr	r3, [sp, #8]
 8008932:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a08 <LCD_DrawBitmap+0x210>
 8008936:	f8cd b018 	str.w	fp, [sp, #24]
 800893a:	3b01      	subs	r3, #1
 800893c:	930d      	str	r3, [sp, #52]	; 0x34
 800893e:	9b06      	ldr	r3, [sp, #24]
 8008940:	9a01      	ldr	r2, [sp, #4]
 8008942:	4293      	cmp	r3, r2
 8008944:	db02      	blt.n	800894c <LCD_DrawBitmap+0x154>
 8008946:	b00f      	add	sp, #60	; 0x3c
 8008948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894c:	9a00      	ldr	r2, [sp, #0]
 800894e:	9b08      	ldr	r3, [sp, #32]
 8008950:	4413      	add	r3, r2
 8008952:	9309      	str	r3, [sp, #36]	; 0x24
 8008954:	3b01      	subs	r3, #1
 8008956:	930a      	str	r3, [sp, #40]	; 0x28
 8008958:	f8da 3000 	ldr.w	r3, [sl]
 800895c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800895e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8008962:	428a      	cmp	r2, r1
 8008964:	dc0d      	bgt.n	8008982 <LCD_DrawBitmap+0x18a>
 8008966:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800896a:	9a00      	ldr	r2, [sp, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	dc08      	bgt.n	8008982 <LCD_DrawBitmap+0x18a>
 8008970:	f04f 0900 	mov.w	r9, #0
 8008974:	9407      	str	r4, [sp, #28]
 8008976:	462e      	mov	r6, r5
 8008978:	f8cd 9014 	str.w	r9, [sp, #20]
 800897c:	9b05      	ldr	r3, [sp, #20]
 800897e:	4543      	cmp	r3, r8
 8008980:	db07      	blt.n	8008992 <LCD_DrawBitmap+0x19a>
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	3301      	adds	r3, #1
 8008986:	9306      	str	r3, [sp, #24]
 8008988:	9b03      	ldr	r3, [sp, #12]
 800898a:	441c      	add	r4, r3
 800898c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	e7d5      	b.n	800893e <LCD_DrawBitmap+0x146>
 8008992:	f1b9 0f00 	cmp.w	r9, #0
 8008996:	d106      	bne.n	80089a6 <LCD_DrawBitmap+0x1ae>
 8008998:	9b07      	ldr	r3, [sp, #28]
 800899a:	f893 b000 	ldrb.w	fp, [r3]
 800899e:	3301      	adds	r3, #1
 80089a0:	9307      	str	r3, [sp, #28]
 80089a2:	f04f 0908 	mov.w	r9, #8
 80089a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a8:	fa4b f303 	asr.w	r3, fp, r3
 80089ac:	fa0b f207 	lsl.w	r2, fp, r7
 80089b0:	f013 01ff 	ands.w	r1, r3, #255	; 0xff
 80089b4:	fa5f fb82 	uxtb.w	fp, r2
 80089b8:	eba9 0907 	sub.w	r9, r9, r7
 80089bc:	d104      	bne.n	80089c8 <LCD_DrawBitmap+0x1d0>
 80089be:	f8da 2000 	ldr.w	r2, [sl]
 80089c2:	7c12      	ldrb	r2, [r2, #16]
 80089c4:	0792      	lsls	r2, r2, #30
 80089c6:	d415      	bmi.n	80089f4 <LCD_DrawBitmap+0x1fc>
 80089c8:	f8da 2000 	ldr.w	r2, [sl]
 80089cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80089ce:	6810      	ldr	r0, [r2, #0]
 80089d0:	900c      	str	r0, [sp, #48]	; 0x30
 80089d2:	9804      	ldr	r0, [sp, #16]
 80089d4:	b1b0      	cbz	r0, 8008a04 <LCD_DrawBitmap+0x20c>
 80089d6:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e0:	9900      	ldr	r1, [sp, #0]
 80089e2:	4432      	add	r2, r6
 80089e4:	4630      	mov	r0, r6
 80089e6:	f7ff fdf3 	bl	80085d0 <LCD_FillRect>
 80089ea:	f8da 3000 	ldr.w	r3, [sl]
 80089ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f2:	601a      	str	r2, [r3, #0]
 80089f4:	9b05      	ldr	r3, [sp, #20]
 80089f6:	9a02      	ldr	r2, [sp, #8]
 80089f8:	3301      	adds	r3, #1
 80089fa:	9305      	str	r3, [sp, #20]
 80089fc:	4633      	mov	r3, r6
 80089fe:	4413      	add	r3, r2
 8008a00:	461e      	mov	r6, r3
 8008a02:	e7bb      	b.n	800897c <LCD_DrawBitmap+0x184>
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	e7e8      	b.n	80089da <LCD_DrawBitmap+0x1e2>
 8008a08:	200000d8 	.word	0x200000d8
 8008a0c:	200089b8 	.word	0x200089b8
 8008a10:	20008974 	.word	0x20008974

08008a14 <LCD_SetClipRectMax>:
 8008a14:	4b04      	ldr	r3, [pc, #16]	; (8008a28 <LCD_SetClipRectMax+0x14>)
 8008a16:	6819      	ldr	r1, [r3, #0]
 8008a18:	4b04      	ldr	r3, [pc, #16]	; (8008a2c <LCD_SetClipRectMax+0x18>)
 8008a1a:	7c4a      	ldrb	r2, [r1, #17]
 8008a1c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008a20:	68c3      	ldr	r3, [r0, #12]
 8008a22:	3108      	adds	r1, #8
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	4718      	bx	r3
 8008a28:	200000d8 	.word	0x200000d8
 8008a2c:	200089b8 	.word	0x200089b8

08008a30 <LCD_Init>:
 8008a30:	b513      	push	{r0, r1, r4, lr}
 8008a32:	f7ff ffef 	bl	8008a14 <LCD_SetClipRectMax>
 8008a36:	f000 f8b3 	bl	8008ba0 <LCD_InitColors>
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	b950      	cbnz	r0, 8008a54 <LCD_Init+0x24>
 8008a3e:	f7fd fccd 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008a42:	9001      	str	r0, [sp, #4]
 8008a44:	b948      	cbnz	r0, 8008a5a <LCD_Init+0x2a>
 8008a46:	f000 f8ff 	bl	8008c48 <LCD_InitLUT>
 8008a4a:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <LCD_Init+0x8c>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b1c      	ldr	r3, [pc, #112]	; (8008ac0 <LCD_Init+0x90>)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d10f      	bne.n	8008a74 <LCD_Init+0x44>
 8008a54:	4620      	mov	r0, r4
 8008a56:	b002      	add	sp, #8
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	68c3      	ldr	r3, [r0, #12]
 8008a5c:	210c      	movs	r1, #12
 8008a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a60:	a801      	add	r0, sp, #4
 8008a62:	4798      	blx	r3
 8008a64:	4603      	mov	r3, r0
 8008a66:	b338      	cbz	r0, 8008ab8 <LCD_Init+0x88>
 8008a68:	9801      	ldr	r0, [sp, #4]
 8008a6a:	4798      	blx	r3
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d0ea      	beq.n	8008a46 <LCD_Init+0x16>
 8008a70:	4604      	mov	r4, r0
 8008a72:	e7ef      	b.n	8008a54 <LCD_Init+0x24>
 8008a74:	2000      	movs	r0, #0
 8008a76:	f7fd fcb1 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008a7a:	9001      	str	r0, [sp, #4]
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d0e9      	beq.n	8008a54 <LCD_Init+0x24>
 8008a80:	2000      	movs	r0, #0
 8008a82:	f002 fd59 	bl	800b538 <GUI_SelectLayer>
 8008a86:	2004      	movs	r0, #4
 8008a88:	f7ff fd18 	bl	80084bc <LCD_SetDrawMode>
 8008a8c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8008a90:	2100      	movs	r1, #0
 8008a92:	461a      	mov	r2, r3
 8008a94:	4608      	mov	r0, r1
 8008a96:	f7ff fd9b 	bl	80085d0 <LCD_FillRect>
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7ff fd0e 	bl	80084bc <LCD_SetDrawMode>
 8008aa0:	9b01      	ldr	r3, [sp, #4]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	210e      	movs	r1, #14
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	a801      	add	r0, sp, #4
 8008aaa:	4798      	blx	r3
 8008aac:	4603      	mov	r3, r0
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d0d0      	beq.n	8008a54 <LCD_Init+0x24>
 8008ab2:	9801      	ldr	r0, [sp, #4]
 8008ab4:	4798      	blx	r3
 8008ab6:	e7cd      	b.n	8008a54 <LCD_Init+0x24>
 8008ab8:	2401      	movs	r4, #1
 8008aba:	e7cb      	b.n	8008a54 <LCD_Init+0x24>
 8008abc:	200000e0 	.word	0x200000e0
 8008ac0:	12345678 	.word	0x12345678

08008ac4 <LCD_Color2Index>:
 8008ac4:	4b04      	ldr	r3, [pc, #16]	; (8008ad8 <LCD_Color2Index+0x14>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	7c5a      	ldrb	r2, [r3, #17]
 8008aca:	4b04      	ldr	r3, [pc, #16]	; (8008adc <LCD_Color2Index+0x18>)
 8008acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4718      	bx	r3
 8008ad6:	bf00      	nop
 8008ad8:	200000d8 	.word	0x200000d8
 8008adc:	200089b8 	.word	0x200089b8

08008ae0 <LCD_Index2Color>:
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <LCD_Index2Color+0x14>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	7c5a      	ldrb	r2, [r3, #17]
 8008ae6:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <LCD_Index2Color+0x18>)
 8008ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	4718      	bx	r3
 8008af2:	bf00      	nop
 8008af4:	200000d8 	.word	0x200000d8
 8008af8:	200089b8 	.word	0x200089b8

08008afc <LCD_SetColorIndex>:
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <LCD_SetColorIndex+0x14>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	7c1a      	ldrb	r2, [r3, #16]
 8008b02:	0752      	lsls	r2, r2, #29
 8008b04:	bf4c      	ite	mi
 8008b06:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 8008b08:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 8008b0a:	6018      	str	r0, [r3, #0]
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	200000d8 	.word	0x200000d8

08008b14 <_SetColor>:
 8008b14:	b508      	push	{r3, lr}
 8008b16:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <_SetColor+0x1c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008b1c:	4281      	cmp	r1, r0
 8008b1e:	d006      	beq.n	8008b2e <_SetColor+0x1a>
 8008b20:	6318      	str	r0, [r3, #48]	; 0x30
 8008b22:	f7ff ffcf 	bl	8008ac4 <LCD_Color2Index>
 8008b26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b2a:	f7ff bfe7 	b.w	8008afc <LCD_SetColorIndex>
 8008b2e:	bd08      	pop	{r3, pc}
 8008b30:	200000d8 	.word	0x200000d8

08008b34 <LCD_SetBkColorIndex>:
 8008b34:	4b04      	ldr	r3, [pc, #16]	; (8008b48 <LCD_SetBkColorIndex+0x14>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	7c1a      	ldrb	r2, [r3, #16]
 8008b3a:	0752      	lsls	r2, r2, #29
 8008b3c:	bf4c      	ite	mi
 8008b3e:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8008b40:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8008b42:	6018      	str	r0, [r3, #0]
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	200000d8 	.word	0x200000d8

08008b4c <_SetBkColor>:
 8008b4c:	b508      	push	{r3, lr}
 8008b4e:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <_SetBkColor+0x1c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008b54:	4281      	cmp	r1, r0
 8008b56:	d006      	beq.n	8008b66 <_SetBkColor+0x1a>
 8008b58:	6358      	str	r0, [r3, #52]	; 0x34
 8008b5a:	f7ff ffb3 	bl	8008ac4 <LCD_Color2Index>
 8008b5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008b62:	f7ff bfe7 	b.w	8008b34 <LCD_SetBkColorIndex>
 8008b66:	bd08      	pop	{r3, pc}
 8008b68:	200000d8 	.word	0x200000d8

08008b6c <LCD_SetBkColor>:
 8008b6c:	4b01      	ldr	r3, [pc, #4]	; (8008b74 <LCD_SetBkColor+0x8>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	4718      	bx	r3
 8008b74:	200000f8 	.word	0x200000f8

08008b78 <LCD_SetColor>:
 8008b78:	4b01      	ldr	r3, [pc, #4]	; (8008b80 <LCD_SetColor+0x8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4718      	bx	r3
 8008b80:	200000f8 	.word	0x200000f8

08008b84 <_OnExit>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	4c04      	ldr	r4, [pc, #16]	; (8008b98 <_OnExit+0x14>)
 8008b88:	6820      	ldr	r0, [r4, #0]
 8008b8a:	f7fc fe0b 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 8008b8e:	4a03      	ldr	r2, [pc, #12]	; (8008b9c <_OnExit+0x18>)
 8008b90:	2300      	movs	r3, #0
 8008b92:	6023      	str	r3, [r4, #0]
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	bd10      	pop	{r4, pc}
 8008b98:	200089c4 	.word	0x200089c4
 8008b9c:	200002dc 	.word	0x200002dc

08008ba0 <LCD_InitColors>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d0a      	ldr	r5, [pc, #40]	; (8008bcc <LCD_InitColors+0x2c>)
 8008ba4:	682c      	ldr	r4, [r5, #0]
 8008ba6:	b964      	cbnz	r4, 8008bc2 <LCD_InitColors+0x22>
 8008ba8:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <LCD_InitColors+0x30>)
 8008baa:	6818      	ldr	r0, [r3, #0]
 8008bac:	0080      	lsls	r0, r0, #2
 8008bae:	f7fc fedf 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 8008bb2:	6028      	str	r0, [r5, #0]
 8008bb4:	b138      	cbz	r0, 8008bc6 <LCD_InitColors+0x26>
 8008bb6:	4807      	ldr	r0, [pc, #28]	; (8008bd4 <LCD_InitColors+0x34>)
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <LCD_InitColors+0x38>)
 8008bba:	f840 3f04 	str.w	r3, [r0, #4]!
 8008bbe:	f7fd fb77 	bl	80062b0 <GUI__RegisterExit>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bd38      	pop	{r3, r4, r5, pc}
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	bf00      	nop
 8008bcc:	200089c4 	.word	0x200089c4
 8008bd0:	200000fc 	.word	0x200000fc
 8008bd4:	200002dc 	.word	0x200002dc
 8008bd8:	08008b85 	.word	0x08008b85

08008bdc <LCD_GetpPalConvTableUncached>:
 8008bdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008be0:	4604      	mov	r4, r0
 8008be2:	b328      	cbz	r0, 8008c30 <LCD_GetpPalConvTableUncached+0x54>
 8008be4:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8008be8:	f1b8 0f00 	cmp.w	r8, #0
 8008bec:	d020      	beq.n	8008c30 <LCD_GetpPalConvTableUncached+0x54>
 8008bee:	4d12      	ldr	r5, [pc, #72]	; (8008c38 <LCD_GetpPalConvTableUncached+0x5c>)
 8008bf0:	6828      	ldr	r0, [r5, #0]
 8008bf2:	b1f0      	cbz	r0, 8008c32 <LCD_GetpPalConvTableUncached+0x56>
 8008bf4:	6823      	ldr	r3, [r4, #0]
 8008bf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bfa:	dc19      	bgt.n	8008c30 <LCD_GetpPalConvTableUncached+0x54>
 8008bfc:	4a0f      	ldr	r2, [pc, #60]	; (8008c3c <LCD_GetpPalConvTableUncached+0x60>)
 8008bfe:	6817      	ldr	r7, [r2, #0]
 8008c00:	429f      	cmp	r7, r3
 8008c02:	bfa8      	it	ge
 8008c04:	461f      	movge	r7, r3
 8008c06:	2600      	movs	r6, #0
 8008c08:	42be      	cmp	r6, r7
 8008c0a:	db07      	blt.n	8008c1c <LCD_GetpPalConvTableUncached+0x40>
 8008c0c:	4b0c      	ldr	r3, [pc, #48]	; (8008c40 <LCD_GetpPalConvTableUncached+0x64>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	b10b      	cbz	r3, 8008c16 <LCD_GetpPalConvTableUncached+0x3a>
 8008c12:	4620      	mov	r0, r4
 8008c14:	4798      	blx	r3
 8008c16:	6828      	ldr	r0, [r5, #0]
 8008c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1c:	f858 0026 	ldr.w	r0, [r8, r6, lsl #2]
 8008c20:	f8d5 9000 	ldr.w	r9, [r5]
 8008c24:	f7ff ff4e 	bl	8008ac4 <LCD_Color2Index>
 8008c28:	f849 0026 	str.w	r0, [r9, r6, lsl #2]
 8008c2c:	3601      	adds	r6, #1
 8008c2e:	e7eb      	b.n	8008c08 <LCD_GetpPalConvTableUncached+0x2c>
 8008c30:	2000      	movs	r0, #0
 8008c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c36:	bf00      	nop
 8008c38:	200089c4 	.word	0x200089c4
 8008c3c:	200000fc 	.word	0x200000fc
 8008c40:	200002dc 	.word	0x200002dc

08008c44 <LCD_GetpPalConvTableBM>:
 8008c44:	f7ff bfca 	b.w	8008bdc <LCD_GetpPalConvTableUncached>

08008c48 <LCD_InitLUT>:
 8008c48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	f000 f92d 	bl	8008eaa <LCD_GetNumLayers>
 8008c50:	4e19      	ldr	r6, [pc, #100]	; (8008cb8 <LCD_InitLUT+0x70>)
 8008c52:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8008cc0 <LCD_InitLUT+0x78>
 8008c56:	4680      	mov	r8, r0
 8008c58:	2400      	movs	r4, #0
 8008c5a:	4544      	cmp	r4, r8
 8008c5c:	db01      	blt.n	8008c62 <LCD_InitLUT+0x1a>
 8008c5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c62:	4620      	mov	r0, r4
 8008c64:	f7fd fbba 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008c68:	b158      	cbz	r0, 8008c82 <LCD_InitLUT+0x3a>
 8008c6a:	6833      	ldr	r3, [r6, #0]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	f893 a011 	ldrb.w	sl, [r3, #17]
 8008c72:	745c      	strb	r4, [r3, #17]
 8008c74:	f000 f85c 	bl	8008d30 <LCD_GetBitsPerPixelEx>
 8008c78:	2808      	cmp	r0, #8
 8008c7a:	dd04      	ble.n	8008c86 <LCD_InitLUT+0x3e>
 8008c7c:	6833      	ldr	r3, [r6, #0]
 8008c7e:	f883 a011 	strb.w	sl, [r3, #17]
 8008c82:	3401      	adds	r4, #1
 8008c84:	e7e9      	b.n	8008c5a <LCD_InitLUT+0x12>
 8008c86:	f859 3024 	ldr.w	r3, [r9, r4, lsl #2]
 8008c8a:	691a      	ldr	r2, [r3, #16]
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <LCD_InitLUT+0x74>)
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d0f4      	beq.n	8008c7c <LCD_InitLUT+0x34>
 8008c92:	4620      	mov	r0, r4
 8008c94:	f000 f84f 	bl	8008d36 <LCD_GetNumColorsEx>
 8008c98:	2500      	movs	r5, #0
 8008c9a:	4683      	mov	fp, r0
 8008c9c:	455d      	cmp	r5, fp
 8008c9e:	daed      	bge.n	8008c7c <LCD_InitLUT+0x34>
 8008ca0:	b2ef      	uxtb	r7, r5
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f7ff ff1c 	bl	8008ae0 <LCD_Index2Color>
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4602      	mov	r2, r0
 8008cac:	4620      	mov	r0, r4
 8008cae:	f000 f925 	bl	8008efc <LCD_SetLUTEntryEx>
 8008cb2:	3501      	adds	r5, #1
 8008cb4:	e7f2      	b.n	8008c9c <LCD_InitLUT+0x54>
 8008cb6:	bf00      	nop
 8008cb8:	200000d8 	.word	0x200000d8
 8008cbc:	08010c74 	.word	0x08010c74
 8008cc0:	200089b8 	.word	0x200089b8

08008cc4 <LCD_GetBkColorIndex>:
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <LCD_GetBkColorIndex+0xc>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	6818      	ldr	r0, [r3, #0]
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	200000d8 	.word	0x200000d8

08008cd4 <LCD_GetColorIndex>:
 8008cd4:	4b02      	ldr	r3, [pc, #8]	; (8008ce0 <LCD_GetColorIndex+0xc>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	200000d8 	.word	0x200000d8

08008ce4 <_GetDevProp.part.0>:
 8008ce4:	b510      	push	{r4, lr}
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	f7fd fb78 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008cec:	b128      	cbz	r0, 8008cfa <_GetDevProp.part.0+0x16>
 8008cee:	68c3      	ldr	r3, [r0, #12]
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf8:	4718      	bx	r3
 8008cfa:	bd10      	pop	{r4, pc}

08008cfc <_GetDevProp>:
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	dc01      	bgt.n	8008d04 <_GetDevProp+0x8>
 8008d00:	f7ff bff0 	b.w	8008ce4 <_GetDevProp.part.0>
 8008d04:	2000      	movs	r0, #0
 8008d06:	4770      	bx	lr

08008d08 <_GetMaxValue>:
 8008d08:	b508      	push	{r3, lr}
 8008d0a:	4601      	mov	r1, r0
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f7ff ffe9 	bl	8008ce4 <_GetDevProp.part.0>
 8008d12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008d16:	bd08      	pop	{r3, pc}

08008d18 <LCD_GetXSizeEx>:
 8008d18:	2101      	movs	r1, #1
 8008d1a:	f7ff bfef 	b.w	8008cfc <_GetDevProp>

08008d1e <LCD_GetYSizeEx>:
 8008d1e:	2102      	movs	r1, #2
 8008d20:	f7ff bfec 	b.w	8008cfc <_GetDevProp>

08008d24 <LCD_GetVXSizeEx>:
 8008d24:	2103      	movs	r1, #3
 8008d26:	f7ff bfe9 	b.w	8008cfc <_GetDevProp>

08008d2a <LCD_GetVYSizeEx>:
 8008d2a:	2104      	movs	r1, #4
 8008d2c:	f7ff bfe6 	b.w	8008cfc <_GetDevProp>

08008d30 <LCD_GetBitsPerPixelEx>:
 8008d30:	2108      	movs	r1, #8
 8008d32:	f7ff bfe3 	b.w	8008cfc <_GetDevProp>

08008d36 <LCD_GetNumColorsEx>:
 8008d36:	2109      	movs	r1, #9
 8008d38:	f7ff bfe0 	b.w	8008cfc <_GetDevProp>

08008d3c <LCD_GetXSize>:
 8008d3c:	4b02      	ldr	r3, [pc, #8]	; (8008d48 <LCD_GetXSize+0xc>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	7c58      	ldrb	r0, [r3, #17]
 8008d42:	f7ff bfe9 	b.w	8008d18 <LCD_GetXSizeEx>
 8008d46:	bf00      	nop
 8008d48:	200000d8 	.word	0x200000d8

08008d4c <LCD_GetYSize>:
 8008d4c:	4b02      	ldr	r3, [pc, #8]	; (8008d58 <LCD_GetYSize+0xc>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	7c58      	ldrb	r0, [r3, #17]
 8008d52:	f7ff bfe4 	b.w	8008d1e <LCD_GetYSizeEx>
 8008d56:	bf00      	nop
 8008d58:	200000d8 	.word	0x200000d8

08008d5c <LCD_GetNumColors>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <LCD_GetNumColors+0xc>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	7c58      	ldrb	r0, [r3, #17]
 8008d62:	f7ff bfe8 	b.w	8008d36 <LCD_GetNumColorsEx>
 8008d66:	bf00      	nop
 8008d68:	200000d8 	.word	0x200000d8

08008d6c <GUI_GetBitsPerPixelEx>:
 8008d6c:	4b03      	ldr	r3, [pc, #12]	; (8008d7c <GUI_GetBitsPerPixelEx+0x10>)
 8008d6e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008d72:	68c3      	ldr	r3, [r0, #12]
 8008d74:	2108      	movs	r1, #8
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	4718      	bx	r3
 8008d7a:	bf00      	nop
 8008d7c:	200089b8 	.word	0x200089b8

08008d80 <LCD_GetPaletteEx>:
 8008d80:	b510      	push	{r4, lr}
 8008d82:	f7fd fb2b 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008d86:	b128      	cbz	r0, 8008d94 <LCD_GetPaletteEx+0x14>
 8008d88:	68c3      	ldr	r3, [r0, #12]
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d92:	4718      	bx	r3
 8008d94:	bd10      	pop	{r4, pc}
	...

08008d98 <LCD_GetPalette>:
 8008d98:	4b02      	ldr	r3, [pc, #8]	; (8008da4 <LCD_GetPalette+0xc>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	7c58      	ldrb	r0, [r3, #17]
 8008d9e:	f7ff bfef 	b.w	8008d80 <LCD_GetPaletteEx>
 8008da2:	bf00      	nop
 8008da4:	200000d8 	.word	0x200000d8

08008da8 <GUI_GetpfIndex2ColorEx>:
 8008da8:	4b02      	ldr	r3, [pc, #8]	; (8008db4 <GUI_GetpfIndex2ColorEx+0xc>)
 8008daa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	6858      	ldr	r0, [r3, #4]
 8008db2:	4770      	bx	lr
 8008db4:	200089b8 	.word	0x200089b8

08008db8 <GUI_GetpfColor2IndexEx>:
 8008db8:	4b02      	ldr	r3, [pc, #8]	; (8008dc4 <GUI_GetpfColor2IndexEx+0xc>)
 8008dba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008dbe:	691b      	ldr	r3, [r3, #16]
 8008dc0:	6818      	ldr	r0, [r3, #0]
 8008dc2:	4770      	bx	lr
 8008dc4:	200089b8 	.word	0x200089b8

08008dc8 <LCD_GetXSizeMax>:
 8008dc8:	2001      	movs	r0, #1
 8008dca:	f7ff bf9d 	b.w	8008d08 <_GetMaxValue>

08008dce <LCD_GetYSizeMax>:
 8008dce:	2002      	movs	r0, #2
 8008dd0:	f7ff bf9a 	b.w	8008d08 <_GetMaxValue>

08008dd4 <LCD_GetVXSizeMax>:
 8008dd4:	2003      	movs	r0, #3
 8008dd6:	f7ff bf97 	b.w	8008d08 <_GetMaxValue>
	...

08008ddc <LCD_SetDisplaySize>:
 8008ddc:	4b01      	ldr	r3, [pc, #4]	; (8008de4 <LCD_SetDisplaySize+0x8>)
 8008dde:	e883 0003 	stmia.w	r3, {r0, r1}
 8008de2:	4770      	bx	lr
 8008de4:	200002e8 	.word	0x200002e8

08008de8 <LCD_GetXSizeDisplay>:
 8008de8:	4b01      	ldr	r3, [pc, #4]	; (8008df0 <LCD_GetXSizeDisplay+0x8>)
 8008dea:	6818      	ldr	r0, [r3, #0]
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	200002e8 	.word	0x200002e8

08008df4 <LCD_GetYSizeDisplay>:
 8008df4:	4b01      	ldr	r3, [pc, #4]	; (8008dfc <LCD_GetYSizeDisplay+0x8>)
 8008df6:	6858      	ldr	r0, [r3, #4]
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	200002e8 	.word	0x200002e8

08008e00 <LCD__GetBPP>:
 8008e00:	2800      	cmp	r0, #0
 8008e02:	d03b      	beq.n	8008e7c <LCD__GetBPP+0x7c>
 8008e04:	f030 0301 	bics.w	r3, r0, #1
 8008e08:	d029      	beq.n	8008e5e <LCD__GetBPP+0x5e>
 8008e0a:	f030 0303 	bics.w	r3, r0, #3
 8008e0e:	d028      	beq.n	8008e62 <LCD__GetBPP+0x62>
 8008e10:	f030 0307 	bics.w	r3, r0, #7
 8008e14:	d027      	beq.n	8008e66 <LCD__GetBPP+0x66>
 8008e16:	f030 030f 	bics.w	r3, r0, #15
 8008e1a:	d026      	beq.n	8008e6a <LCD__GetBPP+0x6a>
 8008e1c:	f030 031f 	bics.w	r3, r0, #31
 8008e20:	d025      	beq.n	8008e6e <LCD__GetBPP+0x6e>
 8008e22:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8008e26:	d024      	beq.n	8008e72 <LCD__GetBPP+0x72>
 8008e28:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 8008e2c:	f023 0301 	bic.w	r3, r3, #1
 8008e30:	b30b      	cbz	r3, 8008e76 <LCD__GetBPP+0x76>
 8008e32:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 8008e36:	f023 030f 	bic.w	r3, r3, #15
 8008e3a:	b1e3      	cbz	r3, 8008e76 <LCD__GetBPP+0x76>
 8008e3c:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8008e40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008e44:	b1bb      	cbz	r3, 8008e76 <LCD__GetBPP+0x76>
 8008e46:	0c03      	lsrs	r3, r0, #16
 8008e48:	041b      	lsls	r3, r3, #16
 8008e4a:	b1a3      	cbz	r3, 8008e76 <LCD__GetBPP+0x76>
 8008e4c:	0c83      	lsrs	r3, r0, #18
 8008e4e:	049b      	lsls	r3, r3, #18
 8008e50:	b19b      	cbz	r3, 8008e7a <LCD__GetBPP+0x7a>
 8008e52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e56:	bf0c      	ite	eq
 8008e58:	2018      	moveq	r0, #24
 8008e5a:	2020      	movne	r0, #32
 8008e5c:	4770      	bx	lr
 8008e5e:	2001      	movs	r0, #1
 8008e60:	4770      	bx	lr
 8008e62:	2002      	movs	r0, #2
 8008e64:	4770      	bx	lr
 8008e66:	2003      	movs	r0, #3
 8008e68:	4770      	bx	lr
 8008e6a:	2004      	movs	r0, #4
 8008e6c:	4770      	bx	lr
 8008e6e:	2005      	movs	r0, #5
 8008e70:	4770      	bx	lr
 8008e72:	2008      	movs	r0, #8
 8008e74:	4770      	bx	lr
 8008e76:	2010      	movs	r0, #16
 8008e78:	4770      	bx	lr
 8008e7a:	2012      	movs	r0, #18
 8008e7c:	4770      	bx	lr

08008e7e <LCD__GetBPPDevice>:
 8008e7e:	b508      	push	{r3, lr}
 8008e80:	f7ff ffbe 	bl	8008e00 <LCD__GetBPP>
 8008e84:	2801      	cmp	r0, #1
 8008e86:	d00f      	beq.n	8008ea8 <LCD__GetBPPDevice+0x2a>
 8008e88:	1e83      	subs	r3, r0, #2
 8008e8a:	2b06      	cmp	r3, #6
 8008e8c:	d909      	bls.n	8008ea2 <LCD__GetBPPDevice+0x24>
 8008e8e:	f1a0 0309 	sub.w	r3, r0, #9
 8008e92:	2b07      	cmp	r3, #7
 8008e94:	d907      	bls.n	8008ea6 <LCD__GetBPPDevice+0x28>
 8008e96:	3811      	subs	r0, #17
 8008e98:	280f      	cmp	r0, #15
 8008e9a:	bf8c      	ite	hi
 8008e9c:	2000      	movhi	r0, #0
 8008e9e:	2020      	movls	r0, #32
 8008ea0:	bd08      	pop	{r3, pc}
 8008ea2:	2008      	movs	r0, #8
 8008ea4:	bd08      	pop	{r3, pc}
 8008ea6:	2010      	movs	r0, #16
 8008ea8:	bd08      	pop	{r3, pc}

08008eaa <LCD_GetNumLayers>:
 8008eaa:	b508      	push	{r3, lr}
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7fd fa95 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008eb2:	3000      	adds	r0, #0
 8008eb4:	bf18      	it	ne
 8008eb6:	2001      	movne	r0, #1
 8008eb8:	bd08      	pop	{r3, pc}
	...

08008ebc <LCD_SelectLCD>:
 8008ebc:	b510      	push	{r4, lr}
 8008ebe:	4c0d      	ldr	r4, [pc, #52]	; (8008ef4 <LCD_SelectLCD+0x38>)
 8008ec0:	6822      	ldr	r2, [r4, #0]
 8008ec2:	7c51      	ldrb	r1, [r2, #17]
 8008ec4:	4a0c      	ldr	r2, [pc, #48]	; (8008ef8 <LCD_SelectLCD+0x3c>)
 8008ec6:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8008eca:	b140      	cbz	r0, 8008ede <LCD_SelectLCD+0x22>
 8008ecc:	68c3      	ldr	r3, [r0, #12]
 8008ece:	b113      	cbz	r3, 8008ed6 <LCD_SelectLCD+0x1a>
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d001      	beq.n	8008eda <LCD_SelectLCD+0x1e>
 8008ed6:	6800      	ldr	r0, [r0, #0]
 8008ed8:	e7f7      	b.n	8008eca <LCD_SelectLCD+0xe>
 8008eda:	f7fd fab7 	bl	800644c <GUI_DEVICE_Unlink>
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	659a      	str	r2, [r3, #88]	; 0x58
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	615a      	str	r2, [r3, #20]
 8008eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eee:	f7ff bd91 	b.w	8008a14 <LCD_SetClipRectMax>
 8008ef2:	bf00      	nop
 8008ef4:	200000d8 	.word	0x200000d8
 8008ef8:	200089b8 	.word	0x200089b8

08008efc <LCD_SetLUTEntryEx>:
 8008efc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008efe:	460c      	mov	r4, r1
 8008f00:	4615      	mov	r5, r2
 8008f02:	f7fd fa6b 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008f06:	9001      	str	r0, [sp, #4]
 8008f08:	b910      	cbnz	r0, 8008f10 <LCD_SetLUTEntryEx+0x14>
 8008f0a:	2001      	movs	r0, #1
 8008f0c:	b003      	add	sp, #12
 8008f0e:	bd30      	pop	{r4, r5, pc}
 8008f10:	68c3      	ldr	r3, [r0, #12]
 8008f12:	2110      	movs	r1, #16
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	a801      	add	r0, sp, #4
 8008f18:	4798      	blx	r3
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d0f4      	beq.n	8008f0a <LCD_SetLUTEntryEx+0xe>
 8008f20:	9801      	ldr	r0, [sp, #4]
 8008f22:	462a      	mov	r2, r5
 8008f24:	4621      	mov	r1, r4
 8008f26:	4798      	blx	r3
 8008f28:	2000      	movs	r0, #0
 8008f2a:	e7ef      	b.n	8008f0c <LCD_SetLUTEntryEx+0x10>

08008f2c <LCD_SetSizeEx>:
 8008f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f2e:	460c      	mov	r4, r1
 8008f30:	4615      	mov	r5, r2
 8008f32:	f7fd fa53 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008f36:	9001      	str	r0, [sp, #4]
 8008f38:	b910      	cbnz	r0, 8008f40 <LCD_SetSizeEx+0x14>
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	b003      	add	sp, #12
 8008f3e:	bd30      	pop	{r4, r5, pc}
 8008f40:	68c3      	ldr	r3, [r0, #12]
 8008f42:	210b      	movs	r1, #11
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	a801      	add	r0, sp, #4
 8008f48:	4798      	blx	r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	d0f4      	beq.n	8008f3a <LCD_SetSizeEx+0xe>
 8008f50:	9801      	ldr	r0, [sp, #4]
 8008f52:	462a      	mov	r2, r5
 8008f54:	4621      	mov	r1, r4
 8008f56:	4798      	blx	r3
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e7ef      	b.n	8008f3c <LCD_SetSizeEx+0x10>

08008f5c <LCD_SetVSizeEx>:
 8008f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4615      	mov	r5, r2
 8008f62:	f7fd fa3b 	bl	80063dc <GUI_DEVICE__GetpDriver>
 8008f66:	9001      	str	r0, [sp, #4]
 8008f68:	b910      	cbnz	r0, 8008f70 <LCD_SetVSizeEx+0x14>
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	b003      	add	sp, #12
 8008f6e:	bd30      	pop	{r4, r5, pc}
 8008f70:	68c3      	ldr	r3, [r0, #12]
 8008f72:	210a      	movs	r1, #10
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	a801      	add	r0, sp, #4
 8008f78:	4798      	blx	r3
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	d0f4      	beq.n	8008f6a <LCD_SetVSizeEx+0xe>
 8008f80:	9801      	ldr	r0, [sp, #4]
 8008f82:	462a      	mov	r2, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	4798      	blx	r3
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e7ef      	b.n	8008f6c <LCD_SetVSizeEx+0x10>

08008f8c <LCD_UpdateColorIndices>:
 8008f8c:	b510      	push	{r4, lr}
 8008f8e:	4c07      	ldr	r4, [pc, #28]	; (8008fac <LCD_UpdateColorIndices+0x20>)
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f94:	f7ff fd96 	bl	8008ac4 <LCD_Color2Index>
 8008f98:	f7ff fdb0 	bl	8008afc <LCD_SetColorIndex>
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008fa0:	f7ff fd90 	bl	8008ac4 <LCD_Color2Index>
 8008fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fa8:	f7ff bdc4 	b.w	8008b34 <LCD_SetBkColorIndex>
 8008fac:	200000d8 	.word	0x200000d8

08008fb0 <WIDGET__GetInsideRect>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4605      	mov	r5, r0
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	f000 fd7e 	bl	8009ab6 <WM__GetClientRectWin>
 8008fba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fc6:	f7fc ba92 	b.w	80054ee <GUI__ReduceRect>
	...

08008fcc <WIDGET__Init>:
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <WIDGET__Init+0xc>)
 8008fce:	8642      	strh	r2, [r0, #50]	; 0x32
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	62c3      	str	r3, [r0, #44]	; 0x2c
 8008fd4:	8601      	strh	r1, [r0, #48]	; 0x30
 8008fd6:	4770      	bx	lr
 8008fd8:	20000100 	.word	0x20000100

08008fdc <WIDGET_SetState>:
 8008fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4605      	mov	r5, r0
 8008fe2:	f7fc fbf3 	bl	80057cc <GUI_ALLOC_LockH>
 8008fe6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8008fe8:	9001      	str	r0, [sp, #4]
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	d003      	beq.n	8008ff6 <WIDGET_SetState+0x1a>
 8008fee:	8644      	strh	r4, [r0, #50]	; 0x32
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 fdab 	bl	8009b4c <WM_InvalidateWindow>
 8008ff6:	a801      	add	r0, sp, #4
 8008ff8:	f7fc fbf6 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8008ffc:	b003      	add	sp, #12
 8008ffe:	bd30      	pop	{r4, r5, pc}

08009000 <WIDGET_OrState>:
 8009000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009002:	460c      	mov	r4, r1
 8009004:	4605      	mov	r5, r0
 8009006:	b170      	cbz	r0, 8009026 <WIDGET_OrState+0x26>
 8009008:	f7fc fbe0 	bl	80057cc <GUI_ALLOC_LockH>
 800900c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800900e:	9001      	str	r0, [sp, #4]
 8009010:	ea34 0203 	bics.w	r2, r4, r3
 8009014:	d004      	beq.n	8009020 <WIDGET_OrState+0x20>
 8009016:	4323      	orrs	r3, r4
 8009018:	8643      	strh	r3, [r0, #50]	; 0x32
 800901a:	4628      	mov	r0, r5
 800901c:	f000 fd96 	bl	8009b4c <WM_InvalidateWindow>
 8009020:	a801      	add	r0, sp, #4
 8009022:	f7fc fbe1 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009026:	b003      	add	sp, #12
 8009028:	bd30      	pop	{r4, r5, pc}

0800902a <WIDGET_AndState>:
 800902a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	4605      	mov	r5, r0
 8009030:	b170      	cbz	r0, 8009050 <WIDGET_AndState+0x26>
 8009032:	f7fc fbcb 	bl	80057cc <GUI_ALLOC_LockH>
 8009036:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009038:	9001      	str	r0, [sp, #4]
 800903a:	ea23 0104 	bic.w	r1, r3, r4
 800903e:	428b      	cmp	r3, r1
 8009040:	d003      	beq.n	800904a <WIDGET_AndState+0x20>
 8009042:	8641      	strh	r1, [r0, #50]	; 0x32
 8009044:	4628      	mov	r0, r5
 8009046:	f000 fd81 	bl	8009b4c <WM_InvalidateWindow>
 800904a:	a801      	add	r0, sp, #4
 800904c:	f7fc fbcc 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009050:	b003      	add	sp, #12
 8009052:	bd30      	pop	{r4, r5, pc}

08009054 <WIDGET_HandleActive>:
 8009054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009056:	460d      	mov	r5, r1
 8009058:	b085      	sub	sp, #20
 800905a:	4606      	mov	r6, r0
 800905c:	2800      	cmp	r0, #0
 800905e:	f000 8096 	beq.w	800918e <WIDGET_HandleActive+0x13a>
 8009062:	f7fc fbb3 	bl	80057cc <GUI_ALLOC_LockH>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	9002      	str	r0, [sp, #8]
 800906a:	2b16      	cmp	r3, #22
 800906c:	d077      	beq.n	800915e <WIDGET_HandleActive+0x10a>
 800906e:	dc0f      	bgt.n	8009090 <WIDGET_HandleActive+0x3c>
 8009070:	2b11      	cmp	r3, #17
 8009072:	d056      	beq.n	8009122 <WIDGET_HandleActive+0xce>
 8009074:	dc03      	bgt.n	800907e <WIDGET_HandleActive+0x2a>
 8009076:	2b0d      	cmp	r3, #13
 8009078:	d063      	beq.n	8009142 <WIDGET_HandleActive+0xee>
 800907a:	2401      	movs	r4, #1
 800907c:	e049      	b.n	8009112 <WIDGET_HandleActive+0xbe>
 800907e:	2b14      	cmp	r3, #20
 8009080:	f000 8081 	beq.w	8009186 <WIDGET_HandleActive+0x132>
 8009084:	2b15      	cmp	r3, #21
 8009086:	d1f8      	bne.n	800907a <WIDGET_HandleActive+0x26>
 8009088:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 800908c:	60eb      	str	r3, [r5, #12]
 800908e:	e03c      	b.n	800910a <WIDGET_HandleActive+0xb6>
 8009090:	2b1f      	cmp	r3, #31
 8009092:	d074      	beq.n	800917e <WIDGET_HandleActive+0x12a>
 8009094:	dc19      	bgt.n	80090ca <WIDGET_HandleActive+0x76>
 8009096:	2b1e      	cmp	r3, #30
 8009098:	d1ef      	bne.n	800907a <WIDGET_HandleActive+0x26>
 800909a:	68eb      	ldr	r3, [r5, #12]
 800909c:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d160      	bne.n	8009164 <WIDGET_HandleActive+0x110>
 80090a2:	06ca      	lsls	r2, r1, #27
 80090a4:	d565      	bpl.n	8009172 <WIDGET_HandleActive+0x11e>
 80090a6:	f041 0101 	orr.w	r1, r1, #1
 80090aa:	4630      	mov	r0, r6
 80090ac:	f7ff ff96 	bl	8008fdc <WIDGET_SetState>
 80090b0:	2708      	movs	r7, #8
 80090b2:	a802      	add	r0, sp, #8
 80090b4:	f7fc fb98 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80090b8:	1c7b      	adds	r3, r7, #1
 80090ba:	f04f 0400 	mov.w	r4, #0
 80090be:	d05b      	beq.n	8009178 <WIDGET_HandleActive+0x124>
 80090c0:	4639      	mov	r1, r7
 80090c2:	4630      	mov	r0, r6
 80090c4:	f001 fc67 	bl	800a996 <WM_NotifyParent>
 80090c8:	e022      	b.n	8009110 <WIDGET_HandleActive+0xbc>
 80090ca:	2b31      	cmp	r3, #49	; 0x31
 80090cc:	d01f      	beq.n	800910e <WIDGET_HandleActive+0xba>
 80090ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090d2:	d1d2      	bne.n	800907a <WIDGET_HandleActive+0x26>
 80090d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80090d6:	681c      	ldr	r4, [r3, #0]
 80090d8:	68eb      	ldr	r3, [r5, #12]
 80090da:	62c3      	str	r3, [r0, #44]	; 0x2c
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	a802      	add	r0, sp, #8
 80090e0:	1ae4      	subs	r4, r4, r3
 80090e2:	f7fc fb81 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7fc fb70 	bl	80057cc <GUI_ALLOC_LockH>
 80090ec:	ad04      	add	r5, sp, #16
 80090ee:	4262      	negs	r2, r4
 80090f0:	f845 0d04 	str.w	r0, [r5, #-4]!
 80090f4:	4623      	mov	r3, r4
 80090f6:	4611      	mov	r1, r2
 80090f8:	9400      	str	r4, [sp, #0]
 80090fa:	f001 fa45 	bl	800a588 <WM__UpdateChildPositions>
 80090fe:	4628      	mov	r0, r5
 8009100:	f7fc fb72 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009104:	4630      	mov	r0, r6
 8009106:	f000 fd21 	bl	8009b4c <WM_InvalidateWindow>
 800910a:	2400      	movs	r4, #0
 800910c:	e001      	b.n	8009112 <WIDGET_HandleActive+0xbe>
 800910e:	2400      	movs	r4, #0
 8009110:	60ec      	str	r4, [r5, #12]
 8009112:	9b02      	ldr	r3, [sp, #8]
 8009114:	b113      	cbz	r3, 800911c <WIDGET_HandleActive+0xc8>
 8009116:	a802      	add	r0, sp, #8
 8009118:	f7fc fb66 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800911c:	4620      	mov	r0, r4
 800911e:	b005      	add	sp, #20
 8009120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009122:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009124:	06d9      	lsls	r1, r3, #27
 8009126:	d5a8      	bpl.n	800907a <WIDGET_HandleActive+0x26>
 8009128:	68eb      	ldr	r3, [r5, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0a5      	beq.n	800907a <WIDGET_HandleActive+0x26>
 800912e:	7a1b      	ldrb	r3, [r3, #8]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d0a2      	beq.n	800907a <WIDGET_HandleActive+0x26>
 8009134:	a802      	add	r0, sp, #8
 8009136:	f7fc fb57 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800913a:	4630      	mov	r0, r6
 800913c:	f001 fc36 	bl	800a9ac <WM_SetFocus>
 8009140:	e79b      	b.n	800907a <WIDGET_HandleActive+0x26>
 8009142:	68eb      	ldr	r3, [r5, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d097      	beq.n	800907a <WIDGET_HandleActive+0x26>
 800914a:	7a1b      	ldrb	r3, [r3, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d094      	beq.n	800907a <WIDGET_HandleActive+0x26>
 8009150:	a802      	add	r0, sp, #8
 8009152:	f7fc fb49 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009156:	4630      	mov	r0, r6
 8009158:	f001 faa8 	bl	800a6ac <WM_BringToTop>
 800915c:	e7d5      	b.n	800910a <WIDGET_HandleActive+0xb6>
 800915e:	68eb      	ldr	r3, [r5, #12]
 8009160:	8603      	strh	r3, [r0, #48]	; 0x30
 8009162:	e7d2      	b.n	800910a <WIDGET_HandleActive+0xb6>
 8009164:	f021 0101 	bic.w	r1, r1, #1
 8009168:	4630      	mov	r0, r6
 800916a:	f7ff ff37 	bl	8008fdc <WIDGET_SetState>
 800916e:	2709      	movs	r7, #9
 8009170:	e79f      	b.n	80090b2 <WIDGET_HandleActive+0x5e>
 8009172:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009176:	e79c      	b.n	80090b2 <WIDGET_HandleActive+0x5e>
 8009178:	2301      	movs	r3, #1
 800917a:	60eb      	str	r3, [r5, #12]
 800917c:	e7c9      	b.n	8009112 <WIDGET_HandleActive+0xbe>
 800917e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8009180:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8009184:	e782      	b.n	800908c <WIDGET_HandleActive+0x38>
 8009186:	68e9      	ldr	r1, [r5, #12]
 8009188:	f7ff ff12 	bl	8008fb0 <WIDGET__GetInsideRect>
 800918c:	e7bd      	b.n	800910a <WIDGET_HandleActive+0xb6>
 800918e:	2401      	movs	r4, #1
 8009190:	e7c4      	b.n	800911c <WIDGET_HandleActive+0xc8>
	...

08009194 <_DrawDownRect>:
 8009194:	b510      	push	{r4, lr}
 8009196:	b09c      	sub	sp, #112	; 0x70
 8009198:	4604      	mov	r4, r0
 800919a:	a801      	add	r0, sp, #4
 800919c:	f7fc ff90 	bl	80060c0 <GUI_SaveContext_W>
 80091a0:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <_DrawDownRect+0x34>)
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	f7ff fce8 	bl	8008b78 <LCD_SetColor>
 80091a8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80091ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80091b0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80091b4:	f9b4 0000 	ldrsh.w	r0, [r4]
 80091b8:	f7fb ffee 	bl	8005198 <GUI_DrawRect>
 80091bc:	a801      	add	r0, sp, #4
 80091be:	f7fc ff89 	bl	80060d4 <GUI_RestoreContext>
 80091c2:	b01c      	add	sp, #112	; 0x70
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	bf00      	nop
 80091c8:	20000104 	.word	0x20000104

080091cc <_DrawUpRect>:
 80091cc:	f7ff bfe2 	b.w	8009194 <_DrawDownRect>

080091d0 <_DrawDown>:
 80091d0:	b507      	push	{r0, r1, r2, lr}
 80091d2:	4668      	mov	r0, sp
 80091d4:	f001 fad0 	bl	800a778 <WM_GetClientRect>
 80091d8:	4668      	mov	r0, sp
 80091da:	f7ff ffdb 	bl	8009194 <_DrawDownRect>
 80091de:	b003      	add	sp, #12
 80091e0:	f85d fb04 	ldr.w	pc, [sp], #4

080091e4 <_DrawUp>:
 80091e4:	f7ff bff4 	b.w	80091d0 <_DrawDown>

080091e8 <_OnExit>:
 80091e8:	4b14      	ldr	r3, [pc, #80]	; (800923c <_OnExit+0x54>)
 80091ea:	4815      	ldr	r0, [pc, #84]	; (8009240 <_OnExit+0x58>)
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	2400      	movs	r4, #0
 80091f0:	601c      	str	r4, [r3, #0]
 80091f2:	4b14      	ldr	r3, [pc, #80]	; (8009244 <_OnExit+0x5c>)
 80091f4:	4d14      	ldr	r5, [pc, #80]	; (8009248 <_OnExit+0x60>)
 80091f6:	601c      	str	r4, [r3, #0]
 80091f8:	4b14      	ldr	r3, [pc, #80]	; (800924c <_OnExit+0x64>)
 80091fa:	7004      	strb	r4, [r0, #0]
 80091fc:	601c      	str	r4, [r3, #0]
 80091fe:	4b14      	ldr	r3, [pc, #80]	; (8009250 <_OnExit+0x68>)
 8009200:	6044      	str	r4, [r0, #4]
 8009202:	601c      	str	r4, [r3, #0]
 8009204:	4b13      	ldr	r3, [pc, #76]	; (8009254 <_OnExit+0x6c>)
 8009206:	6084      	str	r4, [r0, #8]
 8009208:	601c      	str	r4, [r3, #0]
 800920a:	4b13      	ldr	r3, [pc, #76]	; (8009258 <_OnExit+0x70>)
 800920c:	601c      	str	r4, [r3, #0]
 800920e:	4b13      	ldr	r3, [pc, #76]	; (800925c <_OnExit+0x74>)
 8009210:	4621      	mov	r1, r4
 8009212:	601c      	str	r4, [r3, #0]
 8009214:	2218      	movs	r2, #24
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	300c      	adds	r0, #12
 800921a:	4798      	blx	r3
 800921c:	4b10      	ldr	r3, [pc, #64]	; (8009260 <_OnExit+0x78>)
 800921e:	4811      	ldr	r0, [pc, #68]	; (8009264 <_OnExit+0x7c>)
 8009220:	601c      	str	r4, [r3, #0]
 8009222:	4b11      	ldr	r3, [pc, #68]	; (8009268 <_OnExit+0x80>)
 8009224:	4621      	mov	r1, r4
 8009226:	601c      	str	r4, [r3, #0]
 8009228:	2208      	movs	r2, #8
 800922a:	682b      	ldr	r3, [r5, #0]
 800922c:	4798      	blx	r3
 800922e:	682b      	ldr	r3, [r5, #0]
 8009230:	480e      	ldr	r0, [pc, #56]	; (800926c <_OnExit+0x84>)
 8009232:	4621      	mov	r1, r4
 8009234:	2208      	movs	r2, #8
 8009236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800923a:	4718      	bx	r3
 800923c:	200089f4 	.word	0x200089f4
 8009240:	200002f0 	.word	0x200002f0
 8009244:	200089dc 	.word	0x200089dc
 8009248:	200000d4 	.word	0x200000d4
 800924c:	200089fc 	.word	0x200089fc
 8009250:	20008a04 	.word	0x20008a04
 8009254:	200089cc 	.word	0x200089cc
 8009258:	200089ec 	.word	0x200089ec
 800925c:	200089f8 	.word	0x200089f8
 8009260:	200089d8 	.word	0x200089d8
 8009264:	20008a10 	.word	0x20008a10
 8009268:	200089d0 	.word	0x200089d0
 800926c:	20008a08 	.word	0x20008a08

08009270 <_Paint1>:
 8009270:	b510      	push	{r4, lr}
 8009272:	4604      	mov	r4, r0
 8009274:	f7fc faa0 	bl	80057b8 <GUI_ALLOC_h2p>
 8009278:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800927a:	4a05      	ldr	r2, [pc, #20]	; (8009290 <_Paint1+0x20>)
 800927c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009280:	4620      	mov	r0, r4
 8009282:	4b04      	ldr	r3, [pc, #16]	; (8009294 <_Paint1+0x24>)
 8009284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009288:	bf08      	it	eq
 800928a:	4613      	moveq	r3, r2
 800928c:	4718      	bx	r3
 800928e:	bf00      	nop
 8009290:	0800a115 	.word	0x0800a115
 8009294:	0800c7a5 	.word	0x0800c7a5

08009298 <_Findy1>:
 8009298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929a:	b085      	sub	sp, #20
 800929c:	4607      	mov	r7, r0
 800929e:	460c      	mov	r4, r1
 80092a0:	4616      	mov	r6, r2
 80092a2:	ad02      	add	r5, sp, #8
 80092a4:	b90f      	cbnz	r7, 80092aa <_Findy1+0x12>
 80092a6:	b005      	add	sp, #20
 80092a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7fc fa8e 	bl	80057cc <GUI_ALLOC_LockH>
 80092b0:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80092b2:	9001      	str	r0, [sp, #4]
 80092b4:	07bb      	lsls	r3, r7, #30
 80092b6:	4601      	mov	r1, r0
 80092b8:	d52a      	bpl.n	8009310 <_Findy1+0x78>
 80092ba:	b30e      	cbz	r6, 8009300 <_Findy1+0x68>
 80092bc:	4632      	mov	r2, r6
 80092be:	4628      	mov	r0, r5
 80092c0:	f7fc f8eb 	bl	800549a <GUI__IntersectRects>
 80092c4:	4629      	mov	r1, r5
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7fc fedc 	bl	8006084 <GUI_RectsIntersect>
 80092cc:	b300      	cbz	r0, 8009310 <_Findy1+0x78>
 80092ce:	f017 0f01 	tst.w	r7, #1
 80092d2:	9b01      	ldr	r3, [sp, #4]
 80092d4:	d122      	bne.n	800931c <_Findy1+0x84>
 80092d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092da:	b126      	cbz	r6, 80092e6 <_Findy1+0x4e>
 80092dc:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	bfb8      	it	lt
 80092e4:	4613      	movlt	r3, r2
 80092e6:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80092ea:	4293      	cmp	r3, r2
 80092ec:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80092f0:	dd0a      	ble.n	8009308 <_Findy1+0x70>
 80092f2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	db0a      	blt.n	8009310 <_Findy1+0x78>
 80092fa:	3b01      	subs	r3, #1
 80092fc:	80e3      	strh	r3, [r4, #6]
 80092fe:	e007      	b.n	8009310 <_Findy1+0x78>
 8009300:	c803      	ldmia	r0, {r0, r1}
 8009302:	e885 0003 	stmia.w	r5, {r0, r1}
 8009306:	e7dd      	b.n	80092c4 <_Findy1+0x2c>
 8009308:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800930c:	429a      	cmp	r2, r3
 800930e:	dcf5      	bgt.n	80092fc <_Findy1+0x64>
 8009310:	9b01      	ldr	r3, [sp, #4]
 8009312:	a801      	add	r0, sp, #4
 8009314:	6a1f      	ldr	r7, [r3, #32]
 8009316:	f7fc fa67 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800931a:	e7c3      	b.n	80092a4 <_Findy1+0xc>
 800931c:	69df      	ldr	r7, [r3, #28]
 800931e:	2f00      	cmp	r7, #0
 8009320:	d0f6      	beq.n	8009310 <_Findy1+0x78>
 8009322:	4638      	mov	r0, r7
 8009324:	462a      	mov	r2, r5
 8009326:	4621      	mov	r1, r4
 8009328:	f7ff ffb6 	bl	8009298 <_Findy1>
 800932c:	4638      	mov	r0, r7
 800932e:	f7fc fa43 	bl	80057b8 <GUI_ALLOC_h2p>
 8009332:	6a07      	ldr	r7, [r0, #32]
 8009334:	e7f3      	b.n	800931e <_Findy1+0x86>

08009336 <_Findx0>:
 8009336:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	4690      	mov	r8, r2
 8009340:	2500      	movs	r5, #0
 8009342:	ac02      	add	r4, sp, #8
 8009344:	b91e      	cbnz	r6, 800934e <_Findx0+0x18>
 8009346:	4628      	mov	r0, r5
 8009348:	b004      	add	sp, #16
 800934a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800934e:	4630      	mov	r0, r6
 8009350:	f7fc fa3c 	bl	80057cc <GUI_ALLOC_LockH>
 8009354:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8009356:	9001      	str	r0, [sp, #4]
 8009358:	07b2      	lsls	r2, r6, #30
 800935a:	4601      	mov	r1, r0
 800935c:	d512      	bpl.n	8009384 <_Findx0+0x4e>
 800935e:	f1b8 0f00 	cmp.w	r8, #0
 8009362:	d015      	beq.n	8009390 <_Findx0+0x5a>
 8009364:	4642      	mov	r2, r8
 8009366:	4620      	mov	r0, r4
 8009368:	f7fc f897 	bl	800549a <GUI__IntersectRects>
 800936c:	4621      	mov	r1, r4
 800936e:	4638      	mov	r0, r7
 8009370:	f7fc fe88 	bl	8006084 <GUI_RectsIntersect>
 8009374:	b130      	cbz	r0, 8009384 <_Findx0+0x4e>
 8009376:	07f3      	lsls	r3, r6, #31
 8009378:	d40e      	bmi.n	8009398 <_Findx0+0x62>
 800937a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	803b      	strh	r3, [r7, #0]
 8009382:	2501      	movs	r5, #1
 8009384:	9b01      	ldr	r3, [sp, #4]
 8009386:	a801      	add	r0, sp, #4
 8009388:	6a1e      	ldr	r6, [r3, #32]
 800938a:	f7fc fa2d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800938e:	e7d9      	b.n	8009344 <_Findx0+0xe>
 8009390:	c803      	ldmia	r0, {r0, r1}
 8009392:	e884 0003 	stmia.w	r4, {r0, r1}
 8009396:	e7e9      	b.n	800936c <_Findx0+0x36>
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	69de      	ldr	r6, [r3, #28]
 800939c:	2e00      	cmp	r6, #0
 800939e:	d0f1      	beq.n	8009384 <_Findx0+0x4e>
 80093a0:	4622      	mov	r2, r4
 80093a2:	4639      	mov	r1, r7
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff ffc6 	bl	8009336 <_Findx0>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	4630      	mov	r0, r6
 80093ae:	bf18      	it	ne
 80093b0:	2501      	movne	r5, #1
 80093b2:	f7fc fa01 	bl	80057b8 <GUI_ALLOC_h2p>
 80093b6:	6a06      	ldr	r6, [r0, #32]
 80093b8:	e7f0      	b.n	800939c <_Findx0+0x66>

080093ba <_Findx1>:
 80093ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093bc:	b085      	sub	sp, #20
 80093be:	4605      	mov	r5, r0
 80093c0:	460e      	mov	r6, r1
 80093c2:	4617      	mov	r7, r2
 80093c4:	ac02      	add	r4, sp, #8
 80093c6:	b90d      	cbnz	r5, 80093cc <_Findx1+0x12>
 80093c8:	b005      	add	sp, #20
 80093ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093cc:	4628      	mov	r0, r5
 80093ce:	f7fc f9fd 	bl	80057cc <GUI_ALLOC_LockH>
 80093d2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80093d4:	9001      	str	r0, [sp, #4]
 80093d6:	07aa      	lsls	r2, r5, #30
 80093d8:	4601      	mov	r1, r0
 80093da:	d50f      	bpl.n	80093fc <_Findx1+0x42>
 80093dc:	b1a7      	cbz	r7, 8009408 <_Findx1+0x4e>
 80093de:	463a      	mov	r2, r7
 80093e0:	4620      	mov	r0, r4
 80093e2:	f7fc f85a 	bl	800549a <GUI__IntersectRects>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7fc fe4b 	bl	8006084 <GUI_RectsIntersect>
 80093ee:	b128      	cbz	r0, 80093fc <_Findx1+0x42>
 80093f0:	07eb      	lsls	r3, r5, #31
 80093f2:	d40d      	bmi.n	8009410 <_Findx1+0x56>
 80093f4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80093f8:	3b01      	subs	r3, #1
 80093fa:	80b3      	strh	r3, [r6, #4]
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	a801      	add	r0, sp, #4
 8009400:	6a1d      	ldr	r5, [r3, #32]
 8009402:	f7fc f9f1 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009406:	e7de      	b.n	80093c6 <_Findx1+0xc>
 8009408:	c803      	ldmia	r0, {r0, r1}
 800940a:	e884 0003 	stmia.w	r4, {r0, r1}
 800940e:	e7ea      	b.n	80093e6 <_Findx1+0x2c>
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	69dd      	ldr	r5, [r3, #28]
 8009414:	2d00      	cmp	r5, #0
 8009416:	d0f1      	beq.n	80093fc <_Findx1+0x42>
 8009418:	4628      	mov	r0, r5
 800941a:	4622      	mov	r2, r4
 800941c:	4631      	mov	r1, r6
 800941e:	f7ff ffcc 	bl	80093ba <_Findx1>
 8009422:	4628      	mov	r0, r5
 8009424:	f7fc f9c8 	bl	80057b8 <GUI_ALLOC_h2p>
 8009428:	6a05      	ldr	r5, [r0, #32]
 800942a:	e7f3      	b.n	8009414 <_Findx1+0x5a>

0800942c <_Paint1Trans>:
 800942c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009430:	4d21      	ldr	r5, [pc, #132]	; (80094b8 <_Paint1Trans+0x8c>)
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	4607      	mov	r7, r0
 8009436:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009438:	f7fc f9c8 	bl	80057cc <GUI_ALLOC_LockH>
 800943c:	9000      	str	r0, [sp, #0]
 800943e:	4638      	mov	r0, r7
 8009440:	f7fc f9c4 	bl	80057cc <GUI_ALLOC_LockH>
 8009444:	ac02      	add	r4, sp, #8
 8009446:	4601      	mov	r1, r0
 8009448:	9001      	str	r0, [sp, #4]
 800944a:	f854 0d08 	ldr.w	r0, [r4, #-8]!
 800944e:	3008      	adds	r0, #8
 8009450:	f7fc fe18 	bl	8006084 <GUI_RectsIntersect>
 8009454:	4606      	mov	r6, r0
 8009456:	b340      	cbz	r0, 80094aa <_Paint1Trans+0x7e>
 8009458:	9901      	ldr	r1, [sp, #4]
 800945a:	9a00      	ldr	r2, [sp, #0]
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	3208      	adds	r2, #8
 8009460:	f101 0008 	add.w	r0, r1, #8
 8009464:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8009466:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 800946a:	f7fc f816 	bl	800549a <GUI__IntersectRects>
 800946e:	4620      	mov	r0, r4
 8009470:	f7fc f9ba 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009474:	9a01      	ldr	r2, [sp, #4]
 8009476:	682b      	ldr	r3, [r5, #0]
 8009478:	f9b2 1000 	ldrsh.w	r1, [r2]
 800947c:	4c0f      	ldr	r4, [pc, #60]	; (80094bc <_Paint1Trans+0x90>)
 800947e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8009482:	6499      	str	r1, [r3, #72]	; 0x48
 8009484:	64da      	str	r2, [r3, #76]	; 0x4c
 8009486:	a801      	add	r0, sp, #4
 8009488:	6027      	str	r7, [r4, #0]
 800948a:	f7fc f9ad 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800948e:	4638      	mov	r0, r7
 8009490:	f7ff feee 	bl	8009270 <_Paint1>
 8009494:	2300      	movs	r3, #0
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	649e      	str	r6, [r3, #72]	; 0x48
 800949c:	f8c3 804c 	str.w	r8, [r3, #76]	; 0x4c
 80094a0:	2601      	movs	r6, #1
 80094a2:	4630      	mov	r0, r6
 80094a4:	b002      	add	sp, #8
 80094a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7fc f99c 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80094b0:	a801      	add	r0, sp, #4
 80094b2:	f7fc f999 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80094b6:	e7f4      	b.n	80094a2 <_Paint1Trans+0x76>
 80094b8:	200000d8 	.word	0x200000d8
 80094bc:	200089cc 	.word	0x200089cc

080094c0 <_PaintTransChildren>:
 80094c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094c4:	4605      	mov	r5, r0
 80094c6:	f7fc f981 	bl	80057cc <GUI_ALLOC_LockH>
 80094ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80094cc:	9001      	str	r0, [sp, #4]
 80094ce:	079b      	lsls	r3, r3, #30
 80094d0:	d405      	bmi.n	80094de <_PaintTransChildren+0x1e>
 80094d2:	a801      	add	r0, sp, #4
 80094d4:	f7fc f988 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80094d8:	b003      	add	sp, #12
 80094da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094de:	69c4      	ldr	r4, [r0, #28]
 80094e0:	2c00      	cmp	r4, #0
 80094e2:	d0f6      	beq.n	80094d2 <_PaintTransChildren+0x12>
 80094e4:	4620      	mov	r0, r4
 80094e6:	f7fc f971 	bl	80057cc <GUI_ALLOC_LockH>
 80094ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80094ec:	9000      	str	r0, [sp, #0]
 80094ee:	f003 0303 	and.w	r3, r3, #3
 80094f2:	2b03      	cmp	r3, #3
 80094f4:	d135      	bne.n	8009562 <_PaintTransChildren+0xa2>
 80094f6:	9901      	ldr	r1, [sp, #4]
 80094f8:	3108      	adds	r1, #8
 80094fa:	f7fc fdc3 	bl	8006084 <GUI_RectsIntersect>
 80094fe:	b380      	cbz	r0, 8009562 <_PaintTransChildren+0xa2>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	a801      	add	r0, sp, #4
 8009504:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 8009508:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 800950c:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8009510:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 8009514:	f7fc f968 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009518:	4668      	mov	r0, sp
 800951a:	f7fc f965 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800951e:	4620      	mov	r0, r4
 8009520:	f7ff ff84 	bl	800942c <_Paint1Trans>
 8009524:	b170      	cbz	r0, 8009544 <_PaintTransChildren+0x84>
 8009526:	4620      	mov	r0, r4
 8009528:	f7fc f946 	bl	80057b8 <GUI_ALLOC_h2p>
 800952c:	9000      	str	r0, [sp, #0]
 800952e:	4620      	mov	r0, r4
 8009530:	f7ff ffc6 	bl	80094c0 <_PaintTransChildren>
 8009534:	4620      	mov	r0, r4
 8009536:	f7fc f93f 	bl	80057b8 <GUI_ALLOC_h2p>
 800953a:	9000      	str	r0, [sp, #0]
 800953c:	4628      	mov	r0, r5
 800953e:	f7fc f93b 	bl	80057b8 <GUI_ALLOC_h2p>
 8009542:	9001      	str	r0, [sp, #4]
 8009544:	4628      	mov	r0, r5
 8009546:	f7fc f941 	bl	80057cc <GUI_ALLOC_LockH>
 800954a:	9001      	str	r0, [sp, #4]
 800954c:	4620      	mov	r0, r4
 800954e:	f7fc f93d 	bl	80057cc <GUI_ALLOC_LockH>
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	9000      	str	r0, [sp, #0]
 8009556:	f8a3 9008 	strh.w	r9, [r3, #8]
 800955a:	f8a3 800a 	strh.w	r8, [r3, #10]
 800955e:	819f      	strh	r7, [r3, #12]
 8009560:	81de      	strh	r6, [r3, #14]
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	4668      	mov	r0, sp
 8009566:	6a1c      	ldr	r4, [r3, #32]
 8009568:	f7fc f93e 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800956c:	e7b8      	b.n	80094e0 <_PaintTransChildren+0x20>
	...

08009570 <WM__PaintWinAndOverlays>:
 8009570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009572:	4604      	mov	r4, r0
 8009574:	f7fc f92a 	bl	80057cc <GUI_ALLOC_LockH>
 8009578:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800957a:	9001      	str	r0, [sp, #4]
 800957c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009580:	f023 0306 	bic.w	r3, r3, #6
 8009584:	051b      	lsls	r3, r3, #20
 8009586:	0d1b      	lsrs	r3, r3, #20
 8009588:	2b01      	cmp	r3, #1
 800958a:	d005      	beq.n	8009598 <WM__PaintWinAndOverlays+0x28>
 800958c:	a801      	add	r0, sp, #4
 800958e:	f7fc f92b 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009592:	4620      	mov	r0, r4
 8009594:	f7ff fe6c 	bl	8009270 <_Paint1>
 8009598:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <WM__PaintWinAndOverlays+0x78>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	b143      	cbz	r3, 80095b0 <WM__PaintWinAndOverlays+0x40>
 800959e:	4620      	mov	r0, r4
 80095a0:	f7ff ff8e 	bl	80094c0 <_PaintTransChildren>
 80095a4:	4620      	mov	r0, r4
 80095a6:	f7fc f907 	bl	80057b8 <GUI_ALLOC_h2p>
 80095aa:	6985      	ldr	r5, [r0, #24]
 80095ac:	6a04      	ldr	r4, [r0, #32]
 80095ae:	b99d      	cbnz	r5, 80095d8 <WM__PaintWinAndOverlays+0x68>
 80095b0:	b003      	add	sp, #12
 80095b2:	bd30      	pop	{r4, r5, pc}
 80095b4:	4620      	mov	r0, r4
 80095b6:	f7fc f8ff 	bl	80057b8 <GUI_ALLOC_h2p>
 80095ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80095bc:	f003 0303 	and.w	r3, r3, #3
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d102      	bne.n	80095ca <WM__PaintWinAndOverlays+0x5a>
 80095c4:	4620      	mov	r0, r4
 80095c6:	f7ff ff31 	bl	800942c <_Paint1Trans>
 80095ca:	4620      	mov	r0, r4
 80095cc:	f7ff ff78 	bl	80094c0 <_PaintTransChildren>
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7fc f8f1 	bl	80057b8 <GUI_ALLOC_h2p>
 80095d6:	6a04      	ldr	r4, [r0, #32]
 80095d8:	2c00      	cmp	r4, #0
 80095da:	d1eb      	bne.n	80095b4 <WM__PaintWinAndOverlays+0x44>
 80095dc:	4628      	mov	r0, r5
 80095de:	f7fc f8eb 	bl	80057b8 <GUI_ALLOC_h2p>
 80095e2:	6a04      	ldr	r4, [r0, #32]
 80095e4:	6985      	ldr	r5, [r0, #24]
 80095e6:	e7e2      	b.n	80095ae <WM__PaintWinAndOverlays+0x3e>
 80095e8:	20008a04 	.word	0x20008a04

080095ec <_cbPaintMemDev>:
 80095ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	4d18      	ldr	r5, [pc, #96]	; (8009654 <_cbPaintMemDev+0x68>)
 80095f2:	682b      	ldr	r3, [r5, #0]
 80095f4:	4682      	mov	sl, r0
 80095f6:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80095f8:	f7fc f8e8 	bl	80057cc <GUI_ALLOC_LockH>
 80095fc:	682a      	ldr	r2, [r5, #0]
 80095fe:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8009602:	f9b0 800a 	ldrsh.w	r8, [r0, #10]
 8009606:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 800960a:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
 800960e:	ac02      	add	r4, sp, #8
 8009610:	3208      	adds	r2, #8
 8009612:	f844 0d04 	str.w	r0, [r4, #-4]!
 8009616:	f100 0308 	add.w	r3, r0, #8
 800961a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800961e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009622:	4620      	mov	r0, r4
 8009624:	f7fc f8e0 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009628:	f8da 0000 	ldr.w	r0, [sl]
 800962c:	f7ff ffa0 	bl	8009570 <WM__PaintWinAndOverlays>
 8009630:	682b      	ldr	r3, [r5, #0]
 8009632:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009634:	f7fc f8ca 	bl	80057cc <GUI_ALLOC_LockH>
 8009638:	9001      	str	r0, [sp, #4]
 800963a:	f8a0 9008 	strh.w	r9, [r0, #8]
 800963e:	f8a0 800a 	strh.w	r8, [r0, #10]
 8009642:	8187      	strh	r7, [r0, #12]
 8009644:	81c6      	strh	r6, [r0, #14]
 8009646:	4620      	mov	r0, r4
 8009648:	f7fc f8ce 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800964c:	b002      	add	sp, #8
 800964e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009652:	bf00      	nop
 8009654:	200000d8 	.word	0x200000d8

08009658 <WM__ClipAtParentBorders>:
 8009658:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800965a:	4606      	mov	r6, r0
 800965c:	460d      	mov	r5, r1
 800965e:	4628      	mov	r0, r5
 8009660:	f7fc f8b4 	bl	80057cc <GUI_ALLOC_LockH>
 8009664:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009666:	9001      	str	r0, [sp, #4]
 8009668:	f013 0402 	ands.w	r4, r3, #2
 800966c:	4601      	mov	r1, r0
 800966e:	d105      	bne.n	800967c <WM__ClipAtParentBorders+0x24>
 8009670:	a801      	add	r0, sp, #4
 8009672:	f7fc f8b9 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009676:	4620      	mov	r0, r4
 8009678:	b002      	add	sp, #8
 800967a:	bd70      	pop	{r4, r5, r6, pc}
 800967c:	4630      	mov	r0, r6
 800967e:	f7fb feef 	bl	8005460 <GUI__IntersectRect>
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	699c      	ldr	r4, [r3, #24]
 8009686:	a801      	add	r0, sp, #4
 8009688:	b93c      	cbnz	r4, 800969a <WM__ClipAtParentBorders+0x42>
 800968a:	f7fc f8ad 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800968e:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <WM__ClipAtParentBorders+0x4c>)
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	1b43      	subs	r3, r0, r5
 8009694:	4258      	negs	r0, r3
 8009696:	4158      	adcs	r0, r3
 8009698:	e7ee      	b.n	8009678 <WM__ClipAtParentBorders+0x20>
 800969a:	f7fc f8a5 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800969e:	4625      	mov	r5, r4
 80096a0:	e7dd      	b.n	800965e <WM__ClipAtParentBorders+0x6>
 80096a2:	bf00      	nop
 80096a4:	200089d0 	.word	0x200089d0

080096a8 <WM__InsertWindowIntoList>:
 80096a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80096ac:	4606      	mov	r6, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	b1a1      	cbz	r1, 80096dc <WM__InsertWindowIntoList+0x34>
 80096b2:	f7fc f88b 	bl	80057cc <GUI_ALLOC_LockH>
 80096b6:	2300      	movs	r3, #0
 80096b8:	6184      	str	r4, [r0, #24]
 80096ba:	9001      	str	r0, [sp, #4]
 80096bc:	6203      	str	r3, [r0, #32]
 80096be:	4620      	mov	r0, r4
 80096c0:	f7fc f884 	bl	80057cc <GUI_ALLOC_LockH>
 80096c4:	ac04      	add	r4, sp, #16
 80096c6:	69c7      	ldr	r7, [r0, #28]
 80096c8:	f844 0d08 	str.w	r0, [r4, #-8]!
 80096cc:	b94f      	cbnz	r7, 80096e2 <WM__InsertWindowIntoList+0x3a>
 80096ce:	61c6      	str	r6, [r0, #28]
 80096d0:	a801      	add	r0, sp, #4
 80096d2:	f7fc f889 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80096d6:	4620      	mov	r0, r4
 80096d8:	f7fc f886 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80096dc:	b004      	add	sp, #16
 80096de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	4638      	mov	r0, r7
 80096e6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80096e8:	f7fc f870 	bl	80057cc <GUI_ALLOC_LockH>
 80096ec:	f10d 0810 	add.w	r8, sp, #16
 80096f0:	f005 0508 	and.w	r5, r5, #8
 80096f4:	f848 0d04 	str.w	r0, [r8, #-4]!
 80096f8:	b975      	cbnz	r5, 8009718 <WM__InsertWindowIntoList+0x70>
 80096fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80096fc:	071a      	lsls	r2, r3, #28
 80096fe:	d50b      	bpl.n	8009718 <WM__InsertWindowIntoList+0x70>
 8009700:	9b01      	ldr	r3, [sp, #4]
 8009702:	621f      	str	r7, [r3, #32]
 8009704:	9b02      	ldr	r3, [sp, #8]
 8009706:	a801      	add	r0, sp, #4
 8009708:	61de      	str	r6, [r3, #28]
 800970a:	f7fc f86d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800970e:	4620      	mov	r0, r4
 8009710:	f7fc f86a 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009714:	4640      	mov	r0, r8
 8009716:	e7df      	b.n	80096d8 <WM__InsertWindowIntoList+0x30>
 8009718:	4620      	mov	r0, r4
 800971a:	f7fc f865 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800971e:	4640      	mov	r0, r8
 8009720:	f7fc f862 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009724:	4638      	mov	r0, r7
 8009726:	f7fc f847 	bl	80057b8 <GUI_ALLOC_h2p>
 800972a:	9003      	str	r0, [sp, #12]
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	6a1c      	ldr	r4, [r3, #32]
 8009730:	b914      	cbnz	r4, 8009738 <WM__InsertWindowIntoList+0x90>
 8009732:	621e      	str	r6, [r3, #32]
 8009734:	a801      	add	r0, sp, #4
 8009736:	e7cf      	b.n	80096d8 <WM__InsertWindowIntoList+0x30>
 8009738:	4620      	mov	r0, r4
 800973a:	f7fc f83d 	bl	80057b8 <GUI_ALLOC_h2p>
 800973e:	2d00      	cmp	r5, #0
 8009740:	d1f3      	bne.n	800972a <WM__InsertWindowIntoList+0x82>
 8009742:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009744:	071b      	lsls	r3, r3, #28
 8009746:	d5f0      	bpl.n	800972a <WM__InsertWindowIntoList+0x82>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	621e      	str	r6, [r3, #32]
 800974c:	9b01      	ldr	r3, [sp, #4]
 800974e:	621c      	str	r4, [r3, #32]
 8009750:	e7f0      	b.n	8009734 <WM__InsertWindowIntoList+0x8c>

08009752 <WM__RemoveWindowFromList>:
 8009752:	b570      	push	{r4, r5, r6, lr}
 8009754:	4604      	mov	r4, r0
 8009756:	f7fc f82f 	bl	80057b8 <GUI_ALLOC_h2p>
 800975a:	4605      	mov	r5, r0
 800975c:	6980      	ldr	r0, [r0, #24]
 800975e:	b1b0      	cbz	r0, 800978e <WM__RemoveWindowFromList+0x3c>
 8009760:	f7fc f82a 	bl	80057b8 <GUI_ALLOC_h2p>
 8009764:	69c3      	ldr	r3, [r0, #28]
 8009766:	429c      	cmp	r4, r3
 8009768:	4606      	mov	r6, r0
 800976a:	d10e      	bne.n	800978a <WM__RemoveWindowFromList+0x38>
 800976c:	4620      	mov	r0, r4
 800976e:	f7fc f823 	bl	80057b8 <GUI_ALLOC_h2p>
 8009772:	6a03      	ldr	r3, [r0, #32]
 8009774:	61f3      	str	r3, [r6, #28]
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	4618      	mov	r0, r3
 800977a:	f7fc f81d 	bl	80057b8 <GUI_ALLOC_h2p>
 800977e:	6a03      	ldr	r3, [r0, #32]
 8009780:	429c      	cmp	r4, r3
 8009782:	d102      	bne.n	800978a <WM__RemoveWindowFromList+0x38>
 8009784:	6a2b      	ldr	r3, [r5, #32]
 8009786:	6203      	str	r3, [r0, #32]
 8009788:	bd70      	pop	{r4, r5, r6, pc}
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1f4      	bne.n	8009778 <WM__RemoveWindowFromList+0x26>
 800978e:	bd70      	pop	{r4, r5, r6, pc}

08009790 <WM__Client2Screen>:
 8009790:	4603      	mov	r3, r0
 8009792:	4608      	mov	r0, r1
 8009794:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009798:	f9b3 1000 	ldrsh.w	r1, [r3]
 800979c:	f7fc bc27 	b.w	8005fee <GUI_MoveRect>

080097a0 <_SetClipRectUserIntersect>:
 80097a0:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <_SetClipRectUserIntersect+0x48>)
 80097a2:	b530      	push	{r4, r5, lr}
 80097a4:	681c      	ldr	r4, [r3, #0]
 80097a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80097a8:	b085      	sub	sp, #20
 80097aa:	4605      	mov	r5, r0
 80097ac:	b91a      	cbnz	r2, 80097b6 <_SetClipRectUserIntersect+0x16>
 80097ae:	f003 fe39 	bl	800d424 <LCD_SetClipRectEx>
 80097b2:	b005      	add	sp, #20
 80097b4:	bd30      	pop	{r4, r5, pc}
 80097b6:	6810      	ldr	r0, [r2, #0]
 80097b8:	6851      	ldr	r1, [r2, #4]
 80097ba:	ab02      	add	r3, sp, #8
 80097bc:	c303      	stmia	r3!, {r0, r1}
 80097be:	4b0b      	ldr	r3, [pc, #44]	; (80097ec <_SetClipRectUserIntersect+0x4c>)
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	b900      	cbnz	r0, 80097c6 <_SetClipRectUserIntersect+0x26>
 80097c4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80097c6:	f7fc f801 	bl	80057cc <GUI_ALLOC_LockH>
 80097ca:	ac04      	add	r4, sp, #16
 80097cc:	a902      	add	r1, sp, #8
 80097ce:	f844 0d0c 	str.w	r0, [r4, #-12]!
 80097d2:	f7ff ffdd 	bl	8009790 <WM__Client2Screen>
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7fc f806 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80097dc:	a802      	add	r0, sp, #8
 80097de:	4629      	mov	r1, r5
 80097e0:	f7fb fe3e 	bl	8005460 <GUI__IntersectRect>
 80097e4:	a802      	add	r0, sp, #8
 80097e6:	e7e2      	b.n	80097ae <_SetClipRectUserIntersect+0xe>
 80097e8:	200000d8 	.word	0x200000d8
 80097ec:	200089cc 	.word	0x200089cc

080097f0 <WM__ActivateClipRect>:
 80097f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <WM__ActivateClipRect+0x3c>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80097fa:	b122      	cbz	r2, 8009806 <WM__ActivateClipRect+0x16>
 80097fc:	480c      	ldr	r0, [pc, #48]	; (8009830 <WM__ActivateClipRect+0x40>)
 80097fe:	f7ff ffcf 	bl	80097a0 <_SetClipRectUserIntersect>
 8009802:	b004      	add	sp, #16
 8009804:	bd10      	pop	{r4, pc}
 8009806:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009808:	f7fb ffe0 	bl	80057cc <GUI_ALLOC_LockH>
 800980c:	9001      	str	r0, [sp, #4]
 800980e:	c803      	ldmia	r0, {r0, r1}
 8009810:	ac02      	add	r4, sp, #8
 8009812:	e884 0003 	stmia.w	r4, {r0, r1}
 8009816:	a801      	add	r0, sp, #4
 8009818:	f7fb ffe6 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800981c:	4b05      	ldr	r3, [pc, #20]	; (8009834 <WM__ActivateClipRect+0x44>)
 800981e:	6819      	ldr	r1, [r3, #0]
 8009820:	b111      	cbz	r1, 8009828 <WM__ActivateClipRect+0x38>
 8009822:	4620      	mov	r0, r4
 8009824:	f7ff ff18 	bl	8009658 <WM__ClipAtParentBorders>
 8009828:	4620      	mov	r0, r4
 800982a:	e7e8      	b.n	80097fe <WM__ActivateClipRect+0xe>
 800982c:	200000d8 	.word	0x200000d8
 8009830:	20000304 	.word	0x20000304
 8009834:	200089cc 	.word	0x200089cc

08009838 <WM__IsWindow>:
 8009838:	4b06      	ldr	r3, [pc, #24]	; (8009854 <WM__IsWindow+0x1c>)
 800983a:	b510      	push	{r4, lr}
 800983c:	4604      	mov	r4, r0
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	b900      	cbnz	r0, 8009844 <WM__IsWindow+0xc>
 8009842:	bd10      	pop	{r4, pc}
 8009844:	42a0      	cmp	r0, r4
 8009846:	d003      	beq.n	8009850 <WM__IsWindow+0x18>
 8009848:	f7fb ffb6 	bl	80057b8 <GUI_ALLOC_h2p>
 800984c:	6940      	ldr	r0, [r0, #20]
 800984e:	e7f7      	b.n	8009840 <WM__IsWindow+0x8>
 8009850:	2001      	movs	r0, #1
 8009852:	bd10      	pop	{r4, pc}
 8009854:	200089e4 	.word	0x200089e4

08009858 <WM__InvalidateDrawAndDescs>:
 8009858:	b513      	push	{r0, r1, r4, lr}
 800985a:	4604      	mov	r4, r0
 800985c:	b140      	cbz	r0, 8009870 <WM__InvalidateDrawAndDescs+0x18>
 800985e:	f7fb ffb5 	bl	80057cc <GUI_ALLOC_LockH>
 8009862:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009864:	9001      	str	r0, [sp, #4]
 8009866:	079b      	lsls	r3, r3, #30
 8009868:	d404      	bmi.n	8009874 <WM__InvalidateDrawAndDescs+0x1c>
 800986a:	a801      	add	r0, sp, #4
 800986c:	f7fb ffbc 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009870:	b002      	add	sp, #8
 8009872:	bd10      	pop	{r4, pc}
 8009874:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009876:	b140      	cbz	r0, 800988a <WM__InvalidateDrawAndDescs+0x32>
 8009878:	4b0b      	ldr	r3, [pc, #44]	; (80098a8 <WM__InvalidateDrawAndDescs+0x50>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	429c      	cmp	r4, r3
 800987e:	d004      	beq.n	800988a <WM__InvalidateDrawAndDescs+0x32>
 8009880:	f002 f836 	bl	800b8f0 <GUI_MEMDEV_Delete>
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	625a      	str	r2, [r3, #36]	; 0x24
 800988a:	4620      	mov	r0, r4
 800988c:	f000 ff88 	bl	800a7a0 <WM_GetFirstChild>
 8009890:	4604      	mov	r4, r0
 8009892:	2c00      	cmp	r4, #0
 8009894:	d0e9      	beq.n	800986a <WM__InvalidateDrawAndDescs+0x12>
 8009896:	4620      	mov	r0, r4
 8009898:	f7ff ffde 	bl	8009858 <WM__InvalidateDrawAndDescs>
 800989c:	4620      	mov	r0, r4
 800989e:	f7fb ff8b 	bl	80057b8 <GUI_ALLOC_h2p>
 80098a2:	6a04      	ldr	r4, [r0, #32]
 80098a4:	e7f5      	b.n	8009892 <WM__InvalidateDrawAndDescs+0x3a>
 80098a6:	bf00      	nop
 80098a8:	20008a00 	.word	0x20008a00

080098ac <WM__RectIsNZ>:
 80098ac:	f9b0 2000 	ldrsh.w	r2, [r0]
 80098b0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	dc08      	bgt.n	80098ca <WM__RectIsNZ+0x1e>
 80098b8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80098bc:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80098c0:	4283      	cmp	r3, r0
 80098c2:	bfcc      	ite	gt
 80098c4:	2000      	movgt	r0, #0
 80098c6:	2001      	movle	r0, #1
 80098c8:	4770      	bx	lr
 80098ca:	2000      	movs	r0, #0
 80098cc:	4770      	bx	lr
	...

080098d0 <_Invalidate1Abs>:
 80098d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80098d2:	460e      	mov	r6, r1
 80098d4:	4604      	mov	r4, r0
 80098d6:	4615      	mov	r5, r2
 80098d8:	f7fb ff6e 	bl	80057b8 <GUI_ALLOC_h2p>
 80098dc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80098de:	9001      	str	r0, [sp, #4]
 80098e0:	078b      	lsls	r3, r1, #30
 80098e2:	d529      	bpl.n	8009938 <_Invalidate1Abs+0x68>
 80098e4:	4630      	mov	r0, r6
 80098e6:	f7ff ffe1 	bl	80098ac <WM__RectIsNZ>
 80098ea:	b328      	cbz	r0, 8009938 <_Invalidate1Abs+0x68>
 80098ec:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 80098f0:	f021 0106 	bic.w	r1, r1, #6
 80098f4:	0509      	lsls	r1, r1, #20
 80098f6:	0d09      	lsrs	r1, r1, #20
 80098f8:	2901      	cmp	r1, #1
 80098fa:	d01d      	beq.n	8009938 <_Invalidate1Abs+0x68>
 80098fc:	4620      	mov	r0, r4
 80098fe:	f7fb ff65 	bl	80057cc <GUI_ALLOC_LockH>
 8009902:	ac02      	add	r4, sp, #8
 8009904:	4602      	mov	r2, r0
 8009906:	9001      	str	r0, [sp, #4]
 8009908:	4631      	mov	r1, r6
 800990a:	4620      	mov	r0, r4
 800990c:	f7fb fdc5 	bl	800549a <GUI__IntersectRects>
 8009910:	4620      	mov	r0, r4
 8009912:	f7ff ffcb 	bl	80098ac <WM__RectIsNZ>
 8009916:	b160      	cbz	r0, 8009932 <_Invalidate1Abs+0x62>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800991c:	f244 0120 	movw	r1, #16416	; 0x4020
 8009920:	420a      	tst	r2, r1
 8009922:	f103 0608 	add.w	r6, r3, #8
 8009926:	d009      	beq.n	800993c <_Invalidate1Abs+0x6c>
 8009928:	4622      	mov	r2, r4
 800992a:	4631      	mov	r1, r6
 800992c:	4630      	mov	r0, r6
 800992e:	f7fc fb33 	bl	8005f98 <GUI_MergeRect>
 8009932:	a801      	add	r0, sp, #4
 8009934:	f7fb ff58 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009938:	b004      	add	sp, #16
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009940:	4315      	orrs	r5, r2
 8009942:	4a05      	ldr	r2, [pc, #20]	; (8009958 <_Invalidate1Abs+0x88>)
 8009944:	e886 0003 	stmia.w	r6, {r0, r1}
 8009948:	629d      	str	r5, [r3, #40]	; 0x28
 800994a:	8813      	ldrh	r3, [r2, #0]
 800994c:	3301      	adds	r3, #1
 800994e:	8013      	strh	r3, [r2, #0]
 8009950:	f7fd fd00 	bl	8007354 <GUI_SignalEvent>
 8009954:	e7ed      	b.n	8009932 <_Invalidate1Abs+0x62>
 8009956:	bf00      	nop
 8009958:	200089e0 	.word	0x200089e0

0800995c <WM__Invalidate1Abs>:
 800995c:	2220      	movs	r2, #32
 800995e:	f7ff bfb7 	b.w	80098d0 <_Invalidate1Abs>

08009962 <WM_InvalidateWindowAndDescsEx>:
 8009962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009964:	460f      	mov	r7, r1
 8009966:	b085      	sub	sp, #20
 8009968:	4615      	mov	r5, r2
 800996a:	4606      	mov	r6, r0
 800996c:	b158      	cbz	r0, 8009986 <WM_InvalidateWindowAndDescsEx+0x24>
 800996e:	f7fb ff2d 	bl	80057cc <GUI_ALLOC_LockH>
 8009972:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009974:	ac04      	add	r4, sp, #16
 8009976:	079b      	lsls	r3, r3, #30
 8009978:	4602      	mov	r2, r0
 800997a:	f844 0d0c 	str.w	r0, [r4, #-12]!
 800997e:	d404      	bmi.n	800998a <WM_InvalidateWindowAndDescsEx+0x28>
 8009980:	4620      	mov	r0, r4
 8009982:	f7fb ff31 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009986:	b005      	add	sp, #20
 8009988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800998a:	4639      	mov	r1, r7
 800998c:	a802      	add	r0, sp, #8
 800998e:	f7fb fd84 	bl	800549a <GUI__IntersectRects>
 8009992:	2800      	cmp	r0, #0
 8009994:	d0f4      	beq.n	8009980 <WM_InvalidateWindowAndDescsEx+0x1e>
 8009996:	4620      	mov	r0, r4
 8009998:	f7fb ff26 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800999c:	462a      	mov	r2, r5
 800999e:	a902      	add	r1, sp, #8
 80099a0:	4630      	mov	r0, r6
 80099a2:	f7ff ff95 	bl	80098d0 <_Invalidate1Abs>
 80099a6:	4630      	mov	r0, r6
 80099a8:	f000 fefa 	bl	800a7a0 <WM_GetFirstChild>
 80099ac:	4604      	mov	r4, r0
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d0e9      	beq.n	8009986 <WM_InvalidateWindowAndDescsEx+0x24>
 80099b2:	4620      	mov	r0, r4
 80099b4:	462a      	mov	r2, r5
 80099b6:	a902      	add	r1, sp, #8
 80099b8:	f7ff ffd3 	bl	8009962 <WM_InvalidateWindowAndDescsEx>
 80099bc:	4620      	mov	r0, r4
 80099be:	f7fb fefb 	bl	80057b8 <GUI_ALLOC_h2p>
 80099c2:	6a04      	ldr	r4, [r0, #32]
 80099c4:	e7f3      	b.n	80099ae <WM_InvalidateWindowAndDescsEx+0x4c>

080099c6 <WM__InvalidateRect>:
 80099c6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80099ca:	4680      	mov	r8, r0
 80099cc:	4617      	mov	r7, r2
 80099ce:	461d      	mov	r5, r3
 80099d0:	460e      	mov	r6, r1
 80099d2:	b151      	cbz	r1, 80099ea <WM__InvalidateRect+0x24>
 80099d4:	4608      	mov	r0, r1
 80099d6:	f7fb fef9 	bl	80057cc <GUI_ALLOC_LockH>
 80099da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80099dc:	9001      	str	r0, [sp, #4]
 80099de:	07a3      	lsls	r3, r4, #30
 80099e0:	4602      	mov	r2, r0
 80099e2:	d405      	bmi.n	80099f0 <WM__InvalidateRect+0x2a>
 80099e4:	a801      	add	r0, sp, #4
 80099e6:	f7fb feff 	bl	80057e8 <GUI_ALLOC_UnlockH>
 80099ea:	b004      	add	sp, #16
 80099ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f0:	4641      	mov	r1, r8
 80099f2:	a802      	add	r0, sp, #8
 80099f4:	f7fb fd51 	bl	800549a <GUI__IntersectRects>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d0f3      	beq.n	80099e4 <WM__InvalidateRect+0x1e>
 80099fc:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8009a00:	f024 0406 	bic.w	r4, r4, #6
 8009a04:	0524      	lsls	r4, r4, #20
 8009a06:	0d24      	lsrs	r4, r4, #20
 8009a08:	2c01      	cmp	r4, #1
 8009a0a:	d116      	bne.n	8009a3a <WM__InvalidateRect+0x74>
 8009a0c:	9901      	ldr	r1, [sp, #4]
 8009a0e:	462b      	mov	r3, r5
 8009a10:	6a0a      	ldr	r2, [r1, #32]
 8009a12:	6989      	ldr	r1, [r1, #24]
 8009a14:	a802      	add	r0, sp, #8
 8009a16:	f7ff ffd6 	bl	80099c6 <WM__InvalidateRect>
 8009a1a:	9b01      	ldr	r3, [sp, #4]
 8009a1c:	69dc      	ldr	r4, [r3, #28]
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	d0e0      	beq.n	80099e4 <WM__InvalidateRect+0x1e>
 8009a22:	42bc      	cmp	r4, r7
 8009a24:	d0de      	beq.n	80099e4 <WM__InvalidateRect+0x1e>
 8009a26:	4620      	mov	r0, r4
 8009a28:	462a      	mov	r2, r5
 8009a2a:	a902      	add	r1, sp, #8
 8009a2c:	f7ff ff99 	bl	8009962 <WM_InvalidateWindowAndDescsEx>
 8009a30:	4620      	mov	r0, r4
 8009a32:	f7fb fec1 	bl	80057b8 <GUI_ALLOC_h2p>
 8009a36:	6a04      	ldr	r4, [r0, #32]
 8009a38:	e7f1      	b.n	8009a1e <WM__InvalidateRect+0x58>
 8009a3a:	462a      	mov	r2, r5
 8009a3c:	a902      	add	r1, sp, #8
 8009a3e:	4630      	mov	r0, r6
 8009a40:	f7ff ff46 	bl	80098d0 <_Invalidate1Abs>
 8009a44:	e7e9      	b.n	8009a1a <WM__InvalidateRect+0x54>

08009a46 <WM__InvalidateParent>:
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	4605      	mov	r5, r0
 8009a4a:	4608      	mov	r0, r1
 8009a4c:	460c      	mov	r4, r1
 8009a4e:	4616      	mov	r6, r2
 8009a50:	f7fb feb2 	bl	80057b8 <GUI_ALLOC_h2p>
 8009a54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009a56:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4628      	mov	r0, r5
 8009a60:	bf14      	ite	ne
 8009a62:	f44f 4380 	movne.w	r3, #16384	; 0x4000
 8009a66:	2320      	moveq	r3, #32
 8009a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a6c:	f7ff bfab 	b.w	80099c6 <WM__InvalidateRect>

08009a70 <WM__InvalidateRectEx>:
 8009a70:	2320      	movs	r3, #32
 8009a72:	f7ff bfa8 	b.w	80099c6 <WM__InvalidateRect>

08009a76 <WM__DetachWindow>:
 8009a76:	b513      	push	{r0, r1, r4, lr}
 8009a78:	4604      	mov	r4, r0
 8009a7a:	f7fb fea7 	bl	80057cc <GUI_ALLOC_LockH>
 8009a7e:	6981      	ldr	r1, [r0, #24]
 8009a80:	9001      	str	r0, [sp, #4]
 8009a82:	b141      	cbz	r1, 8009a96 <WM__DetachWindow+0x20>
 8009a84:	6a02      	ldr	r2, [r0, #32]
 8009a86:	f7ff fff3 	bl	8009a70 <WM__InvalidateRectEx>
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f7ff fe61 	bl	8009752 <WM__RemoveWindowFromList>
 8009a90:	9b01      	ldr	r3, [sp, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	619a      	str	r2, [r3, #24]
 8009a96:	a801      	add	r0, sp, #4
 8009a98:	f7fb fea6 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd10      	pop	{r4, pc}

08009aa0 <WM__SendMsgNoData>:
 8009aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aa2:	ab04      	add	r3, sp, #16
 8009aa4:	9001      	str	r0, [sp, #4]
 8009aa6:	f843 1d10 	str.w	r1, [r3, #-16]!
 8009aaa:	4619      	mov	r1, r3
 8009aac:	f000 fd3a 	bl	800a524 <WM__SendMessage>
 8009ab0:	b005      	add	sp, #20
 8009ab2:	f85d fb04 	ldr.w	pc, [sp], #4

08009ab6 <WM__GetClientRectWin>:
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	800b      	strh	r3, [r1, #0]
 8009aba:	8802      	ldrh	r2, [r0, #0]
 8009abc:	804b      	strh	r3, [r1, #2]
 8009abe:	8883      	ldrh	r3, [r0, #4]
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	808b      	strh	r3, [r1, #4]
 8009ac4:	8842      	ldrh	r2, [r0, #2]
 8009ac6:	88c3      	ldrh	r3, [r0, #6]
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	80cb      	strh	r3, [r1, #6]
 8009acc:	4770      	bx	lr

08009ace <WM_InvalidateRect>:
 8009ace:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad0:	460f      	mov	r7, r1
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	4606      	mov	r6, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d031      	beq.n	8009b3e <WM_InvalidateRect+0x70>
 8009ada:	f7fb fe77 	bl	80057cc <GUI_ALLOC_LockH>
 8009ade:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8009ae0:	9001      	str	r0, [sp, #4]
 8009ae2:	07aa      	lsls	r2, r5, #30
 8009ae4:	d528      	bpl.n	8009b38 <WM_InvalidateRect+0x6a>
 8009ae6:	c803      	ldmia	r0, {r0, r1}
 8009ae8:	ac04      	add	r4, sp, #16
 8009aea:	03eb      	lsls	r3, r5, #15
 8009aec:	e884 0003 	stmia.w	r4, {r0, r1}
 8009af0:	d502      	bpl.n	8009af8 <WM_InvalidateRect+0x2a>
 8009af2:	4630      	mov	r0, r6
 8009af4:	f7ff feb0 	bl	8009858 <WM__InvalidateDrawAndDescs>
 8009af8:	b15f      	cbz	r7, 8009b12 <WM_InvalidateRect+0x44>
 8009afa:	6838      	ldr	r0, [r7, #0]
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	ab02      	add	r3, sp, #8
 8009b00:	c303      	stmia	r3!, {r0, r1}
 8009b02:	a902      	add	r1, sp, #8
 8009b04:	9801      	ldr	r0, [sp, #4]
 8009b06:	f7ff fe43 	bl	8009790 <WM__Client2Screen>
 8009b0a:	a902      	add	r1, sp, #8
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f7fb fca7 	bl	8005460 <GUI__IntersectRect>
 8009b12:	4631      	mov	r1, r6
 8009b14:	4620      	mov	r0, r4
 8009b16:	f7ff fd9f 	bl	8009658 <WM__ClipAtParentBorders>
 8009b1a:	b168      	cbz	r0, 8009b38 <WM_InvalidateRect+0x6a>
 8009b1c:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8009b20:	f025 0506 	bic.w	r5, r5, #6
 8009b24:	052d      	lsls	r5, r5, #20
 8009b26:	0d2d      	lsrs	r5, r5, #20
 8009b28:	2d01      	cmp	r5, #1
 8009b2a:	d10a      	bne.n	8009b42 <WM_InvalidateRect+0x74>
 8009b2c:	9b01      	ldr	r3, [sp, #4]
 8009b2e:	4620      	mov	r0, r4
 8009b30:	6a1a      	ldr	r2, [r3, #32]
 8009b32:	6999      	ldr	r1, [r3, #24]
 8009b34:	f7ff ff9c 	bl	8009a70 <WM__InvalidateRectEx>
 8009b38:	a801      	add	r0, sp, #4
 8009b3a:	f7fb fe55 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009b3e:	b007      	add	sp, #28
 8009b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b42:	4621      	mov	r1, r4
 8009b44:	4630      	mov	r0, r6
 8009b46:	f7ff ff09 	bl	800995c <WM__Invalidate1Abs>
 8009b4a:	e7f5      	b.n	8009b38 <WM_InvalidateRect+0x6a>

08009b4c <WM_InvalidateWindow>:
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	f7ff bfbe 	b.w	8009ace <WM_InvalidateRect>
	...

08009b54 <WM_SelectWindow>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	4c0b      	ldr	r4, [pc, #44]	; (8009b84 <WM_SelectWindow+0x30>)
 8009b58:	6822      	ldr	r2, [r4, #0]
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8009b5e:	b908      	cbnz	r0, 8009b64 <WM_SelectWindow+0x10>
 8009b60:	4b09      	ldr	r3, [pc, #36]	; (8009b88 <WM_SelectWindow+0x34>)
 8009b62:	681d      	ldr	r5, [r3, #0]
 8009b64:	6455      	str	r5, [r2, #68]	; 0x44
 8009b66:	f7fe ff55 	bl	8008a14 <LCD_SetClipRectMax>
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	f7fb fe24 	bl	80057b8 <GUI_ALLOC_h2p>
 8009b70:	6823      	ldr	r3, [r4, #0]
 8009b72:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009b76:	649a      	str	r2, [r3, #72]	; 0x48
 8009b78:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8009b7c:	64da      	str	r2, [r3, #76]	; 0x4c
 8009b7e:	4630      	mov	r0, r6
 8009b80:	bd70      	pop	{r4, r5, r6, pc}
 8009b82:	bf00      	nop
 8009b84:	200000d8 	.word	0x200000d8
 8009b88:	200089e4 	.word	0x200089e4

08009b8c <WM_CreateWindowAsChild>:
 8009b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b90:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009b94:	4699      	mov	r9, r3
 8009b96:	4b4c      	ldr	r3, [pc, #304]	; (8009cc8 <WM_CreateWindowAsChild+0x13c>)
 8009b98:	4605      	mov	r5, r0
 8009b9a:	460e      	mov	r6, r1
 8009b9c:	4690      	mov	r8, r2
 8009b9e:	681f      	ldr	r7, [r3, #0]
 8009ba0:	f1ba 0f00 	cmp.w	sl, #0
 8009ba4:	f040 808b 	bne.w	8009cbe <WM_CreateWindowAsChild+0x132>
 8009ba8:	4b48      	ldr	r3, [pc, #288]	; (8009ccc <WM_CreateWindowAsChild+0x140>)
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	b323      	cbz	r3, 8009bf8 <WM_CreateWindowAsChild+0x6c>
 8009bae:	4b48      	ldr	r3, [pc, #288]	; (8009cd0 <WM_CreateWindowAsChild+0x144>)
 8009bb0:	681c      	ldr	r4, [r3, #0]
 8009bb2:	1c63      	adds	r3, r4, #1
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d91f      	bls.n	8009bf8 <WM_CreateWindowAsChild+0x6c>
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f7fb fe07 	bl	80057cc <GUI_ALLOC_LockH>
 8009bbe:	f9b0 2000 	ldrsh.w	r2, [r0]
 8009bc2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8009bc6:	9001      	str	r0, [sp, #4]
 8009bc8:	4415      	add	r5, r2
 8009bca:	441e      	add	r6, r3
 8009bcc:	f1b8 0f00 	cmp.w	r8, #0
 8009bd0:	d105      	bne.n	8009bde <WM_CreateWindowAsChild+0x52>
 8009bd2:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8009bd6:	eba8 0802 	sub.w	r8, r8, r2
 8009bda:	f108 0801 	add.w	r8, r8, #1
 8009bde:	f1b9 0f00 	cmp.w	r9, #0
 8009be2:	d105      	bne.n	8009bf0 <WM_CreateWindowAsChild+0x64>
 8009be4:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 8009be8:	eba9 0903 	sub.w	r9, r9, r3
 8009bec:	f109 0901 	add.w	r9, r9, #1
 8009bf0:	a801      	add	r0, sp, #4
 8009bf2:	f7fb fdf9 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009bf6:	46a2      	mov	sl, r4
 8009bf8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8009bfa:	302c      	adds	r0, #44	; 0x2c
 8009bfc:	f7fb ffcc 	bl	8005b98 <GUI_ALLOC_AllocZero>
 8009c00:	4604      	mov	r4, r0
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d052      	beq.n	8009cac <WM_CreateWindowAsChild+0x120>
 8009c06:	4a31      	ldr	r2, [pc, #196]	; (8009ccc <WM_CreateWindowAsChild+0x140>)
 8009c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c0a:	431f      	orrs	r7, r3
 8009c0c:	8813      	ldrh	r3, [r2, #0]
 8009c0e:	3301      	adds	r3, #1
 8009c10:	8013      	strh	r3, [r2, #0]
 8009c12:	f7fb fddb 	bl	80057cc <GUI_ALLOC_LockH>
 8009c16:	f10d 0b08 	add.w	fp, sp, #8
 8009c1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c1c:	4a2d      	ldr	r2, [pc, #180]	; (8009cd4 <WM_CreateWindowAsChild+0x148>)
 8009c1e:	6103      	str	r3, [r0, #16]
 8009c20:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009c22:	f84b 0d08 	str.w	r0, [fp, #-8]!
 8009c26:	403a      	ands	r2, r7
 8009c28:	8005      	strh	r5, [r0, #0]
 8009c2a:	8046      	strh	r6, [r0, #2]
 8009c2c:	4445      	add	r5, r8
 8009c2e:	444e      	add	r6, r9
 8009c30:	4313      	orrs	r3, r2
 8009c32:	3d01      	subs	r5, #1
 8009c34:	3e01      	subs	r6, #1
 8009c36:	6283      	str	r3, [r0, #40]	; 0x28
 8009c38:	8085      	strh	r5, [r0, #4]
 8009c3a:	80c6      	strh	r6, [r0, #6]
 8009c3c:	4658      	mov	r0, fp
 8009c3e:	f7fb fdd3 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009c42:	4b25      	ldr	r3, [pc, #148]	; (8009cd8 <WM_CreateWindowAsChild+0x14c>)
 8009c44:	6818      	ldr	r0, [r3, #0]
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d037      	beq.n	8009cba <WM_CreateWindowAsChild+0x12e>
 8009c4a:	f7fb fdb5 	bl	80057b8 <GUI_ALLOC_h2p>
 8009c4e:	4605      	mov	r5, r0
 8009c50:	4620      	mov	r0, r4
 8009c52:	f7fb fdb1 	bl	80057b8 <GUI_ALLOC_h2p>
 8009c56:	696b      	ldr	r3, [r5, #20]
 8009c58:	6143      	str	r3, [r0, #20]
 8009c5a:	616c      	str	r4, [r5, #20]
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	4651      	mov	r1, sl
 8009c60:	f7ff fd22 	bl	80096a8 <WM__InsertWindowIntoList>
 8009c64:	06b8      	lsls	r0, r7, #26
 8009c66:	d502      	bpl.n	8009c6e <WM_CreateWindowAsChild+0xe2>
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f7ff ff73 	bl	8009b54 <WM_SelectWindow>
 8009c6e:	07f9      	lsls	r1, r7, #31
 8009c70:	bf41      	itttt	mi
 8009c72:	4a1a      	ldrmi	r2, [pc, #104]	; (8009cdc <WM_CreateWindowAsChild+0x150>)
 8009c74:	6813      	ldrmi	r3, [r2, #0]
 8009c76:	3301      	addmi	r3, #1
 8009c78:	6013      	strmi	r3, [r2, #0]
 8009c7a:	067a      	lsls	r2, r7, #25
 8009c7c:	d502      	bpl.n	8009c84 <WM_CreateWindowAsChild+0xf8>
 8009c7e:	4620      	mov	r0, r4
 8009c80:	f000 fda6 	bl	800a7d0 <WM_BringToBottom>
 8009c84:	07bb      	lsls	r3, r7, #30
 8009c86:	d50d      	bpl.n	8009ca4 <WM_CreateWindowAsChild+0x118>
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f7fb fd9f 	bl	80057cc <GUI_ALLOC_LockH>
 8009c8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009c90:	9000      	str	r0, [sp, #0]
 8009c92:	f043 0302 	orr.w	r3, r3, #2
 8009c96:	6283      	str	r3, [r0, #40]	; 0x28
 8009c98:	4658      	mov	r0, fp
 8009c9a:	f7fb fda5 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff ff54 	bl	8009b4c <WM_InvalidateWindow>
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f7ff fefa 	bl	8009aa0 <WM__SendMsgNoData>
 8009cac:	4620      	mov	r0, r4
 8009cae:	b003      	add	sp, #12
 8009cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb4:	f04f 0a00 	mov.w	sl, #0
 8009cb8:	e79e      	b.n	8009bf8 <WM_CreateWindowAsChild+0x6c>
 8009cba:	601c      	str	r4, [r3, #0]
 8009cbc:	e7ce      	b.n	8009c5c <WM_CreateWindowAsChild+0xd0>
 8009cbe:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009cc2:	d0f7      	beq.n	8009cb4 <WM_CreateWindowAsChild+0x128>
 8009cc4:	4654      	mov	r4, sl
 8009cc6:	e777      	b.n	8009bb8 <WM_CreateWindowAsChild+0x2c>
 8009cc8:	200089ec 	.word	0x200089ec
 8009ccc:	200089c8 	.word	0x200089c8
 8009cd0:	200089d0 	.word	0x200089d0
 8009cd4:	003f3f9f 	.word	0x003f3f9f
 8009cd8:	200089e4 	.word	0x200089e4
 8009cdc:	20008a04 	.word	0x20008a04

08009ce0 <WM_CreateWindow>:
 8009ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ce2:	9c08      	ldr	r4, [sp, #32]
 8009ce4:	9403      	str	r4, [sp, #12]
 8009ce6:	9c07      	ldr	r4, [sp, #28]
 8009ce8:	9402      	str	r4, [sp, #8]
 8009cea:	9c06      	ldr	r4, [sp, #24]
 8009cec:	9401      	str	r4, [sp, #4]
 8009cee:	2400      	movs	r4, #0
 8009cf0:	9400      	str	r4, [sp, #0]
 8009cf2:	f7ff ff4b 	bl	8009b8c <WM_CreateWindowAsChild>
 8009cf6:	b004      	add	sp, #16
 8009cf8:	bd10      	pop	{r4, pc}
	...

08009cfc <WM_DeleteWindow>:
 8009cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cfe:	4604      	mov	r4, r0
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d060      	beq.n	8009dc6 <WM_DeleteWindow+0xca>
 8009d04:	f7ff fd98 	bl	8009838 <WM__IsWindow>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d05c      	beq.n	8009dc6 <WM_DeleteWindow+0xca>
 8009d0c:	210b      	movs	r1, #11
 8009d0e:	4620      	mov	r0, r4
 8009d10:	f7ff fec6 	bl	8009aa0 <WM__SendMsgNoData>
 8009d14:	4620      	mov	r0, r4
 8009d16:	f000 ff9a 	bl	800ac4e <WM__DeleteAssocTimer>
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f7fb fd56 	bl	80057cc <GUI_ALLOC_LockH>
 8009d20:	9001      	str	r0, [sp, #4]
 8009d22:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8009d24:	b108      	cbz	r0, 8009d2a <WM_DeleteWindow+0x2e>
 8009d26:	f001 fde3 	bl	800b8f0 <GUI_MEMDEV_Delete>
 8009d2a:	4b2b      	ldr	r3, [pc, #172]	; (8009dd8 <WM_DeleteWindow+0xdc>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	609a      	str	r2, [r3, #8]
 8009d30:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <WM_DeleteWindow+0xe0>)
 8009d32:	6819      	ldr	r1, [r3, #0]
 8009d34:	428c      	cmp	r4, r1
 8009d36:	bf08      	it	eq
 8009d38:	601a      	streq	r2, [r3, #0]
 8009d3a:	4b29      	ldr	r3, [pc, #164]	; (8009de0 <WM_DeleteWindow+0xe4>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	4294      	cmp	r4, r2
 8009d40:	bf04      	itt	eq
 8009d42:	2200      	moveq	r2, #0
 8009d44:	601a      	streq	r2, [r3, #0]
 8009d46:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <WM_DeleteWindow+0xe8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d13c      	bne.n	8009dca <WM_DeleteWindow+0xce>
 8009d50:	2107      	movs	r1, #7
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fe1f 	bl	800a996 <WM_NotifyParent>
 8009d58:	9d01      	ldr	r5, [sp, #4]
 8009d5a:	69e8      	ldr	r0, [r5, #28]
 8009d5c:	f7ff ffce 	bl	8009cfc <WM_DeleteWindow>
 8009d60:	69eb      	ldr	r3, [r5, #28]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1f9      	bne.n	8009d5a <WM_DeleteWindow+0x5e>
 8009d66:	4620      	mov	r0, r4
 8009d68:	f7ff fe85 	bl	8009a76 <WM__DetachWindow>
 8009d6c:	4b1e      	ldr	r3, [pc, #120]	; (8009de8 <WM_DeleteWindow+0xec>)
 8009d6e:	6818      	ldr	r0, [r3, #0]
 8009d70:	b150      	cbz	r0, 8009d88 <WM_DeleteWindow+0x8c>
 8009d72:	f7fb fd21 	bl	80057b8 <GUI_ALLOC_h2p>
 8009d76:	4605      	mov	r5, r0
 8009d78:	6940      	ldr	r0, [r0, #20]
 8009d7a:	4284      	cmp	r4, r0
 8009d7c:	d1f8      	bne.n	8009d70 <WM_DeleteWindow+0x74>
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f7fb fd1a 	bl	80057b8 <GUI_ALLOC_h2p>
 8009d84:	6943      	ldr	r3, [r0, #20]
 8009d86:	616b      	str	r3, [r5, #20]
 8009d88:	9b01      	ldr	r3, [sp, #4]
 8009d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d8c:	07d1      	lsls	r1, r2, #31
 8009d8e:	bf41      	itttt	mi
 8009d90:	4916      	ldrmi	r1, [pc, #88]	; (8009dec <WM_DeleteWindow+0xf0>)
 8009d92:	680b      	ldrmi	r3, [r1, #0]
 8009d94:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8009d98:	600b      	strmi	r3, [r1, #0]
 8009d9a:	0693      	lsls	r3, r2, #26
 8009d9c:	bf44      	itt	mi
 8009d9e:	4a14      	ldrmi	r2, [pc, #80]	; (8009df0 <WM_DeleteWindow+0xf4>)
 8009da0:	8813      	ldrhmi	r3, [r2, #0]
 8009da2:	a801      	add	r0, sp, #4
 8009da4:	bf44      	itt	mi
 8009da6:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8009daa:	8013      	strhmi	r3, [r2, #0]
 8009dac:	f7fb fd1c 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009db0:	4a10      	ldr	r2, [pc, #64]	; (8009df4 <WM_DeleteWindow+0xf8>)
 8009db2:	8813      	ldrh	r3, [r2, #0]
 8009db4:	4620      	mov	r0, r4
 8009db6:	3b01      	subs	r3, #1
 8009db8:	8013      	strh	r3, [r2, #0]
 8009dba:	f7fb fd41 	bl	8005840 <GUI_ALLOC_Free>
 8009dbe:	4b0e      	ldr	r3, [pc, #56]	; (8009df8 <WM_DeleteWindow+0xfc>)
 8009dc0:	6818      	ldr	r0, [r3, #0]
 8009dc2:	f7ff fec7 	bl	8009b54 <WM_SelectWindow>
 8009dc6:	b003      	add	sp, #12
 8009dc8:	bd30      	pop	{r4, r5, pc}
 8009dca:	6859      	ldr	r1, [r3, #4]
 8009dcc:	428c      	cmp	r4, r1
 8009dce:	bf08      	it	eq
 8009dd0:	605a      	streq	r2, [r3, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	e7ba      	b.n	8009d4c <WM_DeleteWindow+0x50>
 8009dd6:	bf00      	nop
 8009dd8:	200002f0 	.word	0x200002f0
 8009ddc:	200089dc 	.word	0x200089dc
 8009de0:	200089fc 	.word	0x200089fc
 8009de4:	200089f4 	.word	0x200089f4
 8009de8:	200089e4 	.word	0x200089e4
 8009dec:	20008a04 	.word	0x20008a04
 8009df0:	200089e0 	.word	0x200089e0
 8009df4:	200089c8 	.word	0x200089c8
 8009df8:	200089d0 	.word	0x200089d0

08009dfc <_Exec1Input>:
 8009dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009dfe:	4d1b      	ldr	r5, [pc, #108]	; (8009e6c <_Exec1Input+0x70>)
 8009e00:	686a      	ldr	r2, [r5, #4]
 8009e02:	b11a      	cbz	r2, 8009e0c <_Exec1Input+0x10>
 8009e04:	4b1a      	ldr	r3, [pc, #104]	; (8009e70 <_Exec1Input+0x74>)
 8009e06:	681c      	ldr	r4, [r3, #0]
 8009e08:	b974      	cbnz	r4, 8009e28 <_Exec1Input+0x2c>
 8009e0a:	606c      	str	r4, [r5, #4]
 8009e0c:	4b19      	ldr	r3, [pc, #100]	; (8009e74 <_Exec1Input+0x78>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	b103      	cbz	r3, 8009e14 <_Exec1Input+0x18>
 8009e12:	4798      	blx	r3
 8009e14:	4b18      	ldr	r3, [pc, #96]	; (8009e78 <_Exec1Input+0x7c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	b9e3      	cbnz	r3, 8009e54 <_Exec1Input+0x58>
 8009e1a:	4b18      	ldr	r3, [pc, #96]	; (8009e7c <_Exec1Input+0x80>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8009e22:	b9e0      	cbnz	r0, 8009e5e <_Exec1Input+0x62>
 8009e24:	b002      	add	sp, #8
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f7fb fccf 	bl	80057cc <GUI_ALLOC_LockH>
 8009e2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009e30:	9001      	str	r0, [sp, #4]
 8009e32:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009e36:	6946      	ldr	r6, [r0, #20]
 8009e38:	d007      	beq.n	8009e4a <_Exec1Input+0x4e>
 8009e3a:	a801      	add	r0, sp, #4
 8009e3c:	f7fb fcd4 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7ff ff5b 	bl	8009cfc <WM_DeleteWindow>
 8009e46:	4634      	mov	r4, r6
 8009e48:	e7de      	b.n	8009e08 <_Exec1Input+0xc>
 8009e4a:	a801      	add	r0, sp, #4
 8009e4c:	4634      	mov	r4, r6
 8009e4e:	f7fb fccb 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009e52:	e7d9      	b.n	8009e08 <_Exec1Input+0xc>
 8009e54:	4798      	blx	r3
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d0df      	beq.n	8009e1a <_Exec1Input+0x1e>
 8009e5a:	2001      	movs	r0, #1
 8009e5c:	e7e2      	b.n	8009e24 <_Exec1Input+0x28>
 8009e5e:	f7fd fa19 	bl	8007294 <GUI_PollKeyMsg>
 8009e62:	3000      	adds	r0, #0
 8009e64:	bf18      	it	ne
 8009e66:	2001      	movne	r0, #1
 8009e68:	e7dc      	b.n	8009e24 <_Exec1Input+0x28>
 8009e6a:	bf00      	nop
 8009e6c:	200002f0 	.word	0x200002f0
 8009e70:	200089e4 	.word	0x200089e4
 8009e74:	200089d4 	.word	0x200089d4
 8009e78:	200089c0 	.word	0x200089c0
 8009e7c:	200000d8 	.word	0x200000d8

08009e80 <WM_GetActiveWindow>:
 8009e80:	4b01      	ldr	r3, [pc, #4]	; (8009e88 <WM_GetActiveWindow+0x8>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009e86:	4770      	bx	lr
 8009e88:	200000d8 	.word	0x200000d8

08009e8c <WM__GetNextIVR>:
 8009e8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8009e90:	4f59      	ldr	r7, [pc, #356]	; (8009ff8 <WM__GetNextIVR+0x16c>)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f000 809b 	beq.w	8009fd4 <WM__GetNextIVR+0x148>
 8009e9e:	4a57      	ldr	r2, [pc, #348]	; (8009ffc <WM__GetNextIVR+0x170>)
 8009ea0:	6a13      	ldr	r3, [r2, #32]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	dd03      	ble.n	8009eb0 <WM__GetNextIVR+0x24>
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	6213      	str	r3, [r2, #32]
 8009eac:	2000      	movs	r0, #0
 8009eae:	e091      	b.n	8009fd4 <WM__GetNextIVR+0x148>
 8009eb0:	f102 0614 	add.w	r6, r2, #20
 8009eb4:	69d3      	ldr	r3, [r2, #28]
 8009eb6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009eba:	3301      	adds	r3, #1
 8009ebc:	ad02      	add	r5, sp, #8
 8009ebe:	61d3      	str	r3, [r2, #28]
 8009ec0:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d143      	bne.n	8009f50 <WM__GetNextIVR+0xc4>
 8009ec8:	8993      	ldrh	r3, [r2, #12]
 8009eca:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009ece:	89d3      	ldrh	r3, [r2, #14]
 8009ed0:	f8ad 300a 	strh.w	r3, [sp, #10]
 8009ed4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8009ed8:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	f300 8087 	bgt.w	8009ff0 <WM__GetNextIVR+0x164>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8009ee6:	f7fb fc71 	bl	80057cc <GUI_ALLOC_LockH>
 8009eea:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ef2:	9001      	str	r0, [sp, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d10d      	bne.n	8009f14 <WM__GetNextIVR+0x88>
 8009ef8:	8a63      	ldrh	r3, [r4, #18]
 8009efa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009efe:	8a23      	ldrh	r3, [r4, #16]
 8009f00:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f08:	bb8a      	cbnz	r2, 8009f6e <WM__GetNextIVR+0xe2>
 8009f0a:	9b01      	ldr	r3, [sp, #4]
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	69d8      	ldr	r0, [r3, #28]
 8009f10:	f7ff f9c2 	bl	8009298 <_Findy1>
 8009f14:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8009f18:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f20:	bb8a      	cbnz	r2, 8009f86 <WM__GetNextIVR+0xfa>
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	4629      	mov	r1, r5
 8009f26:	69d8      	ldr	r0, [r3, #28]
 8009f28:	f7ff fa05 	bl	8009336 <_Findx0>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d1f1      	bne.n	8009f14 <WM__GetNextIVR+0x88>
 8009f30:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8009f34:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8009f38:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	dd30      	ble.n	8009fa2 <WM__GetNextIVR+0x116>
 8009f40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009f44:	e886 0003 	stmia.w	r6, {r0, r1}
 8009f48:	a801      	add	r0, sp, #4
 8009f4a:	f7fb fc4d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009f4e:	e008      	b.n	8009f62 <WM__GetNextIVR+0xd6>
 8009f50:	8b13      	ldrh	r3, [r2, #24]
 8009f52:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8009f56:	3301      	adds	r3, #1
 8009f58:	b21b      	sxth	r3, r3
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009f60:	dab8      	bge.n	8009ed4 <WM__GetNextIVR+0x48>
 8009f62:	89a3      	ldrh	r3, [r4, #12]
 8009f64:	f8ad 3008 	strh.w	r3, [sp, #8]
 8009f68:	8b63      	ldrh	r3, [r4, #26]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	e7b0      	b.n	8009ed0 <WM__GetNextIVR+0x44>
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fb fc22 	bl	80057b8 <GUI_ALLOC_h2p>
 8009f74:	4680      	mov	r8, r0
 8009f76:	2200      	movs	r2, #0
 8009f78:	4629      	mov	r1, r5
 8009f7a:	6a00      	ldr	r0, [r0, #32]
 8009f7c:	f7ff f98c 	bl	8009298 <_Findy1>
 8009f80:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009f84:	e7c0      	b.n	8009f08 <WM__GetNextIVR+0x7c>
 8009f86:	4610      	mov	r0, r2
 8009f88:	f7fb fc16 	bl	80057b8 <GUI_ALLOC_h2p>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4680      	mov	r8, r0
 8009f90:	4629      	mov	r1, r5
 8009f92:	6a00      	ldr	r0, [r0, #32]
 8009f94:	f7ff f9cf 	bl	8009336 <_Findx0>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d1bb      	bne.n	8009f14 <WM__GetNextIVR+0x88>
 8009f9c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009fa0:	e7be      	b.n	8009f20 <WM__GetNextIVR+0x94>
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fa6:	b9c2      	cbnz	r2, 8009fda <WM__GetNextIVR+0x14e>
 8009fa8:	af04      	add	r7, sp, #16
 8009faa:	4629      	mov	r1, r5
 8009fac:	f857 3d0c 	ldr.w	r3, [r7, #-12]!
 8009fb0:	69d8      	ldr	r0, [r3, #28]
 8009fb2:	f7ff fa02 	bl	80093ba <_Findx1>
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7fb fc16 	bl	80057e8 <GUI_ALLOC_UnlockH>
 8009fbc:	69e2      	ldr	r2, [r4, #28]
 8009fbe:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	dc14      	bgt.n	8009ff0 <WM__GetNextIVR+0x164>
 8009fc6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009fca:	e886 0003 	stmia.w	r6, {r0, r1}
 8009fce:	f7ff fc0f 	bl	80097f0 <WM__ActivateClipRect>
 8009fd2:	2001      	movs	r0, #1
 8009fd4:	b004      	add	sp, #16
 8009fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fda:	4610      	mov	r0, r2
 8009fdc:	f7fb fbec 	bl	80057b8 <GUI_ALLOC_h2p>
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	6a00      	ldr	r0, [r0, #32]
 8009fe8:	f7ff f9e7 	bl	80093ba <_Findx1>
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	e7da      	b.n	8009fa6 <WM__GetNextIVR+0x11a>
 8009ff0:	6a23      	ldr	r3, [r4, #32]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	6223      	str	r3, [r4, #32]
 8009ff6:	e759      	b.n	8009eac <WM__GetNextIVR+0x20>
 8009ff8:	200000d8 	.word	0x200000d8
 8009ffc:	200002f0 	.word	0x200002f0

0800a000 <WM__InitIVRSearch>:
 800a000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a004:	4e39      	ldr	r6, [pc, #228]	; (800a0ec <WM__InitIVRSearch+0xec>)
 800a006:	6832      	ldr	r2, [r6, #0]
 800a008:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
 800a00c:	b086      	sub	sp, #24
 800a00e:	4680      	mov	r8, r0
 800a010:	b91b      	cbnz	r3, 800a01a <WM__InitIVRSearch+0x1a>
 800a012:	f7ff fbed 	bl	80097f0 <WM__ActivateClipRect>
 800a016:	2001      	movs	r0, #1
 800a018:	e054      	b.n	800a0c4 <WM__InitIVRSearch+0xc4>
 800a01a:	4f35      	ldr	r7, [pc, #212]	; (800a0f0 <WM__InitIVRSearch+0xf0>)
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	3301      	adds	r3, #1
 800a020:	2b01      	cmp	r3, #1
 800a022:	623b      	str	r3, [r7, #32]
 800a024:	463d      	mov	r5, r7
 800a026:	dcf6      	bgt.n	800a016 <WM__InitIVRSearch+0x16>
 800a028:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800a02a:	f7fb fbcf 	bl	80057cc <GUI_ALLOC_LockH>
 800a02e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	4b2f      	ldr	r3, [pc, #188]	; (800a0f4 <WM__InitIVRSearch+0xf4>)
 800a036:	9000      	str	r0, [sp, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d035      	beq.n	800a0aa <WM__InitIVRSearch+0xaa>
 800a03e:	ab02      	add	r3, sp, #8
 800a040:	3008      	adds	r0, #8
 800a042:	c803      	ldmia	r0, {r0, r1}
 800a044:	ac02      	add	r4, sp, #8
 800a046:	e883 0003 	stmia.w	r3, {r0, r1}
 800a04a:	f1b8 0f00 	cmp.w	r8, #0
 800a04e:	d003      	beq.n	800a058 <WM__InitIVRSearch+0x58>
 800a050:	4641      	mov	r1, r8
 800a052:	4620      	mov	r0, r4
 800a054:	f7fb fa04 	bl	8005460 <GUI__IntersectRect>
 800a058:	6833      	ldr	r3, [r6, #0]
 800a05a:	4f27      	ldr	r7, [pc, #156]	; (800a0f8 <WM__InitIVRSearch+0xf8>)
 800a05c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a05e:	2a00      	cmp	r2, #0
 800a060:	d033      	beq.n	800a0ca <WM__InitIVRSearch+0xca>
 800a062:	9b00      	ldr	r3, [sp, #0]
 800a064:	6810      	ldr	r0, [r2, #0]
 800a066:	6851      	ldr	r1, [r2, #4]
 800a068:	9301      	str	r3, [sp, #4]
 800a06a:	ab04      	add	r3, sp, #16
 800a06c:	c303      	stmia	r3!, {r0, r1}
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	b133      	cbz	r3, 800a080 <WM__InitIVRSearch+0x80>
 800a072:	a801      	add	r0, sp, #4
 800a074:	f7fb fbb8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a078:	6838      	ldr	r0, [r7, #0]
 800a07a:	f7fb fba7 	bl	80057cc <GUI_ALLOC_LockH>
 800a07e:	9001      	str	r0, [sp, #4]
 800a080:	a904      	add	r1, sp, #16
 800a082:	9801      	ldr	r0, [sp, #4]
 800a084:	f7ff fb84 	bl	8009790 <WM__Client2Screen>
 800a088:	4620      	mov	r0, r4
 800a08a:	a904      	add	r1, sp, #16
 800a08c:	f7fb f9e8 	bl	8005460 <GUI__IntersectRect>
 800a090:	a801      	add	r0, sp, #4
 800a092:	f7fb fba9 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a096:	6839      	ldr	r1, [r7, #0]
 800a098:	b1c9      	cbz	r1, 800a0ce <WM__InitIVRSearch+0xce>
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7ff fadc 	bl	8009658 <WM__ClipAtParentBorders>
 800a0a0:	b9a8      	cbnz	r0, 800a0ce <WM__InitIVRSearch+0xce>
 800a0a2:	6a2b      	ldr	r3, [r5, #32]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	622b      	str	r3, [r5, #32]
 800a0a8:	e00c      	b.n	800a0c4 <WM__InitIVRSearch+0xc4>
 800a0aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a0ac:	f013 0402 	ands.w	r4, r3, #2
 800a0b0:	d001      	beq.n	800a0b6 <WM__InitIVRSearch+0xb6>
 800a0b2:	ab02      	add	r3, sp, #8
 800a0b4:	e7c5      	b.n	800a042 <WM__InitIVRSearch+0x42>
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	4668      	mov	r0, sp
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	623b      	str	r3, [r7, #32]
 800a0be:	f7fb fb93 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	b006      	add	sp, #24
 800a0c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ca:	4668      	mov	r0, sp
 800a0cc:	e7e1      	b.n	800a092 <WM__InitIVRSearch+0x92>
 800a0ce:	6833      	ldr	r3, [r6, #0]
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a0d4:	f7ff fac0 	bl	8009658 <WM__ClipAtParentBorders>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	d0e2      	beq.n	800a0a2 <WM__InitIVRSearch+0xa2>
 800a0dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a0e0:	4b06      	ldr	r3, [pc, #24]	; (800a0fc <WM__InitIVRSearch+0xfc>)
 800a0e2:	e883 0003 	stmia.w	r3, {r0, r1}
 800a0e6:	f7ff fed1 	bl	8009e8c <WM__GetNextIVR>
 800a0ea:	e7eb      	b.n	800a0c4 <WM__InitIVRSearch+0xc4>
 800a0ec:	200000d8 	.word	0x200000d8
 800a0f0:	200002f0 	.word	0x200002f0
 800a0f4:	200089e9 	.word	0x200089e9
 800a0f8:	200089cc 	.word	0x200089cc
 800a0fc:	200002fc 	.word	0x200002fc

0800a100 <WM_SetDefault>:
 800a100:	b508      	push	{r3, lr}
 800a102:	f7fc f843 	bl	800618c <GL_SetDefault>
 800a106:	4b02      	ldr	r3, [pc, #8]	; (800a110 <WM_SetDefault+0x10>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	2200      	movs	r2, #0
 800a10c:	641a      	str	r2, [r3, #64]	; 0x40
 800a10e:	bd08      	pop	{r3, pc}
 800a110:	200000d8 	.word	0x200000d8

0800a114 <WM__Paint1>:
 800a114:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a116:	b089      	sub	sp, #36	; 0x24
 800a118:	4604      	mov	r4, r0
 800a11a:	f7fb fb57 	bl	80057cc <GUI_ALLOC_LockH>
 800a11e:	6907      	ldr	r7, [r0, #16]
 800a120:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800a122:	9001      	str	r0, [sp, #4]
 800a124:	3008      	adds	r0, #8
 800a126:	c803      	ldmia	r0, {r0, r1}
 800a128:	ae02      	add	r6, sp, #8
 800a12a:	e886 0003 	stmia.w	r6, {r0, r1}
 800a12e:	a801      	add	r0, sp, #4
 800a130:	f7fb fb5a 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a134:	b1ff      	cbz	r7, 800a176 <WM__Paint1+0x62>
 800a136:	07ab      	lsls	r3, r5, #30
 800a138:	d51d      	bpl.n	800a176 <WM__Paint1+0x62>
 800a13a:	212e      	movs	r1, #46	; 0x2e
 800a13c:	4620      	mov	r0, r4
 800a13e:	f000 fc1a 	bl	800a976 <WM_SendMessageNoPara>
 800a142:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <WM__Paint1+0x90>)
 800a144:	781a      	ldrb	r2, [r3, #0]
 800a146:	f415 5f80 	tst.w	r5, #4096	; 0x1000
 800a14a:	f102 0201 	add.w	r2, r2, #1
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	461d      	mov	r5, r3
 800a152:	d012      	beq.n	800a17a <WM__Paint1+0x66>
 800a154:	230f      	movs	r3, #15
 800a156:	9405      	str	r4, [sp, #20]
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	9607      	str	r6, [sp, #28]
 800a15c:	f7ff ffd0 	bl	800a100 <WM_SetDefault>
 800a160:	a904      	add	r1, sp, #16
 800a162:	4620      	mov	r0, r4
 800a164:	f000 f9de 	bl	800a524 <WM__SendMessage>
 800a168:	782b      	ldrb	r3, [r5, #0]
 800a16a:	212f      	movs	r1, #47	; 0x2f
 800a16c:	3b01      	subs	r3, #1
 800a16e:	4620      	mov	r0, r4
 800a170:	702b      	strb	r3, [r5, #0]
 800a172:	f000 fc00 	bl	800a976 <WM_SendMessageNoPara>
 800a176:	b009      	add	sp, #36	; 0x24
 800a178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a17a:	4630      	mov	r0, r6
 800a17c:	f7ff ff40 	bl	800a000 <WM__InitIVRSearch>
 800a180:	2800      	cmp	r0, #0
 800a182:	d0f1      	beq.n	800a168 <WM__Paint1+0x54>
 800a184:	270f      	movs	r7, #15
 800a186:	9405      	str	r4, [sp, #20]
 800a188:	9704      	str	r7, [sp, #16]
 800a18a:	9607      	str	r6, [sp, #28]
 800a18c:	f7ff ffb8 	bl	800a100 <WM_SetDefault>
 800a190:	a904      	add	r1, sp, #16
 800a192:	4620      	mov	r0, r4
 800a194:	f000 f9c6 	bl	800a524 <WM__SendMessage>
 800a198:	f7ff fe78 	bl	8009e8c <WM__GetNextIVR>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d1f2      	bne.n	800a186 <WM__Paint1+0x72>
 800a1a0:	e7e2      	b.n	800a168 <WM__Paint1+0x54>
 800a1a2:	bf00      	nop
 800a1a4:	200089e9 	.word	0x200089e9

0800a1a8 <WM__Paint>:
 800a1a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ac:	b088      	sub	sp, #32
 800a1ae:	ae06      	add	r6, sp, #24
 800a1b0:	9003      	str	r0, [sp, #12]
 800a1b2:	f7fb fb0b 	bl	80057cc <GUI_ALLOC_LockH>
 800a1b6:	f100 0208 	add.w	r2, r0, #8
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	9005      	str	r0, [sp, #20]
 800a1be:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1c2:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800a1c4:	699f      	ldr	r7, [r3, #24]
 800a1c6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800a1ca:	e886 0003 	stmia.w	r6, {r0, r1}
 800a1ce:	f244 0420 	movw	r4, #16416	; 0x4020
 800a1d2:	a805      	add	r0, sp, #20
 800a1d4:	f7fb fb08 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a1d8:	402c      	ands	r4, r5
 800a1da:	d018      	beq.n	800a20e <WM__Paint+0x66>
 800a1dc:	f1b8 0f00 	cmp.w	r8, #0
 800a1e0:	d119      	bne.n	800a216 <WM__Paint+0x6e>
 800a1e2:	2400      	movs	r4, #0
 800a1e4:	9803      	ldr	r0, [sp, #12]
 800a1e6:	f7fb faf1 	bl	80057cc <GUI_ALLOC_LockH>
 800a1ea:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a1ec:	9005      	str	r0, [sp, #20]
 800a1ee:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 800a1f2:	f023 0320 	bic.w	r3, r3, #32
 800a1f6:	0492      	lsls	r2, r2, #18
 800a1f8:	bf48      	it	mi
 800a1fa:	f043 0304 	orrmi.w	r3, r3, #4
 800a1fe:	6283      	str	r3, [r0, #40]	; 0x28
 800a200:	a805      	add	r0, sp, #20
 800a202:	f7fb faf1 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a206:	4a13      	ldr	r2, [pc, #76]	; (800a254 <WM__Paint+0xac>)
 800a208:	8813      	ldrh	r3, [r2, #0]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	8013      	strh	r3, [r2, #0]
 800a20e:	4620      	mov	r0, r4
 800a210:	b008      	add	sp, #32
 800a212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a216:	9903      	ldr	r1, [sp, #12]
 800a218:	4630      	mov	r0, r6
 800a21a:	f7ff fa1d 	bl	8009658 <WM__ClipAtParentBorders>
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0df      	beq.n	800a1e2 <WM__Paint+0x3a>
 800a222:	9803      	ldr	r0, [sp, #12]
 800a224:	f7ff fc96 	bl	8009b54 <WM_SelectWindow>
 800a228:	0769      	lsls	r1, r5, #29
 800a22a:	d50d      	bpl.n	800a248 <WM__Paint+0xa0>
 800a22c:	b157      	cbz	r7, 800a244 <WM__Paint+0x9c>
 800a22e:	43ed      	mvns	r5, r5
 800a230:	f005 0501 	and.w	r5, r5, #1
 800a234:	9500      	str	r5, [sp, #0]
 800a236:	2300      	movs	r3, #0
 800a238:	aa03      	add	r2, sp, #12
 800a23a:	4907      	ldr	r1, [pc, #28]	; (800a258 <WM__Paint+0xb0>)
 800a23c:	4630      	mov	r0, r6
 800a23e:	f002 f8d5 	bl	800c3ec <GUI_MEMDEV_Draw>
 800a242:	e7ce      	b.n	800a1e2 <WM__Paint+0x3a>
 800a244:	2501      	movs	r5, #1
 800a246:	e7f3      	b.n	800a230 <WM__Paint+0x88>
 800a248:	9803      	ldr	r0, [sp, #12]
 800a24a:	f7ff f991 	bl	8009570 <WM__PaintWinAndOverlays>
 800a24e:	2401      	movs	r4, #1
 800a250:	e7c8      	b.n	800a1e4 <WM__Paint+0x3c>
 800a252:	bf00      	nop
 800a254:	200089e0 	.word	0x200089e0
 800a258:	080095ed 	.word	0x080095ed

0800a25c <_Exec1Draw>:
 800a25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a260:	4d1a      	ldr	r5, [pc, #104]	; (800a2cc <_Exec1Draw+0x70>)
 800a262:	682a      	ldr	r2, [r5, #0]
 800a264:	f892 0050 	ldrb.w	r0, [r2, #80]	; 0x50
 800a268:	b09d      	sub	sp, #116	; 0x74
 800a26a:	b1f0      	cbz	r0, 800a2aa <_Exec1Draw+0x4e>
 800a26c:	4f18      	ldr	r7, [pc, #96]	; (800a2d0 <_Exec1Draw+0x74>)
 800a26e:	8838      	ldrh	r0, [r7, #0]
 800a270:	b1d8      	cbz	r0, 800a2aa <_Exec1Draw+0x4e>
 800a272:	4e18      	ldr	r6, [pc, #96]	; (800a2d4 <_Exec1Draw+0x78>)
 800a274:	68b4      	ldr	r4, [r6, #8]
 800a276:	b90c      	cbnz	r4, 800a27c <_Exec1Draw+0x20>
 800a278:	4b17      	ldr	r3, [pc, #92]	; (800a2d8 <_Exec1Draw+0x7c>)
 800a27a:	681c      	ldr	r4, [r3, #0]
 800a27c:	a801      	add	r0, sp, #4
 800a27e:	f7fb ff1f 	bl	80060c0 <GUI_SaveContext_W>
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
 800a288:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 800a28a:	b98c      	cbnz	r4, 800a2b0 <_Exec1Draw+0x54>
 800a28c:	2400      	movs	r4, #0
 800a28e:	4640      	mov	r0, r8
 800a290:	60b4      	str	r4, [r6, #8]
 800a292:	f7fb ff34 	bl	80060fe <GUI_SetColor>
 800a296:	4628      	mov	r0, r5
 800a298:	f7fb ff2f 	bl	80060fa <GUI_SetBkColor>
 800a29c:	a801      	add	r0, sp, #4
 800a29e:	f7fb ff19 	bl	80060d4 <GUI_RestoreContext>
 800a2a2:	8838      	ldrh	r0, [r7, #0]
 800a2a4:	3000      	adds	r0, #0
 800a2a6:	bf18      	it	ne
 800a2a8:	2001      	movne	r0, #1
 800a2aa:	b01d      	add	sp, #116	; 0x74
 800a2ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7ff ff79 	bl	800a1a8 <WM__Paint>
 800a2b6:	4681      	mov	r9, r0
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f7fb fa7d 	bl	80057b8 <GUI_ALLOC_h2p>
 800a2be:	6944      	ldr	r4, [r0, #20]
 800a2c0:	2c00      	cmp	r4, #0
 800a2c2:	d0e3      	beq.n	800a28c <_Exec1Draw+0x30>
 800a2c4:	f1b9 0f00 	cmp.w	r9, #0
 800a2c8:	d0f2      	beq.n	800a2b0 <_Exec1Draw+0x54>
 800a2ca:	e7e0      	b.n	800a28e <_Exec1Draw+0x32>
 800a2cc:	200000d8 	.word	0x200000d8
 800a2d0:	200089e0 	.word	0x200089e0
 800a2d4:	200002f0 	.word	0x200002f0
 800a2d8:	200089e4 	.word	0x200089e4

0800a2dc <WM_Exec>:
 800a2dc:	b538      	push	{r3, r4, r5, lr}
 800a2de:	4b17      	ldr	r3, [pc, #92]	; (800a33c <WM_Exec+0x60>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	b103      	cbz	r3, 800a2e6 <WM_Exec+0xa>
 800a2e4:	4798      	blx	r3
 800a2e6:	2500      	movs	r5, #0
 800a2e8:	f7ff fd88 	bl	8009dfc <_Exec1Input>
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	b990      	cbnz	r0, 800a316 <WM_Exec+0x3a>
 800a2f0:	4b13      	ldr	r3, [pc, #76]	; (800a340 <WM_Exec+0x64>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a2f8:	b113      	cbz	r3, 800a300 <WM_Exec+0x24>
 800a2fa:	4b12      	ldr	r3, [pc, #72]	; (800a344 <WM_Exec+0x68>)
 800a2fc:	881b      	ldrh	r3, [r3, #0]
 800a2fe:	b9ab      	cbnz	r3, 800a32c <WM_Exec+0x50>
 800a300:	f7ff ffac 	bl	800a25c <_Exec1Draw>
 800a304:	b968      	cbnz	r0, 800a322 <WM_Exec+0x46>
 800a306:	b124      	cbz	r4, 800a312 <WM_Exec+0x36>
 800a308:	4b0f      	ldr	r3, [pc, #60]	; (800a348 <WM_Exec+0x6c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	b15b      	cbz	r3, 800a326 <WM_Exec+0x4a>
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	4798      	blx	r3
 800a312:	4628      	mov	r0, r5
 800a314:	bd38      	pop	{r3, r4, r5, pc}
 800a316:	2501      	movs	r5, #1
 800a318:	e7e6      	b.n	800a2e8 <WM_Exec+0xc>
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4798      	blx	r3
 800a31e:	2401      	movs	r4, #1
 800a320:	e7ee      	b.n	800a300 <WM_Exec+0x24>
 800a322:	2501      	movs	r5, #1
 800a324:	e7ec      	b.n	800a300 <WM_Exec+0x24>
 800a326:	f000 ffa1 	bl	800b26c <GUI__ManageCache>
 800a32a:	e7f2      	b.n	800a312 <WM_Exec+0x36>
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <WM_Exec+0x6c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1f2      	bne.n	800a31a <WM_Exec+0x3e>
 800a334:	2001      	movs	r0, #1
 800a336:	f000 ff99 	bl	800b26c <GUI__ManageCache>
 800a33a:	e7f0      	b.n	800a31e <WM_Exec+0x42>
 800a33c:	200089d8 	.word	0x200089d8
 800a340:	200000d8 	.word	0x200000d8
 800a344:	200089e0 	.word	0x200089e0
 800a348:	200089f8 	.word	0x200089f8

0800a34c <WM_Activate>:
 800a34c:	4b02      	ldr	r3, [pc, #8]	; (800a358 <WM_Activate+0xc>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a356:	4770      	bx	lr
 800a358:	200000d8 	.word	0x200000d8

0800a35c <WM_Deactivate>:
 800a35c:	4b03      	ldr	r3, [pc, #12]	; (800a36c <WM_Deactivate+0x10>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800a366:	f7fe bb55 	b.w	8008a14 <LCD_SetClipRectMax>
 800a36a:	bf00      	nop
 800a36c:	200000d8 	.word	0x200000d8

0800a370 <WM_DefaultProc>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4604      	mov	r4, r0
 800a374:	6840      	ldr	r0, [r0, #4]
 800a376:	6823      	ldr	r3, [r4, #0]
 800a378:	2b17      	cmp	r3, #23
 800a37a:	d012      	beq.n	800a3a2 <WM_DefaultProc+0x32>
 800a37c:	dc05      	bgt.n	800a38a <WM_DefaultProc+0x1a>
 800a37e:	2b0e      	cmp	r3, #14
 800a380:	d011      	beq.n	800a3a6 <WM_DefaultProc+0x36>
 800a382:	2b14      	cmp	r3, #20
 800a384:	d009      	beq.n	800a39a <WM_DefaultProc+0x2a>
 800a386:	2300      	movs	r3, #0
 800a388:	e013      	b.n	800a3b2 <WM_DefaultProc+0x42>
 800a38a:	2b22      	cmp	r3, #34	; 0x22
 800a38c:	d010      	beq.n	800a3b0 <WM_DefaultProc+0x40>
 800a38e:	2b28      	cmp	r3, #40	; 0x28
 800a390:	d1f9      	bne.n	800a386 <WM_DefaultProc+0x16>
 800a392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a396:	f7ff bbd9 	b.w	8009b4c <WM_InvalidateWindow>
 800a39a:	68e1      	ldr	r1, [r4, #12]
 800a39c:	f000 f972 	bl	800a684 <WM__GetClientRectEx>
 800a3a0:	e7f1      	b.n	800a386 <WM_DefaultProc+0x16>
 800a3a2:	60e0      	str	r0, [r4, #12]
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ac:	f000 bae5 	b.w	800a97a <WM_SendToParent>
 800a3b0:	4b01      	ldr	r3, [pc, #4]	; (800a3b8 <WM_DefaultProc+0x48>)
 800a3b2:	60e3      	str	r3, [r4, #12]
 800a3b4:	bd10      	pop	{r4, pc}
 800a3b6:	bf00      	nop
 800a3b8:	12345678 	.word	0x12345678

0800a3bc <_cbBackWin>:
 800a3bc:	6803      	ldr	r3, [r0, #0]
 800a3be:	2b0e      	cmp	r3, #14
 800a3c0:	b510      	push	{r4, lr}
 800a3c2:	4604      	mov	r4, r0
 800a3c4:	d006      	beq.n	800a3d4 <_cbBackWin+0x18>
 800a3c6:	2b0f      	cmp	r3, #15
 800a3c8:	d00d      	beq.n	800a3e6 <_cbBackWin+0x2a>
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3d0:	f7ff bfce 	b.w	800a370 <WM_DefaultProc>
 800a3d4:	68c3      	ldr	r3, [r0, #12]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	2a01      	cmp	r2, #1
 800a3da:	d10e      	bne.n	800a3fa <_cbBackWin+0x3e>
 800a3dc:	6818      	ldr	r0, [r3, #0]
 800a3de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3e2:	f7fc bf4f 	b.w	8007284 <GUI_StoreKey>
 800a3e6:	4b05      	ldr	r3, [pc, #20]	; (800a3fc <_cbBackWin+0x40>)
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	4b05      	ldr	r3, [pc, #20]	; (800a400 <_cbBackWin+0x44>)
 800a3ec:	4298      	cmp	r0, r3
 800a3ee:	d0ec      	beq.n	800a3ca <_cbBackWin+0xe>
 800a3f0:	f7fb fe83 	bl	80060fa <GUI_SetBkColor>
 800a3f4:	f7fb ff4c 	bl	8006290 <GUI_Clear>
 800a3f8:	e7e7      	b.n	800a3ca <_cbBackWin+0xe>
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	200089f0 	.word	0x200089f0
 800a400:	12345678 	.word	0x12345678

0800a404 <WM_Init>:
 800a404:	b530      	push	{r4, r5, lr}
 800a406:	4c1d      	ldr	r4, [pc, #116]	; (800a47c <WM_Init+0x78>)
 800a408:	7821      	ldrb	r1, [r4, #0]
 800a40a:	b085      	sub	sp, #20
 800a40c:	2900      	cmp	r1, #0
 800a40e:	d132      	bne.n	800a476 <WM_Init+0x72>
 800a410:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <WM_Init+0x7c>)
 800a412:	60a1      	str	r1, [r4, #8]
 800a414:	6019      	str	r1, [r3, #0]
 800a416:	4b1b      	ldr	r3, [pc, #108]	; (800a484 <WM_Init+0x80>)
 800a418:	4d1b      	ldr	r5, [pc, #108]	; (800a488 <WM_Init+0x84>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6419      	str	r1, [r3, #64]	; 0x40
 800a41e:	4b1b      	ldr	r3, [pc, #108]	; (800a48c <WM_Init+0x88>)
 800a420:	8019      	strh	r1, [r3, #0]
 800a422:	4b1b      	ldr	r3, [pc, #108]	; (800a490 <WM_Init+0x8c>)
 800a424:	8019      	strh	r1, [r3, #0]
 800a426:	2304      	movs	r3, #4
 800a428:	9302      	str	r3, [sp, #8]
 800a42a:	4b1a      	ldr	r3, [pc, #104]	; (800a494 <WM_Init+0x90>)
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	2302      	movs	r3, #2
 800a430:	9300      	str	r3, [sp, #0]
 800a432:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800a436:	4608      	mov	r0, r1
 800a438:	461a      	mov	r2, r3
 800a43a:	f7ff fc51 	bl	8009ce0 <WM_CreateWindow>
 800a43e:	4b16      	ldr	r3, [pc, #88]	; (800a498 <WM_Init+0x94>)
 800a440:	4a16      	ldr	r2, [pc, #88]	; (800a49c <WM_Init+0x98>)
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	6028      	str	r0, [r5, #0]
 800a446:	f7ff fb81 	bl	8009b4c <WM_InvalidateWindow>
 800a44a:	4815      	ldr	r0, [pc, #84]	; (800a4a0 <WM_Init+0x9c>)
 800a44c:	f000 f912 	bl	800a674 <WM__AddCriticalHandle>
 800a450:	4814      	ldr	r0, [pc, #80]	; (800a4a4 <WM_Init+0xa0>)
 800a452:	f000 f90f 	bl	800a674 <WM__AddCriticalHandle>
 800a456:	6828      	ldr	r0, [r5, #0]
 800a458:	f7ff fb7c 	bl	8009b54 <WM_SelectWindow>
 800a45c:	f7ff ff76 	bl	800a34c <WM_Activate>
 800a460:	2301      	movs	r3, #1
 800a462:	4620      	mov	r0, r4
 800a464:	7023      	strb	r3, [r4, #0]
 800a466:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <WM_Init+0xa4>)
 800a468:	f840 3f24 	str.w	r3, [r0, #36]!
 800a46c:	b005      	add	sp, #20
 800a46e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a472:	f7fb bf1d 	b.w	80062b0 <GUI__RegisterExit>
 800a476:	b005      	add	sp, #20
 800a478:	bd30      	pop	{r4, r5, pc}
 800a47a:	bf00      	nop
 800a47c:	200002f0 	.word	0x200002f0
 800a480:	200089e4 	.word	0x200089e4
 800a484:	200000d8 	.word	0x200000d8
 800a488:	200089d0 	.word	0x200089d0
 800a48c:	200089e0 	.word	0x200089e0
 800a490:	200089c8 	.word	0x200089c8
 800a494:	0800a3bd 	.word	0x0800a3bd
 800a498:	200089f0 	.word	0x200089f0
 800a49c:	12345678 	.word	0x12345678
 800a4a0:	20008a10 	.word	0x20008a10
 800a4a4:	20008a08 	.word	0x20008a08
 800a4a8:	080091e9 	.word	0x080091e9

0800a4ac <WM__ForEachDesc>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	4616      	mov	r6, r2
 800a4b2:	f7fb f981 	bl	80057b8 <GUI_ALLOC_h2p>
 800a4b6:	69c4      	ldr	r4, [r0, #28]
 800a4b8:	b904      	cbnz	r4, 800a4bc <WM__ForEachDesc+0x10>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4631      	mov	r1, r6
 800a4c0:	47a8      	blx	r5
 800a4c2:	4620      	mov	r0, r4
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	4629      	mov	r1, r5
 800a4c8:	f7ff fff0 	bl	800a4ac <WM__ForEachDesc>
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	f7fb f973 	bl	80057b8 <GUI_ALLOC_h2p>
 800a4d2:	6a04      	ldr	r4, [r0, #32]
 800a4d4:	e7f0      	b.n	800a4b8 <WM__ForEachDesc+0xc>

0800a4d6 <WM__GetFirstSibling>:
 800a4d6:	b508      	push	{r3, lr}
 800a4d8:	f000 f972 	bl	800a7c0 <WM_GetParent>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	b110      	cbz	r0, 800a4e6 <WM__GetFirstSibling+0x10>
 800a4e0:	f7fb f96a 	bl	80057b8 <GUI_ALLOC_h2p>
 800a4e4:	69c3      	ldr	r3, [r0, #28]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	bd08      	pop	{r3, pc}

0800a4ea <WM__GetPrevSibling>:
 800a4ea:	b538      	push	{r3, r4, r5, lr}
 800a4ec:	4605      	mov	r5, r0
 800a4ee:	f7ff fff2 	bl	800a4d6 <WM__GetFirstSibling>
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	b90c      	cbnz	r4, 800a4fa <WM__GetPrevSibling+0x10>
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	bd38      	pop	{r3, r4, r5, pc}
 800a4fa:	42ac      	cmp	r4, r5
 800a4fc:	d007      	beq.n	800a50e <WM__GetPrevSibling+0x24>
 800a4fe:	4620      	mov	r0, r4
 800a500:	f7fb f95a 	bl	80057b8 <GUI_ALLOC_h2p>
 800a504:	6a03      	ldr	r3, [r0, #32]
 800a506:	429d      	cmp	r5, r3
 800a508:	d0f5      	beq.n	800a4f6 <WM__GetPrevSibling+0xc>
 800a50a:	461c      	mov	r4, r3
 800a50c:	e7f2      	b.n	800a4f4 <WM__GetPrevSibling+0xa>
 800a50e:	2400      	movs	r4, #0
 800a510:	e7f1      	b.n	800a4f6 <WM__GetPrevSibling+0xc>

0800a512 <WM__IsEnabled>:
 800a512:	b508      	push	{r3, lr}
 800a514:	f7fb f950 	bl	80057b8 <GUI_ALLOC_h2p>
 800a518:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800a51a:	f080 0010 	eor.w	r0, r0, #16
 800a51e:	f3c0 1000 	ubfx	r0, r0, #4, #1
 800a522:	bd08      	pop	{r3, pc}

0800a524 <WM__SendMessage>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4c0d      	ldr	r4, [pc, #52]	; (800a55c <WM__SendMessage+0x38>)
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	2b13      	cmp	r3, #19
 800a52c:	4606      	mov	r6, r0
 800a52e:	460d      	mov	r5, r1
 800a530:	dc12      	bgt.n	800a558 <WM__SendMessage+0x34>
 800a532:	f7fb f941 	bl	80057b8 <GUI_ALLOC_h2p>
 800a536:	6902      	ldr	r2, [r0, #16]
 800a538:	606e      	str	r6, [r5, #4]
 800a53a:	b142      	cbz	r2, 800a54e <WM__SendMessage+0x2a>
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	4628      	mov	r0, r5
 800a540:	3301      	adds	r3, #1
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	4790      	blx	r2
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	3b01      	subs	r3, #1
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	bd70      	pop	{r4, r5, r6, pc}
 800a54e:	4628      	mov	r0, r5
 800a550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a554:	f7ff bf0c 	b.w	800a370 <WM_DefaultProc>
 800a558:	bd70      	pop	{r4, r5, r6, pc}
 800a55a:	bf00      	nop
 800a55c:	20000320 	.word	0x20000320

0800a560 <WM__SendMessageNoPara>:
 800a560:	b530      	push	{r4, r5, lr}
 800a562:	b085      	sub	sp, #20
 800a564:	4604      	mov	r4, r0
 800a566:	2210      	movs	r2, #16
 800a568:	460d      	mov	r5, r1
 800a56a:	4668      	mov	r0, sp
 800a56c:	2100      	movs	r1, #0
 800a56e:	f004 f805 	bl	800e57c <memset>
 800a572:	4620      	mov	r0, r4
 800a574:	f7fb f920 	bl	80057b8 <GUI_ALLOC_h2p>
 800a578:	6903      	ldr	r3, [r0, #16]
 800a57a:	b11b      	cbz	r3, 800a584 <WM__SendMessageNoPara+0x24>
 800a57c:	9401      	str	r4, [sp, #4]
 800a57e:	9500      	str	r5, [sp, #0]
 800a580:	4668      	mov	r0, sp
 800a582:	4798      	blx	r3
 800a584:	b005      	add	sp, #20
 800a586:	bd30      	pop	{r4, r5, pc}

0800a588 <WM__UpdateChildPositions>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	b08b      	sub	sp, #44	; 0x2c
 800a58e:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800a598:	9101      	str	r1, [sp, #4]
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800a5a0:	9305      	str	r3, [sp, #20]
 800a5a2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800a5a6:	9202      	str	r2, [sp, #8]
 800a5a8:	9306      	str	r3, [sp, #24]
 800a5aa:	f1bb 0f00 	cmp.w	fp, #0
 800a5ae:	d102      	bne.n	800a5b6 <WM__UpdateChildPositions+0x2e>
 800a5b0:	b00b      	add	sp, #44	; 0x2c
 800a5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b6:	4658      	mov	r0, fp
 800a5b8:	f7fb f908 	bl	80057cc <GUI_ALLOC_LockH>
 800a5bc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800a5be:	9009      	str	r0, [sp, #36]	; 0x24
 800a5c0:	f402 7120 	and.w	r1, r2, #640	; 0x280
 800a5c4:	2980      	cmp	r1, #128	; 0x80
 800a5c6:	f9b0 a000 	ldrsh.w	sl, [r0]
 800a5ca:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800a5ce:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 800a5d2:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 800a5d6:	d004      	beq.n	800a5e2 <WM__UpdateChildPositions+0x5a>
 800a5d8:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 800a5dc:	d006      	beq.n	800a5ec <WM__UpdateChildPositions+0x64>
 800a5de:	9905      	ldr	r1, [sp, #20]
 800a5e0:	e000      	b.n	800a5e4 <WM__UpdateChildPositions+0x5c>
 800a5e2:	9904      	ldr	r1, [sp, #16]
 800a5e4:	eb01 060a 	add.w	r6, r1, sl
 800a5e8:	b236      	sxth	r6, r6
 800a5ea:	e004      	b.n	800a5f6 <WM__UpdateChildPositions+0x6e>
 800a5ec:	9901      	ldr	r1, [sp, #4]
 800a5ee:	eb0a 0601 	add.w	r6, sl, r1
 800a5f2:	9903      	ldr	r1, [sp, #12]
 800a5f4:	b236      	sxth	r6, r6
 800a5f6:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800a5fa:	eb01 0508 	add.w	r5, r1, r8
 800a5fe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a602:	b22d      	sxth	r5, r5
 800a604:	d009      	beq.n	800a61a <WM__UpdateChildPositions+0x92>
 800a606:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800a60a:	d02e      	beq.n	800a66a <WM__UpdateChildPositions+0xe2>
 800a60c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 800a610:	18cf      	adds	r7, r1, r3
 800a612:	b23f      	sxth	r7, r7
 800a614:	eb01 0409 	add.w	r4, r1, r9
 800a618:	e004      	b.n	800a624 <WM__UpdateChildPositions+0x9c>
 800a61a:	9a06      	ldr	r2, [sp, #24]
 800a61c:	18d7      	adds	r7, r2, r3
 800a61e:	b23f      	sxth	r7, r7
 800a620:	eb09 0402 	add.w	r4, r9, r2
 800a624:	ebb6 010a 	subs.w	r1, r6, sl
 800a628:	b224      	sxth	r4, r4
 800a62a:	eba7 0203 	sub.w	r2, r7, r3
 800a62e:	d100      	bne.n	800a632 <WM__UpdateChildPositions+0xaa>
 800a630:	b122      	cbz	r2, 800a63c <WM__UpdateChildPositions+0xb4>
 800a632:	4658      	mov	r0, fp
 800a634:	9307      	str	r3, [sp, #28]
 800a636:	f000 fad4 	bl	800abe2 <WM_MoveWindow>
 800a63a:	9b07      	ldr	r3, [sp, #28]
 800a63c:	1bad      	subs	r5, r5, r6
 800a63e:	eba8 080a 	sub.w	r8, r8, sl
 800a642:	1be4      	subs	r4, r4, r7
 800a644:	eba9 0903 	sub.w	r9, r9, r3
 800a648:	ebb5 0108 	subs.w	r1, r5, r8
 800a64c:	eba4 0209 	sub.w	r2, r4, r9
 800a650:	d100      	bne.n	800a654 <WM__UpdateChildPositions+0xcc>
 800a652:	b112      	cbz	r2, 800a65a <WM__UpdateChildPositions+0xd2>
 800a654:	4658      	mov	r0, fp
 800a656:	f000 f913 	bl	800a880 <WM_ResizeWindow>
 800a65a:	a80a      	add	r0, sp, #40	; 0x28
 800a65c:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 800a660:	f8d3 b020 	ldr.w	fp, [r3, #32]
 800a664:	f7fb f8c0 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a668:	e79f      	b.n	800a5aa <WM__UpdateChildPositions+0x22>
 800a66a:	9a02      	ldr	r2, [sp, #8]
 800a66c:	189f      	adds	r7, r3, r2
 800a66e:	b23f      	sxth	r7, r7
 800a670:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a672:	e7d5      	b.n	800a620 <WM__UpdateChildPositions+0x98>

0800a674 <WM__AddCriticalHandle>:
 800a674:	4b02      	ldr	r3, [pc, #8]	; (800a680 <WM__AddCriticalHandle+0xc>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	6002      	str	r2, [r0, #0]
 800a67a:	6018      	str	r0, [r3, #0]
 800a67c:	4770      	bx	lr
 800a67e:	bf00      	nop
 800a680:	200089f4 	.word	0x200089f4

0800a684 <WM__GetClientRectEx>:
 800a684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a686:	460d      	mov	r5, r1
 800a688:	b158      	cbz	r0, 800a6a2 <WM__GetClientRectEx+0x1e>
 800a68a:	b151      	cbz	r1, 800a6a2 <WM__GetClientRectEx+0x1e>
 800a68c:	f7fb f89e 	bl	80057cc <GUI_ALLOC_LockH>
 800a690:	ac02      	add	r4, sp, #8
 800a692:	4629      	mov	r1, r5
 800a694:	f844 0d04 	str.w	r0, [r4, #-4]!
 800a698:	f7ff fa0d 	bl	8009ab6 <WM__GetClientRectWin>
 800a69c:	4620      	mov	r0, r4
 800a69e:	f7fb f8a3 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a6a2:	b003      	add	sp, #12
 800a6a4:	bd30      	pop	{r4, r5, pc}

0800a6a6 <_cbInvalidateOne>:
 800a6a6:	f7ff ba51 	b.w	8009b4c <WM_InvalidateWindow>
	...

0800a6ac <WM_BringToTop>:
 800a6ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	b150      	cbz	r0, 800a6c8 <WM_BringToTop+0x1c>
 800a6b2:	f7fb f88b 	bl	80057cc <GUI_ALLOC_LockH>
 800a6b6:	ac02      	add	r4, sp, #8
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	f844 0d08 	str.w	r0, [r4, #-8]!
 800a6be:	6a00      	ldr	r0, [r0, #32]
 800a6c0:	b920      	cbnz	r0, 800a6cc <WM_BringToTop+0x20>
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7fb f890 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a6c8:	b002      	add	sp, #8
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ce:	071a      	lsls	r2, r3, #28
 800a6d0:	d40f      	bmi.n	800a6f2 <WM_BringToTop+0x46>
 800a6d2:	f7fb f87b 	bl	80057cc <GUI_ALLOC_LockH>
 800a6d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a6d8:	ae02      	add	r6, sp, #8
 800a6da:	071b      	lsls	r3, r3, #28
 800a6dc:	f846 0d04 	str.w	r0, [r6, #-4]!
 800a6e0:	d504      	bpl.n	800a6ec <WM_BringToTop+0x40>
 800a6e2:	4620      	mov	r0, r4
 800a6e4:	f7fb f880 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	e7eb      	b.n	800a6c4 <WM_BringToTop+0x18>
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f7fb f87b 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a6f2:	9b00      	ldr	r3, [sp, #0]
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	699e      	ldr	r6, [r3, #24]
 800a6f8:	f7fb f876 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f7ff f828 	bl	8009752 <WM__RemoveWindowFromList>
 800a702:	4631      	mov	r1, r6
 800a704:	4628      	mov	r0, r5
 800a706:	f7fe ffcf 	bl	80096a8 <WM__InsertWindowIntoList>
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7ff fa1e 	bl	8009b4c <WM_InvalidateWindow>
 800a710:	2200      	movs	r2, #0
 800a712:	4902      	ldr	r1, [pc, #8]	; (800a71c <WM_BringToTop+0x70>)
 800a714:	4628      	mov	r0, r5
 800a716:	f000 f82d 	bl	800a774 <WM_ForEachDesc>
 800a71a:	e7d5      	b.n	800a6c8 <WM_BringToTop+0x1c>
 800a71c:	0800a6a7 	.word	0x0800a6a7

0800a720 <WM_GetWindowSizeX>:
 800a720:	b513      	push	{r0, r1, r4, lr}
 800a722:	b908      	cbnz	r0, 800a728 <WM_GetWindowSizeX+0x8>
 800a724:	f7ff fbac 	bl	8009e80 <WM_GetActiveWindow>
 800a728:	f7fb f850 	bl	80057cc <GUI_ALLOC_LockH>
 800a72c:	ab02      	add	r3, sp, #8
 800a72e:	f9b0 2000 	ldrsh.w	r2, [r0]
 800a732:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a736:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800a73a:	4618      	mov	r0, r3
 800a73c:	1aa4      	subs	r4, r4, r2
 800a73e:	f7fb f853 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a742:	3401      	adds	r4, #1
 800a744:	4620      	mov	r0, r4
 800a746:	b002      	add	sp, #8
 800a748:	bd10      	pop	{r4, pc}

0800a74a <WM_GetWindowSizeY>:
 800a74a:	b513      	push	{r0, r1, r4, lr}
 800a74c:	b908      	cbnz	r0, 800a752 <WM_GetWindowSizeY+0x8>
 800a74e:	f7ff fb97 	bl	8009e80 <WM_GetActiveWindow>
 800a752:	f7fb f83b 	bl	80057cc <GUI_ALLOC_LockH>
 800a756:	ab02      	add	r3, sp, #8
 800a758:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800a75c:	f843 0d04 	str.w	r0, [r3, #-4]!
 800a760:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800a764:	4618      	mov	r0, r3
 800a766:	1aa4      	subs	r4, r4, r2
 800a768:	f7fb f83e 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a76c:	3401      	adds	r4, #1
 800a76e:	4620      	mov	r0, r4
 800a770:	b002      	add	sp, #8
 800a772:	bd10      	pop	{r4, pc}

0800a774 <WM_ForEachDesc>:
 800a774:	f7ff be9a 	b.w	800a4ac <WM__ForEachDesc>

0800a778 <WM_GetClientRect>:
 800a778:	4b04      	ldr	r3, [pc, #16]	; (800a78c <WM_GetClientRect+0x14>)
 800a77a:	4601      	mov	r1, r0
 800a77c:	6818      	ldr	r0, [r3, #0]
 800a77e:	b910      	cbnz	r0, 800a786 <WM_GetClientRect+0xe>
 800a780:	4b03      	ldr	r3, [pc, #12]	; (800a790 <WM_GetClientRect+0x18>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800a786:	f7ff bf7d 	b.w	800a684 <WM__GetClientRectEx>
 800a78a:	bf00      	nop
 800a78c:	200089cc 	.word	0x200089cc
 800a790:	200000d8 	.word	0x200000d8

0800a794 <WM_GetDesktopWindow>:
 800a794:	4b01      	ldr	r3, [pc, #4]	; (800a79c <WM_GetDesktopWindow+0x8>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	200089d0 	.word	0x200089d0

0800a7a0 <WM_GetFirstChild>:
 800a7a0:	b508      	push	{r3, lr}
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	b110      	cbz	r0, 800a7ac <WM_GetFirstChild+0xc>
 800a7a6:	f7fb f807 	bl	80057b8 <GUI_ALLOC_h2p>
 800a7aa:	69c3      	ldr	r3, [r0, #28]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	bd08      	pop	{r3, pc}

0800a7b0 <WM_GetWindowOrgX>:
 800a7b0:	b508      	push	{r3, lr}
 800a7b2:	b120      	cbz	r0, 800a7be <WM_GetWindowOrgX+0xe>
 800a7b4:	f7fb f800 	bl	80057b8 <GUI_ALLOC_h2p>
 800a7b8:	f9b0 0000 	ldrsh.w	r0, [r0]
 800a7bc:	bd08      	pop	{r3, pc}
 800a7be:	bd08      	pop	{r3, pc}

0800a7c0 <WM_GetParent>:
 800a7c0:	b508      	push	{r3, lr}
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	b110      	cbz	r0, 800a7cc <WM_GetParent+0xc>
 800a7c6:	f7fa fff7 	bl	80057b8 <GUI_ALLOC_h2p>
 800a7ca:	6983      	ldr	r3, [r0, #24]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	bd08      	pop	{r3, pc}

0800a7d0 <WM_BringToBottom>:
 800a7d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	b087      	sub	sp, #28
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d039      	beq.n	800a850 <WM_BringToBottom+0x80>
 800a7dc:	f7fa fff6 	bl	80057cc <GUI_ALLOC_LockH>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	9001      	str	r0, [sp, #4]
 800a7e4:	c803      	ldmia	r0, {r0, r1}
 800a7e6:	ad04      	add	r5, sp, #16
 800a7e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a7ec:	a801      	add	r0, sp, #4
 800a7ee:	6a1e      	ldr	r6, [r3, #32]
 800a7f0:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
 800a7f4:	f7fa fff8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a7f8:	4620      	mov	r0, r4
 800a7fa:	f7ff fe76 	bl	800a4ea <WM__GetPrevSibling>
 800a7fe:	4607      	mov	r7, r0
 800a800:	b330      	cbz	r0, 800a850 <WM_BringToBottom+0x80>
 800a802:	4620      	mov	r0, r4
 800a804:	f7ff ffdc 	bl	800a7c0 <WM_GetParent>
 800a808:	f019 0f02 	tst.w	r9, #2
 800a80c:	4680      	mov	r8, r0
 800a80e:	d004      	beq.n	800a81a <WM_BringToBottom+0x4a>
 800a810:	4601      	mov	r1, r0
 800a812:	4632      	mov	r2, r6
 800a814:	4628      	mov	r0, r5
 800a816:	f7ff f92b 	bl	8009a70 <WM__InvalidateRectEx>
 800a81a:	4620      	mov	r0, r4
 800a81c:	f7fa ffd6 	bl	80057cc <GUI_ALLOC_LockH>
 800a820:	9001      	str	r0, [sp, #4]
 800a822:	4640      	mov	r0, r8
 800a824:	f7fa ffd2 	bl	80057cc <GUI_ALLOC_LockH>
 800a828:	9003      	str	r0, [sp, #12]
 800a82a:	4638      	mov	r0, r7
 800a82c:	f7fa ffce 	bl	80057cc <GUI_ALLOC_LockH>
 800a830:	9b03      	ldr	r3, [sp, #12]
 800a832:	9a01      	ldr	r2, [sp, #4]
 800a834:	69d9      	ldr	r1, [r3, #28]
 800a836:	6206      	str	r6, [r0, #32]
 800a838:	9002      	str	r0, [sp, #8]
 800a83a:	6211      	str	r1, [r2, #32]
 800a83c:	a801      	add	r0, sp, #4
 800a83e:	61dc      	str	r4, [r3, #28]
 800a840:	f7fa ffd2 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a844:	a803      	add	r0, sp, #12
 800a846:	f7fa ffcf 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a84a:	a802      	add	r0, sp, #8
 800a84c:	f7fa ffcc 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a850:	b007      	add	sp, #28
 800a852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800a858 <WM_OnKey>:
 800a858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a85a:	4a08      	ldr	r2, [pc, #32]	; (800a87c <WM_OnKey+0x24>)
 800a85c:	4603      	mov	r3, r0
 800a85e:	6810      	ldr	r0, [r2, #0]
 800a860:	b148      	cbz	r0, 800a876 <WM_OnKey+0x1e>
 800a862:	9300      	str	r3, [sp, #0]
 800a864:	9101      	str	r1, [sp, #4]
 800a866:	230e      	movs	r3, #14
 800a868:	a902      	add	r1, sp, #8
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	f8cd d014 	str.w	sp, [sp, #20]
 800a870:	f7ff fe58 	bl	800a524 <WM__SendMessage>
 800a874:	2001      	movs	r0, #1
 800a876:	b007      	add	sp, #28
 800a878:	f85d fb04 	ldr.w	pc, [sp], #4
 800a87c:	200089dc 	.word	0x200089dc

0800a880 <WM_ResizeWindow>:
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	ea51 0302 	orrs.w	r3, r1, r2
 800a888:	b08a      	sub	sp, #40	; 0x28
 800a88a:	4680      	mov	r8, r0
 800a88c:	460d      	mov	r5, r1
 800a88e:	4614      	mov	r4, r2
 800a890:	d06e      	beq.n	800a970 <WM_ResizeWindow+0xf0>
 800a892:	2800      	cmp	r0, #0
 800a894:	d06c      	beq.n	800a970 <WM_ResizeWindow+0xf0>
 800a896:	f7fa ff99 	bl	80057cc <GUI_ALLOC_LockH>
 800a89a:	4603      	mov	r3, r0
 800a89c:	9003      	str	r0, [sp, #12]
 800a89e:	c803      	ldmia	r0, {r0, r1}
 800a8a0:	ae04      	add	r6, sp, #16
 800a8a2:	af06      	add	r7, sp, #24
 800a8a4:	e886 0003 	stmia.w	r6, {r0, r1}
 800a8a8:	e887 0003 	stmia.w	r7, {r0, r1}
 800a8ac:	b17d      	cbz	r5, 800a8ce <WM_ResizeWindow+0x4e>
 800a8ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8b0:	f402 7220 	and.w	r2, r2, #640	; 0x280
 800a8b4:	2a80      	cmp	r2, #128	; 0x80
 800a8b6:	bf0b      	itete	eq
 800a8b8:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
 800a8bc:	f8bd 201c 	ldrhne.w	r2, [sp, #28]
 800a8c0:	1b55      	subeq	r5, r2, r5
 800a8c2:	18ad      	addne	r5, r5, r2
 800a8c4:	bf0c      	ite	eq
 800a8c6:	f8ad 5018 	strheq.w	r5, [sp, #24]
 800a8ca:	f8ad 501c 	strhne.w	r5, [sp, #28]
 800a8ce:	b184      	cbz	r4, 800a8f2 <WM_ResizeWindow+0x72>
 800a8d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8d2:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 800a8d6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800a8da:	bf0b      	itete	eq
 800a8dc:	f8bd 201a 	ldrheq.w	r2, [sp, #26]
 800a8e0:	f8bd 201e 	ldrhne.w	r2, [sp, #30]
 800a8e4:	1b14      	subeq	r4, r2, r4
 800a8e6:	18a4      	addne	r4, r4, r2
 800a8e8:	bf0c      	ite	eq
 800a8ea:	f8ad 401a 	strheq.w	r4, [sp, #26]
 800a8ee:	f8ad 401e 	strhne.w	r4, [sp, #30]
 800a8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f4:	03da      	lsls	r2, r3, #15
 800a8f6:	d502      	bpl.n	800a8fe <WM_ResizeWindow+0x7e>
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	f7fe ffad 	bl	8009858 <WM__InvalidateDrawAndDescs>
 800a8fe:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a902:	9b03      	ldr	r3, [sp, #12]
 800a904:	e883 0003 	stmia.w	r3, {r0, r1}
 800a908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a90a:	079b      	lsls	r3, r3, #30
 800a90c:	d50a      	bpl.n	800a924 <WM_ResizeWindow+0xa4>
 800a90e:	463a      	mov	r2, r7
 800a910:	4631      	mov	r1, r6
 800a912:	a808      	add	r0, sp, #32
 800a914:	f7fb fb40 	bl	8005f98 <GUI_MergeRect>
 800a918:	9b03      	ldr	r3, [sp, #12]
 800a91a:	a808      	add	r0, sp, #32
 800a91c:	6a1a      	ldr	r2, [r3, #32]
 800a91e:	6999      	ldr	r1, [r3, #24]
 800a920:	f7ff f8a6 	bl	8009a70 <WM__InvalidateRectEx>
 800a924:	f9bd 4018 	ldrsh.w	r4, [sp, #24]
 800a928:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 800a92c:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 800a930:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 800a934:	f9bd 601c 	ldrsh.w	r6, [sp, #28]
 800a938:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800a93c:	f9bd 501a 	ldrsh.w	r5, [sp, #26]
 800a940:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 800a944:	1a61      	subs	r1, r4, r1
 800a946:	1bc0      	subs	r0, r0, r7
 800a948:	ac0a      	add	r4, sp, #40	; 0x28
 800a94a:	1af3      	subs	r3, r6, r3
 800a94c:	1aaa      	subs	r2, r5, r2
 800a94e:	9000      	str	r0, [sp, #0]
 800a950:	9803      	ldr	r0, [sp, #12]
 800a952:	f7ff fe19 	bl	800a588 <WM__UpdateChildPositions>
 800a956:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 800a95a:	f101 0008 	add.w	r0, r1, #8
 800a95e:	f7fa fd7f 	bl	8005460 <GUI__IntersectRect>
 800a962:	4640      	mov	r0, r8
 800a964:	2105      	movs	r1, #5
 800a966:	f7ff f89b 	bl	8009aa0 <WM__SendMsgNoData>
 800a96a:	4620      	mov	r0, r4
 800a96c:	f7fa ff3c 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800a970:	b00a      	add	sp, #40	; 0x28
 800a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a976 <WM_SendMessageNoPara>:
 800a976:	f7ff bdf3 	b.w	800a560 <WM__SendMessageNoPara>

0800a97a <WM_SendToParent>:
 800a97a:	b538      	push	{r3, r4, r5, lr}
 800a97c:	4605      	mov	r5, r0
 800a97e:	460c      	mov	r4, r1
 800a980:	b141      	cbz	r1, 800a994 <WM_SendToParent+0x1a>
 800a982:	f7ff ff1d 	bl	800a7c0 <WM_GetParent>
 800a986:	b128      	cbz	r0, 800a994 <WM_SendToParent+0x1a>
 800a988:	60a5      	str	r5, [r4, #8]
 800a98a:	4621      	mov	r1, r4
 800a98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a990:	f7ff bdc8 	b.w	800a524 <WM__SendMessage>
 800a994:	bd38      	pop	{r3, r4, r5, pc}

0800a996 <WM_NotifyParent>:
 800a996:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a998:	2326      	movs	r3, #38	; 0x26
 800a99a:	9103      	str	r1, [sp, #12]
 800a99c:	4669      	mov	r1, sp
 800a99e:	9300      	str	r3, [sp, #0]
 800a9a0:	f7ff ffeb 	bl	800a97a <WM_SendToParent>
 800a9a4:	b005      	add	sp, #20
 800a9a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a9ac <WM_SetFocus>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	a802      	add	r0, sp, #8
 800a9b8:	f003 fde0 	bl	800e57c <memset>
 800a9bc:	2c00      	cmp	r4, #0
 800a9be:	d036      	beq.n	800aa2e <WM_SetFocus+0x82>
 800a9c0:	4e1c      	ldr	r6, [pc, #112]	; (800aa34 <WM_SetFocus+0x88>)
 800a9c2:	6830      	ldr	r0, [r6, #0]
 800a9c4:	4284      	cmp	r4, r0
 800a9c6:	d032      	beq.n	800aa2e <WM_SetFocus+0x82>
 800a9c8:	231e      	movs	r3, #30
 800a9ca:	e88d 0011 	stmia.w	sp, {r0, r4}
 800a9ce:	9302      	str	r3, [sp, #8]
 800a9d0:	b110      	cbz	r0, 800a9d8 <WM_SetFocus+0x2c>
 800a9d2:	a902      	add	r1, sp, #8
 800a9d4:	f7ff fda6 	bl	800a524 <WM__SendMessage>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	a902      	add	r1, sp, #8
 800a9dc:	4620      	mov	r0, r4
 800a9de:	9305      	str	r3, [sp, #20]
 800a9e0:	f7ff fda0 	bl	800a524 <WM__SendMessage>
 800a9e4:	9d05      	ldr	r5, [sp, #20]
 800a9e6:	b98d      	cbnz	r5, 800aa0c <WM_SetFocus+0x60>
 800a9e8:	6034      	str	r4, [r6, #0]
 800a9ea:	2620      	movs	r6, #32
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f7ff fee7 	bl	800a7c0 <WM_GetParent>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	b968      	cbnz	r0, 800aa12 <WM_SetFocus+0x66>
 800a9f6:	9c00      	ldr	r4, [sp, #0]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7fe ff1d 	bl	8009838 <WM__IsWindow>
 800a9fe:	b128      	cbz	r0, 800aa0c <WM_SetFocus+0x60>
 800aa00:	2620      	movs	r6, #32
 800aa02:	4620      	mov	r0, r4
 800aa04:	f7ff fedc 	bl	800a7c0 <WM_GetParent>
 800aa08:	4604      	mov	r4, r0
 800aa0a:	b948      	cbnz	r0, 800aa20 <WM_SetFocus+0x74>
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	b006      	add	sp, #24
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	a902      	add	r1, sp, #8
 800aa14:	9602      	str	r6, [sp, #8]
 800aa16:	f8cd d014 	str.w	sp, [sp, #20]
 800aa1a:	f7ff fd83 	bl	800a524 <WM__SendMessage>
 800aa1e:	e7e5      	b.n	800a9ec <WM_SetFocus+0x40>
 800aa20:	a902      	add	r1, sp, #8
 800aa22:	9602      	str	r6, [sp, #8]
 800aa24:	f8cd d014 	str.w	sp, [sp, #20]
 800aa28:	f7ff fd7c 	bl	800a524 <WM__SendMessage>
 800aa2c:	e7e9      	b.n	800aa02 <WM_SetFocus+0x56>
 800aa2e:	2501      	movs	r5, #1
 800aa30:	e7ec      	b.n	800aa0c <WM_SetFocus+0x60>
 800aa32:	bf00      	nop
 800aa34:	200089dc 	.word	0x200089dc

0800aa38 <WM_SetSize>:
 800aa38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa3a:	460e      	mov	r6, r1
 800aa3c:	4617      	mov	r7, r2
 800aa3e:	4605      	mov	r5, r0
 800aa40:	b1d8      	cbz	r0, 800aa7a <WM_SetSize+0x42>
 800aa42:	f7fa fec3 	bl	80057cc <GUI_ALLOC_LockH>
 800aa46:	f10d 0e08 	add.w	lr, sp, #8
 800aa4a:	f9b0 1000 	ldrsh.w	r1, [r0]
 800aa4e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 800aa52:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800aa56:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800aa5a:	f84e 0d04 	str.w	r0, [lr, #-4]!
 800aa5e:	1a64      	subs	r4, r4, r1
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	3301      	adds	r3, #1
 800aa64:	3401      	adds	r4, #1
 800aa66:	1aff      	subs	r7, r7, r3
 800aa68:	1b34      	subs	r4, r6, r4
 800aa6a:	4670      	mov	r0, lr
 800aa6c:	f7fa febc 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800aa70:	463a      	mov	r2, r7
 800aa72:	4621      	mov	r1, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f7ff ff03 	bl	800a880 <WM_ResizeWindow>
 800aa7a:	b003      	add	sp, #12
 800aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800aa80 <WM_SetUserClipRect>:
 800aa80:	4b04      	ldr	r3, [pc, #16]	; (800aa94 <WM_SetUserClipRect+0x14>)
 800aa82:	b510      	push	{r4, lr}
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800aa88:	6418      	str	r0, [r3, #64]	; 0x40
 800aa8a:	f7fe feb1 	bl	80097f0 <WM__ActivateClipRect>
 800aa8e:	4620      	mov	r0, r4
 800aa90:	bd10      	pop	{r4, pc}
 800aa92:	bf00      	nop
 800aa94:	200000d8 	.word	0x200000d8

0800aa98 <WM_ValidateWindow>:
 800aa98:	b507      	push	{r0, r1, r2, lr}
 800aa9a:	b178      	cbz	r0, 800aabc <WM_ValidateWindow+0x24>
 800aa9c:	f7fa fe96 	bl	80057cc <GUI_ALLOC_LockH>
 800aaa0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800aaa2:	9001      	str	r0, [sp, #4]
 800aaa4:	069a      	lsls	r2, r3, #26
 800aaa6:	d506      	bpl.n	800aab6 <WM_ValidateWindow+0x1e>
 800aaa8:	4a06      	ldr	r2, [pc, #24]	; (800aac4 <WM_ValidateWindow+0x2c>)
 800aaaa:	f023 0320 	bic.w	r3, r3, #32
 800aaae:	6283      	str	r3, [r0, #40]	; 0x28
 800aab0:	8813      	ldrh	r3, [r2, #0]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	8013      	strh	r3, [r2, #0]
 800aab6:	a801      	add	r0, sp, #4
 800aab8:	f7fa fe96 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800aabc:	b003      	add	sp, #12
 800aabe:	f85d fb04 	ldr.w	pc, [sp], #4
 800aac2:	bf00      	nop
 800aac4:	200089e0 	.word	0x200089e0

0800aac8 <_MoveDescendents>:
 800aac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aacc:	4616      	mov	r6, r2
 800aace:	b088      	sub	sp, #32
 800aad0:	2210      	movs	r2, #16
 800aad2:	4604      	mov	r4, r0
 800aad4:	460d      	mov	r5, r1
 800aad6:	eb0d 0002 	add.w	r0, sp, r2
 800aada:	2100      	movs	r1, #0
 800aadc:	f003 fd4e 	bl	800e57c <memset>
 800aae0:	2703      	movs	r7, #3
 800aae2:	f10d 0808 	add.w	r8, sp, #8
 800aae6:	b914      	cbnz	r4, 800aaee <_MoveDescendents+0x26>
 800aae8:	b008      	add	sp, #32
 800aaea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f7fa fe6c 	bl	80057cc <GUI_ALLOC_LockH>
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	9001      	str	r0, [sp, #4]
 800aafa:	f7fb fa78 	bl	8005fee <GUI_MoveRect>
 800aafe:	9801      	ldr	r0, [sp, #4]
 800ab00:	4632      	mov	r2, r6
 800ab02:	4629      	mov	r1, r5
 800ab04:	3008      	adds	r0, #8
 800ab06:	f7fb fa72 	bl	8005fee <GUI_MoveRect>
 800ab0a:	9b01      	ldr	r3, [sp, #4]
 800ab0c:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 800ab10:	f8d3 9020 	ldr.w	r9, [r3, #32]
 800ab14:	a801      	add	r0, sp, #4
 800ab16:	f7fa fe67 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800ab1a:	4632      	mov	r2, r6
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4650      	mov	r0, sl
 800ab20:	f7ff ffd2 	bl	800aac8 <_MoveDescendents>
 800ab24:	4620      	mov	r0, r4
 800ab26:	a904      	add	r1, sp, #16
 800ab28:	9704      	str	r7, [sp, #16]
 800ab2a:	f8cd 801c 	str.w	r8, [sp, #28]
 800ab2e:	9502      	str	r5, [sp, #8]
 800ab30:	9603      	str	r6, [sp, #12]
 800ab32:	464c      	mov	r4, r9
 800ab34:	f7ff fcf6 	bl	800a524 <WM__SendMessage>
 800ab38:	e7d5      	b.n	800aae6 <_MoveDescendents+0x1e>

0800ab3a <WM__MoveWindow>:
 800ab3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab3e:	b08b      	sub	sp, #44	; 0x2c
 800ab40:	4606      	mov	r6, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	4614      	mov	r4, r2
 800ab46:	2100      	movs	r1, #0
 800ab48:	2210      	movs	r2, #16
 800ab4a:	a806      	add	r0, sp, #24
 800ab4c:	f003 fd16 	bl	800e57c <memset>
 800ab50:	2e00      	cmp	r6, #0
 800ab52:	d043      	beq.n	800abdc <WM__MoveWindow+0xa2>
 800ab54:	b90d      	cbnz	r5, 800ab5a <WM__MoveWindow+0x20>
 800ab56:	2c00      	cmp	r4, #0
 800ab58:	d040      	beq.n	800abdc <WM__MoveWindow+0xa2>
 800ab5a:	4630      	mov	r0, r6
 800ab5c:	f7fa fe36 	bl	80057cc <GUI_ALLOC_LockH>
 800ab60:	4603      	mov	r3, r0
 800ab62:	9001      	str	r0, [sp, #4]
 800ab64:	c803      	ldmia	r0, {r0, r1}
 800ab66:	f10d 0808 	add.w	r8, sp, #8
 800ab6a:	e888 0003 	stmia.w	r8, {r0, r1}
 800ab6e:	4622      	mov	r2, r4
 800ab70:	4618      	mov	r0, r3
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7fb fa3b 	bl	8005fee <GUI_MoveRect>
 800ab78:	9801      	ldr	r0, [sp, #4]
 800ab7a:	af0a      	add	r7, sp, #40	; 0x28
 800ab7c:	4622      	mov	r2, r4
 800ab7e:	4629      	mov	r1, r5
 800ab80:	3008      	adds	r0, #8
 800ab82:	f7fb fa34 	bl	8005fee <GUI_MoveRect>
 800ab86:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 800ab8a:	f8d3 901c 	ldr.w	r9, [r3, #28]
 800ab8e:	4638      	mov	r0, r7
 800ab90:	f7fa fe2a 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800ab94:	4622      	mov	r2, r4
 800ab96:	4629      	mov	r1, r5
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f7ff ff95 	bl	800aac8 <_MoveDescendents>
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7fa fe14 	bl	80057cc <GUI_ALLOC_LockH>
 800aba4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800aba6:	9001      	str	r0, [sp, #4]
 800aba8:	0792      	lsls	r2, r2, #30
 800abaa:	d50a      	bpl.n	800abc2 <WM__MoveWindow+0x88>
 800abac:	6981      	ldr	r1, [r0, #24]
 800abae:	b141      	cbz	r1, 800abc2 <WM__MoveWindow+0x88>
 800abb0:	6a02      	ldr	r2, [r0, #32]
 800abb2:	f7fe ff48 	bl	8009a46 <WM__InvalidateParent>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	4640      	mov	r0, r8
 800abba:	6a1a      	ldr	r2, [r3, #32]
 800abbc:	6999      	ldr	r1, [r3, #24]
 800abbe:	f7fe ff42 	bl	8009a46 <WM__InvalidateParent>
 800abc2:	4638      	mov	r0, r7
 800abc4:	f7fa fe10 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800abc8:	2303      	movs	r3, #3
 800abca:	9306      	str	r3, [sp, #24]
 800abcc:	a906      	add	r1, sp, #24
 800abce:	ab04      	add	r3, sp, #16
 800abd0:	4630      	mov	r0, r6
 800abd2:	9309      	str	r3, [sp, #36]	; 0x24
 800abd4:	9504      	str	r5, [sp, #16]
 800abd6:	9405      	str	r4, [sp, #20]
 800abd8:	f7ff fca4 	bl	800a524 <WM__SendMessage>
 800abdc:	b00b      	add	sp, #44	; 0x2c
 800abde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800abe2 <WM_MoveWindow>:
 800abe2:	f7ff bfaa 	b.w	800ab3a <WM__MoveWindow>
	...

0800abe8 <WM_SetHasTrans>:
 800abe8:	b513      	push	{r0, r1, r4, lr}
 800abea:	4604      	mov	r4, r0
 800abec:	b1b8      	cbz	r0, 800ac1e <WM_SetHasTrans+0x36>
 800abee:	f7fa fded 	bl	80057cc <GUI_ALLOC_LockH>
 800abf2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800abf4:	9001      	str	r0, [sp, #4]
 800abf6:	07db      	lsls	r3, r3, #31
 800abf8:	d40e      	bmi.n	800ac18 <WM_SetHasTrans+0x30>
 800abfa:	4620      	mov	r0, r4
 800abfc:	f7ff ff4c 	bl	800aa98 <WM_ValidateWindow>
 800ac00:	9a01      	ldr	r2, [sp, #4]
 800ac02:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800ac04:	f043 0301 	orr.w	r3, r3, #1
 800ac08:	6293      	str	r3, [r2, #40]	; 0x28
 800ac0a:	4a06      	ldr	r2, [pc, #24]	; (800ac24 <WM_SetHasTrans+0x3c>)
 800ac0c:	6813      	ldr	r3, [r2, #0]
 800ac0e:	4620      	mov	r0, r4
 800ac10:	3301      	adds	r3, #1
 800ac12:	6013      	str	r3, [r2, #0]
 800ac14:	f7fe ff9a 	bl	8009b4c <WM_InvalidateWindow>
 800ac18:	a801      	add	r0, sp, #4
 800ac1a:	f7fa fde5 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800ac1e:	b002      	add	sp, #8
 800ac20:	bd10      	pop	{r4, pc}
 800ac22:	bf00      	nop
 800ac24:	20008a04 	.word	0x20008a04

0800ac28 <WM_DeleteTimer>:
 800ac28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac2a:	4605      	mov	r5, r0
 800ac2c:	b168      	cbz	r0, 800ac4a <WM_DeleteTimer+0x22>
 800ac2e:	f7fa fdcd 	bl	80057cc <GUI_ALLOC_LockH>
 800ac32:	ac02      	add	r4, sp, #8
 800ac34:	f844 0d04 	str.w	r0, [r4, #-4]!
 800ac38:	6800      	ldr	r0, [r0, #0]
 800ac3a:	f000 fce9 	bl	800b610 <GUI_TIMER_Delete>
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7fa fdd2 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800ac44:	4628      	mov	r0, r5
 800ac46:	f7fa fdfb 	bl	8005840 <GUI_ALLOC_Free>
 800ac4a:	b003      	add	sp, #12
 800ac4c:	bd30      	pop	{r4, r5, pc}

0800ac4e <WM__DeleteAssocTimer>:
 800ac4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac50:	4605      	mov	r5, r0
 800ac52:	a801      	add	r0, sp, #4
 800ac54:	f000 fca8 	bl	800b5a8 <GUI_TIMER__GetFirstTimer>
 800ac58:	4604      	mov	r4, r0
 800ac5a:	e015      	b.n	800ac88 <WM__DeleteAssocTimer+0x3a>
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fd0a 	bl	800b678 <GUI_TIMER_GetFlag>
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	b19b      	cbz	r3, 800ac90 <WM__DeleteAssocTimer+0x42>
 800ac68:	b190      	cbz	r0, 800ac90 <WM__DeleteAssocTimer+0x42>
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fa fda4 	bl	80057b8 <GUI_ALLOC_h2p>
 800ac70:	6843      	ldr	r3, [r0, #4]
 800ac72:	42ab      	cmp	r3, r5
 800ac74:	d10c      	bne.n	800ac90 <WM__DeleteAssocTimer+0x42>
 800ac76:	4620      	mov	r0, r4
 800ac78:	a901      	add	r1, sp, #4
 800ac7a:	9e01      	ldr	r6, [sp, #4]
 800ac7c:	f000 fcac 	bl	800b5d8 <GUI_TIMER__GetNextTimerLin>
 800ac80:	4604      	mov	r4, r0
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ffd0 	bl	800ac28 <WM_DeleteTimer>
 800ac88:	2c00      	cmp	r4, #0
 800ac8a:	d1e7      	bne.n	800ac5c <WM__DeleteAssocTimer+0xe>
 800ac8c:	b002      	add	sp, #8
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	a901      	add	r1, sp, #4
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 fca0 	bl	800b5d8 <GUI_TIMER__GetNextTimerLin>
 800ac98:	e7de      	b.n	800ac58 <WM__DeleteAssocTimer+0xa>
	...

0800ac9c <GUI__MixColorsBulk>:
 800ac9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca0:	b087      	sub	sp, #28
 800aca2:	4606      	mov	r6, r0
 800aca4:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800aca8:	9304      	str	r3, [sp, #16]
 800acaa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800acac:	009d      	lsls	r5, r3, #2
 800acae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	2300      	movs	r3, #0
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	4b18      	ldr	r3, [pc, #96]	; (800ad1c <GUI__MixColorsBulk+0x80>)
 800acbc:	460f      	mov	r7, r1
 800acbe:	4690      	mov	r8, r2
 800acc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800acc2:	9901      	ldr	r1, [sp, #4]
 800acc4:	4291      	cmp	r1, r2
 800acc6:	d102      	bne.n	800acce <GUI__MixColorsBulk+0x32>
 800acc8:	b007      	add	sp, #28
 800acca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acce:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800acd2:	9702      	str	r7, [sp, #8]
 800acd4:	46c2      	mov	sl, r8
 800acd6:	46b3      	mov	fp, r6
 800acd8:	f85b 0b04 	ldr.w	r0, [fp], #4
 800acdc:	9c02      	ldr	r4, [sp, #8]
 800acde:	9904      	ldr	r1, [sp, #16]
 800ace0:	9305      	str	r3, [sp, #20]
 800ace2:	0e02      	lsrs	r2, r0, #24
 800ace4:	434a      	muls	r2, r1
 800ace6:	21ff      	movs	r1, #255	; 0xff
 800ace8:	fbb2 f2f1 	udiv	r2, r2, r1
 800acec:	f854 1b04 	ldr.w	r1, [r4], #4
 800acf0:	9402      	str	r4, [sp, #8]
 800acf2:	b2d2      	uxtb	r2, r2
 800acf4:	681c      	ldr	r4, [r3, #0]
 800acf6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800acfa:	47a0      	blx	r4
 800acfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ad00:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800ad04:	f84a 0b04 	str.w	r0, [sl], #4
 800ad08:	9b05      	ldr	r3, [sp, #20]
 800ad0a:	d1e5      	bne.n	800acd8 <GUI__MixColorsBulk+0x3c>
 800ad0c:	9a03      	ldr	r2, [sp, #12]
 800ad0e:	4417      	add	r7, r2
 800ad10:	9a01      	ldr	r2, [sp, #4]
 800ad12:	3201      	adds	r2, #1
 800ad14:	442e      	add	r6, r5
 800ad16:	44a8      	add	r8, r5
 800ad18:	9201      	str	r2, [sp, #4]
 800ad1a:	e7d1      	b.n	800acc0 <GUI__MixColorsBulk+0x24>
 800ad1c:	20000108 	.word	0x20000108

0800ad20 <GUI__MixColors>:
 800ad20:	0e0b      	lsrs	r3, r1, #24
 800ad22:	bf08      	it	eq
 800ad24:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 800ad28:	0e03      	lsrs	r3, r0, #24
 800ad2a:	b530      	push	{r4, r5, lr}
 800ad2c:	435a      	muls	r2, r3
 800ad2e:	0a0c      	lsrs	r4, r1, #8
 800ad30:	23ff      	movs	r3, #255	; 0xff
 800ad32:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 800ad36:	fbb2 f2f3 	udiv	r2, r2, r3
 800ad3a:	1a9d      	subs	r5, r3, r2
 800ad3c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800ad40:	436c      	muls	r4, r5
 800ad42:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 800ad46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad4a:	fb02 4303 	mla	r3, r2, r3, r4
 800ad4e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800ad52:	4342      	muls	r2, r0
 800ad54:	fb05 2101 	mla	r1, r5, r1, r2
 800ad58:	0a09      	lsrs	r1, r1, #8
 800ad5a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800ad5e:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 800ad62:	ea43 0001 	orr.w	r0, r3, r1
 800ad66:	bd30      	pop	{r4, r5, pc}

0800ad68 <_OnExit>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4c08      	ldr	r4, [pc, #32]	; (800ad8c <_OnExit+0x24>)
 800ad6c:	6820      	ldr	r0, [r4, #0]
 800ad6e:	f7fa fd19 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 800ad72:	6860      	ldr	r0, [r4, #4]
 800ad74:	f7fa fd16 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 800ad78:	68a0      	ldr	r0, [r4, #8]
 800ad7a:	f7fa fd13 	bl	80057a4 <GUI_ALLOC_FreeFixedBlock>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60a3      	str	r3, [r4, #8]
 800ad82:	6063      	str	r3, [r4, #4]
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	60e3      	str	r3, [r4, #12]
 800ad88:	6123      	str	r3, [r4, #16]
 800ad8a:	bd10      	pop	{r4, pc}
 800ad8c:	20000324 	.word	0x20000324

0800ad90 <GUI__GetAlphaBuffer>:
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	4c25      	ldr	r4, [pc, #148]	; (800ae2c <GUI__GetAlphaBuffer+0x9c>)
 800ad96:	461d      	mov	r5, r3
 800ad98:	6923      	ldr	r3, [r4, #16]
 800ad9a:	4606      	mov	r6, r0
 800ad9c:	4688      	mov	r8, r1
 800ad9e:	4617      	mov	r7, r2
 800ada0:	b93b      	cbnz	r3, 800adb2 <GUI__GetAlphaBuffer+0x22>
 800ada2:	2301      	movs	r3, #1
 800ada4:	4620      	mov	r0, r4
 800ada6:	6123      	str	r3, [r4, #16]
 800ada8:	4b21      	ldr	r3, [pc, #132]	; (800ae30 <GUI__GetAlphaBuffer+0xa0>)
 800adaa:	f840 3f14 	str.w	r3, [r0, #20]!
 800adae:	f7fb fa7f 	bl	80062b0 <GUI__RegisterExit>
 800adb2:	68e3      	ldr	r3, [r4, #12]
 800adb4:	b933      	cbnz	r3, 800adc4 <GUI__GetAlphaBuffer+0x34>
 800adb6:	4b1f      	ldr	r3, [pc, #124]	; (800ae34 <GUI__GetAlphaBuffer+0xa4>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	60e3      	str	r3, [r4, #12]
 800adbc:	b913      	cbnz	r3, 800adc4 <GUI__GetAlphaBuffer+0x34>
 800adbe:	f7fe f809 	bl	8008dd4 <LCD_GetVXSizeMax>
 800adc2:	60e0      	str	r0, [r4, #12]
 800adc4:	b10d      	cbz	r5, 800adca <GUI__GetAlphaBuffer+0x3a>
 800adc6:	68e3      	ldr	r3, [r4, #12]
 800adc8:	602b      	str	r3, [r5, #0]
 800adca:	b36e      	cbz	r6, 800ae28 <GUI__GetAlphaBuffer+0x98>
 800adcc:	6823      	ldr	r3, [r4, #0]
 800adce:	bb4b      	cbnz	r3, 800ae24 <GUI__GetAlphaBuffer+0x94>
 800add0:	68e0      	ldr	r0, [r4, #12]
 800add2:	0080      	lsls	r0, r0, #2
 800add4:	f7fa fdcc 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 800add8:	fab0 f580 	clz	r5, r0
 800addc:	6020      	str	r0, [r4, #0]
 800adde:	096d      	lsrs	r5, r5, #5
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	6033      	str	r3, [r6, #0]
 800ade4:	f1b8 0f00 	cmp.w	r8, #0
 800ade8:	d00c      	beq.n	800ae04 <GUI__GetAlphaBuffer+0x74>
 800adea:	6863      	ldr	r3, [r4, #4]
 800adec:	b93b      	cbnz	r3, 800adfe <GUI__GetAlphaBuffer+0x6e>
 800adee:	68e0      	ldr	r0, [r4, #12]
 800adf0:	0080      	lsls	r0, r0, #2
 800adf2:	f7fa fdbd 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 800adf6:	2800      	cmp	r0, #0
 800adf8:	6060      	str	r0, [r4, #4]
 800adfa:	bf08      	it	eq
 800adfc:	2501      	moveq	r5, #1
 800adfe:	6863      	ldr	r3, [r4, #4]
 800ae00:	f8c8 3000 	str.w	r3, [r8]
 800ae04:	b15f      	cbz	r7, 800ae1e <GUI__GetAlphaBuffer+0x8e>
 800ae06:	68a3      	ldr	r3, [r4, #8]
 800ae08:	b93b      	cbnz	r3, 800ae1a <GUI__GetAlphaBuffer+0x8a>
 800ae0a:	68e0      	ldr	r0, [r4, #12]
 800ae0c:	0080      	lsls	r0, r0, #2
 800ae0e:	f7fa fdaf 	bl	8005970 <GUI_ALLOC_GetFixedBlock>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	60a0      	str	r0, [r4, #8]
 800ae16:	bf08      	it	eq
 800ae18:	2501      	moveq	r5, #1
 800ae1a:	68a3      	ldr	r3, [r4, #8]
 800ae1c:	603b      	str	r3, [r7, #0]
 800ae1e:	4628      	mov	r0, r5
 800ae20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae24:	2500      	movs	r5, #0
 800ae26:	e7db      	b.n	800ade0 <GUI__GetAlphaBuffer+0x50>
 800ae28:	4635      	mov	r5, r6
 800ae2a:	e7db      	b.n	800ade4 <GUI__GetAlphaBuffer+0x54>
 800ae2c:	20000324 	.word	0x20000324
 800ae30:	0800ad69 	.word	0x0800ad69
 800ae34:	200089bc 	.word	0x200089bc

0800ae38 <GUI__DoAlphaBlending>:
 800ae38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	b093      	sub	sp, #76	; 0x4c
 800ae3e:	2600      	movs	r6, #0
 800ae40:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800ae42:	9009      	str	r0, [sp, #36]	; 0x24
 800ae44:	910a      	str	r1, [sp, #40]	; 0x28
 800ae46:	4692      	mov	sl, r2
 800ae48:	461f      	mov	r7, r3
 800ae4a:	602e      	str	r6, [r5, #0]
 800ae4c:	ab11      	add	r3, sp, #68	; 0x44
 800ae4e:	4632      	mov	r2, r6
 800ae50:	a910      	add	r1, sp, #64	; 0x40
 800ae52:	a80f      	add	r0, sp, #60	; 0x3c
 800ae54:	f7ff ff9c 	bl	800ad90 <GUI__GetAlphaBuffer>
 800ae58:	4604      	mov	r4, r0
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f040 80b4 	bne.w	800afc8 <GUI__DoAlphaBlending+0x190>
 800ae60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae62:	429f      	cmp	r7, r3
 800ae64:	bfa8      	it	ge
 800ae66:	461f      	movge	r7, r3
 800ae68:	9708      	str	r7, [sp, #32]
 800ae6a:	4f58      	ldr	r7, [pc, #352]	; (800afcc <GUI__DoAlphaBlending+0x194>)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	7c58      	ldrb	r0, [r3, #17]
 800ae70:	4b57      	ldr	r3, [pc, #348]	; (800afd0 <GUI__DoAlphaBlending+0x198>)
 800ae72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ae76:	9305      	str	r3, [sp, #20]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae7c:	f7fd ff76 	bl	8008d6c <GUI_GetBitsPerPixelEx>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	9006      	str	r0, [sp, #24]
 800ae84:	7c58      	ldrb	r0, [r3, #17]
 800ae86:	f7fd ff8f 	bl	8008da8 <GUI_GetpfIndex2ColorEx>
 800ae8a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ae8e:	9007      	str	r0, [sp, #28]
 800ae90:	4626      	mov	r6, r4
 800ae92:	970d      	str	r7, [sp, #52]	; 0x34
 800ae94:	4653      	mov	r3, sl
 800ae96:	f853 0b04 	ldr.w	r0, [r3], #4
 800ae9a:	930c      	str	r3, [sp, #48]	; 0x30
 800ae9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ae9e:	4798      	blx	r3
 800aea0:	0e03      	lsrs	r3, r0, #24
 800aea2:	2bff      	cmp	r3, #255	; 0xff
 800aea4:	9003      	str	r0, [sp, #12]
 800aea6:	9304      	str	r3, [sp, #16]
 800aea8:	f000 8085 	beq.w	800afb6 <GUI__DoAlphaBlending+0x17e>
 800aeac:	bb44      	cbnz	r4, 800af00 <GUI__DoAlphaBlending+0xc8>
 800aeae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb0:	9a08      	ldr	r2, [sp, #32]
 800aeb2:	eb03 0806 	add.w	r8, r3, r6
 800aeb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800aebe:	4543      	cmp	r3, r8
 800aec0:	bfc4      	itt	gt
 800aec2:	eba3 0408 	subgt.w	r4, r3, r8
 800aec6:	4698      	movgt	r8, r3
 800aec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeca:	189f      	adds	r7, r3, r2
 800aecc:	9b05      	ldr	r3, [sp, #20]
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	eb04 0906 	add.w	r9, r4, r6
 800aed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aed6:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800aeda:	444b      	add	r3, r9
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee0:	4640      	mov	r0, r8
 800aee2:	4619      	mov	r1, r3
 800aee4:	1e7a      	subs	r2, r7, #1
 800aee6:	f002 fa6f 	bl	800d3c8 <GUI_ReadRectEx>
 800aeea:	9b06      	ldr	r3, [sp, #24]
 800aeec:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800aeee:	2b17      	cmp	r3, #23
 800aef0:	dc2c      	bgt.n	800af4c <GUI__DoAlphaBlending+0x114>
 800aef2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aef4:	9a06      	ldr	r2, [sp, #24]
 800aef6:	ebab 0104 	sub.w	r1, fp, r4
 800aefa:	4448      	add	r0, r9
 800aefc:	f000 f87e 	bl	800affc <GUI__ExpandPixelIndicesEx>
 800af00:	4b34      	ldr	r3, [pc, #208]	; (800afd4 <GUI__DoAlphaBlending+0x19c>)
 800af02:	69df      	ldr	r7, [r3, #28]
 800af04:	00b4      	lsls	r4, r6, #2
 800af06:	2f00      	cmp	r7, #0
 800af08:	d036      	beq.n	800af78 <GUI__DoAlphaBlending+0x140>
 800af0a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800af0c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800af0e:	1932      	adds	r2, r6, r4
 800af10:	4421      	add	r1, r4
 800af12:	9210      	str	r2, [sp, #64]	; 0x40
 800af14:	465b      	mov	r3, fp
 800af16:	910f      	str	r1, [sp, #60]	; 0x3c
 800af18:	4650      	mov	r0, sl
 800af1a:	47b8      	blx	r7
 800af1c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800af1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800af20:	2300      	movs	r3, #0
 800af22:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 800af26:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800af2a:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 800af2e:	d11d      	bne.n	800af6c <GUI__DoAlphaBlending+0x134>
 800af30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800af34:	3301      	adds	r3, #1
 800af36:	459b      	cmp	fp, r3
 800af38:	d1f3      	bne.n	800af22 <GUI__DoAlphaBlending+0xea>
 800af3a:	682b      	ldr	r3, [r5, #0]
 800af3c:	9610      	str	r6, [sp, #64]	; 0x40
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	602b      	str	r3, [r5, #0]
 800af44:	9810      	ldr	r0, [sp, #64]	; 0x40
 800af46:	b013      	add	sp, #76	; 0x4c
 800af48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af4c:	4b22      	ldr	r3, [pc, #136]	; (800afd8 <GUI__DoAlphaBlending+0x1a0>)
 800af4e:	9a07      	ldr	r2, [sp, #28]
 800af50:	429a      	cmp	r2, r3
 800af52:	d0d5      	beq.n	800af00 <GUI__DoAlphaBlending+0xc8>
 800af54:	4481      	add	r9, r0
 800af56:	eba7 0708 	sub.w	r7, r7, r8
 800af5a:	f8d9 0000 	ldr.w	r0, [r9]
 800af5e:	9b07      	ldr	r3, [sp, #28]
 800af60:	4798      	blx	r3
 800af62:	3f01      	subs	r7, #1
 800af64:	f849 0b04 	str.w	r0, [r9], #4
 800af68:	d1f7      	bne.n	800af5a <GUI__DoAlphaBlending+0x122>
 800af6a:	e7c9      	b.n	800af00 <GUI__DoAlphaBlending+0xc8>
 800af6c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800af70:	bf08      	it	eq
 800af72:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 800af76:	e7dd      	b.n	800af34 <GUI__DoAlphaBlending+0xfc>
 800af78:	9904      	ldr	r1, [sp, #16]
 800af7a:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800af7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af80:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800af82:	b959      	cbnz	r1, 800af9c <GUI__DoAlphaBlending+0x164>
 800af84:	591b      	ldr	r3, [r3, r4]
 800af86:	513b      	str	r3, [r7, r4]
 800af88:	2401      	movs	r4, #1
 800af8a:	f1bb 0b01 	subs.w	fp, fp, #1
 800af8e:	f106 0601 	add.w	r6, r6, #1
 800af92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af96:	f47f af7d 	bne.w	800ae94 <GUI__DoAlphaBlending+0x5c>
 800af9a:	e7d3      	b.n	800af44 <GUI__DoAlphaBlending+0x10c>
 800af9c:	5919      	ldr	r1, [r3, r4]
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 800afa4:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <GUI__DoAlphaBlending+0x1a4>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4798      	blx	r3
 800afaa:	682b      	ldr	r3, [r5, #0]
 800afac:	5138      	str	r0, [r7, r4]
 800afae:	f043 0301 	orr.w	r3, r3, #1
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	e7e8      	b.n	800af88 <GUI__DoAlphaBlending+0x150>
 800afb6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afb8:	9a03      	ldr	r2, [sp, #12]
 800afba:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800afbe:	682b      	ldr	r3, [r5, #0]
 800afc0:	f043 0301 	orr.w	r3, r3, #1
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	e7e0      	b.n	800af8a <GUI__DoAlphaBlending+0x152>
 800afc8:	4630      	mov	r0, r6
 800afca:	e7bc      	b.n	800af46 <GUI__DoAlphaBlending+0x10e>
 800afcc:	200000d8 	.word	0x200000d8
 800afd0:	200089b8 	.word	0x200089b8
 800afd4:	20000324 	.word	0x20000324
 800afd8:	0800b765 	.word	0x0800b765
 800afdc:	20000108 	.word	0x20000108

0800afe0 <GUI__AllocAlphaBuffer>:
 800afe0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afe2:	b940      	cbnz	r0, 800aff6 <GUI__AllocAlphaBuffer+0x16>
 800afe4:	4602      	mov	r2, r0
 800afe6:	2300      	movs	r3, #0
 800afe8:	a902      	add	r1, sp, #8
 800afea:	a801      	add	r0, sp, #4
 800afec:	f7ff fed0 	bl	800ad90 <GUI__GetAlphaBuffer>
 800aff0:	b005      	add	sp, #20
 800aff2:	f85d fb04 	ldr.w	pc, [sp], #4
 800aff6:	aa03      	add	r2, sp, #12
 800aff8:	e7f5      	b.n	800afe6 <GUI__AllocAlphaBuffer+0x6>
	...

0800affc <GUI__ExpandPixelIndicesEx>:
 800affc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b000:	1e0c      	subs	r4, r1, #0
 800b002:	4605      	mov	r5, r0
 800b004:	f340 80c7 	ble.w	800b196 <GUI__ExpandPixelIndicesEx+0x19a>
 800b008:	2a08      	cmp	r2, #8
 800b00a:	685e      	ldr	r6, [r3, #4]
 800b00c:	f340 809b 	ble.w	800b146 <GUI__ExpandPixelIndicesEx+0x14a>
 800b010:	2a10      	cmp	r2, #16
 800b012:	f340 80af 	ble.w	800b174 <GUI__ExpandPixelIndicesEx+0x178>
 800b016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b01a:	4622      	mov	r2, r4
 800b01c:	4629      	mov	r1, r5
 800b01e:	46bc      	mov	ip, r7
 800b020:	2302      	movs	r3, #2
 800b022:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b026:	4760      	bx	ip
 800b028:	1e67      	subs	r7, r4, #1
 800b02a:	10fb      	asrs	r3, r7, #3
 800b02c:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800b030:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b034:	eb05 0903 	add.w	r9, r5, r3
 800b038:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800b03c:	f007 0707 	and.w	r7, r7, #7
 800b040:	f815 a003 	ldrb.w	sl, [r5, r3]
 800b044:	2580      	movs	r5, #128	; 0x80
 800b046:	413d      	asrs	r5, r7
 800b048:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b04c:	b2ed      	uxtb	r5, r5
 800b04e:	f1c7 0307 	rsb	r3, r7, #7
 800b052:	ea05 000a 	and.w	r0, r5, sl
 800b056:	4118      	asrs	r0, r3
 800b058:	47b0      	blx	r6
 800b05a:	f848 0904 	str.w	r0, [r8], #-4
 800b05e:	b94f      	cbnz	r7, 800b074 <GUI__ExpandPixelIndicesEx+0x78>
 800b060:	f899 a000 	ldrb.w	sl, [r9]
 800b064:	2501      	movs	r5, #1
 800b066:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b06a:	2707      	movs	r7, #7
 800b06c:	3c01      	subs	r4, #1
 800b06e:	d1ee      	bne.n	800b04e <GUI__ExpandPixelIndicesEx+0x52>
 800b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b074:	006d      	lsls	r5, r5, #1
 800b076:	3f01      	subs	r7, #1
 800b078:	b2ed      	uxtb	r5, r5
 800b07a:	e7f7      	b.n	800b06c <GUI__ExpandPixelIndicesEx+0x70>
 800b07c:	1e67      	subs	r7, r4, #1
 800b07e:	10bb      	asrs	r3, r7, #2
 800b080:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800b084:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b088:	f007 0703 	and.w	r7, r7, #3
 800b08c:	eb05 0903 	add.w	r9, r5, r3
 800b090:	f815 a003 	ldrb.w	sl, [r5, r3]
 800b094:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800b098:	007b      	lsls	r3, r7, #1
 800b09a:	25c0      	movs	r5, #192	; 0xc0
 800b09c:	411d      	asrs	r5, r3
 800b09e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b0a2:	b2ed      	uxtb	r5, r5
 800b0a4:	007b      	lsls	r3, r7, #1
 800b0a6:	f1c3 0306 	rsb	r3, r3, #6
 800b0aa:	ea05 000a 	and.w	r0, r5, sl
 800b0ae:	4118      	asrs	r0, r3
 800b0b0:	47b0      	blx	r6
 800b0b2:	f848 0904 	str.w	r0, [r8], #-4
 800b0b6:	b94f      	cbnz	r7, 800b0cc <GUI__ExpandPixelIndicesEx+0xd0>
 800b0b8:	2503      	movs	r5, #3
 800b0ba:	f899 a000 	ldrb.w	sl, [r9]
 800b0be:	462f      	mov	r7, r5
 800b0c0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b0c4:	3c01      	subs	r4, #1
 800b0c6:	d1ed      	bne.n	800b0a4 <GUI__ExpandPixelIndicesEx+0xa8>
 800b0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0cc:	00ad      	lsls	r5, r5, #2
 800b0ce:	3f01      	subs	r7, #1
 800b0d0:	b2ed      	uxtb	r5, r5
 800b0d2:	e7f7      	b.n	800b0c4 <GUI__ExpandPixelIndicesEx+0xc8>
 800b0d4:	1e67      	subs	r7, r4, #1
 800b0d6:	107b      	asrs	r3, r7, #1
 800b0d8:	f104 4880 	add.w	r8, r4, #1073741824	; 0x40000000
 800b0dc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b0e0:	f007 0701 	and.w	r7, r7, #1
 800b0e4:	eb05 0903 	add.w	r9, r5, r3
 800b0e8:	f815 a003 	ldrb.w	sl, [r5, r3]
 800b0ec:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800b0f0:	00bb      	lsls	r3, r7, #2
 800b0f2:	25f0      	movs	r5, #240	; 0xf0
 800b0f4:	411d      	asrs	r5, r3
 800b0f6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b0fa:	b2ed      	uxtb	r5, r5
 800b0fc:	00bb      	lsls	r3, r7, #2
 800b0fe:	f1c3 0304 	rsb	r3, r3, #4
 800b102:	ea05 000a 	and.w	r0, r5, sl
 800b106:	4118      	asrs	r0, r3
 800b108:	47b0      	blx	r6
 800b10a:	f848 0904 	str.w	r0, [r8], #-4
 800b10e:	b94f      	cbnz	r7, 800b124 <GUI__ExpandPixelIndicesEx+0x128>
 800b110:	f899 a000 	ldrb.w	sl, [r9]
 800b114:	250f      	movs	r5, #15
 800b116:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b11a:	2701      	movs	r7, #1
 800b11c:	3c01      	subs	r4, #1
 800b11e:	d1ed      	bne.n	800b0fc <GUI__ExpandPixelIndicesEx+0x100>
 800b120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b124:	012d      	lsls	r5, r5, #4
 800b126:	b2ed      	uxtb	r5, r5
 800b128:	2700      	movs	r7, #0
 800b12a:	e7f7      	b.n	800b11c <GUI__ExpandPixelIndicesEx+0x120>
 800b12c:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800b130:	4425      	add	r5, r4
 800b132:	1b64      	subs	r4, r4, r5
 800b134:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 800b138:	47b0      	blx	r6
 800b13a:	42e5      	cmn	r5, r4
 800b13c:	f847 0d04 	str.w	r0, [r7, #-4]!
 800b140:	d1f8      	bne.n	800b134 <GUI__ExpandPixelIndicesEx+0x138>
 800b142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b146:	3a01      	subs	r2, #1
 800b148:	2a07      	cmp	r2, #7
 800b14a:	d824      	bhi.n	800b196 <GUI__ExpandPixelIndicesEx+0x19a>
 800b14c:	a301      	add	r3, pc, #4	; (adr r3, 800b154 <GUI__ExpandPixelIndicesEx+0x158>)
 800b14e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800b152:	bf00      	nop
 800b154:	0800b029 	.word	0x0800b029
 800b158:	0800b07d 	.word	0x0800b07d
 800b15c:	0800b197 	.word	0x0800b197
 800b160:	0800b0d5 	.word	0x0800b0d5
 800b164:	0800b197 	.word	0x0800b197
 800b168:	0800b197 	.word	0x0800b197
 800b16c:	0800b197 	.word	0x0800b197
 800b170:	0800b12d 	.word	0x0800b12d
 800b174:	695f      	ldr	r7, [r3, #20]
 800b176:	2f00      	cmp	r7, #0
 800b178:	f47f af4f 	bne.w	800b01a <GUI__ExpandPixelIndicesEx+0x1e>
 800b17c:	eb05 0744 	add.w	r7, r5, r4, lsl #1
 800b180:	eb05 0584 	add.w	r5, r5, r4, lsl #2
 800b184:	f837 0d02 	ldrh.w	r0, [r7, #-2]!
 800b188:	47b0      	blx	r6
 800b18a:	3c01      	subs	r4, #1
 800b18c:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b190:	d1f8      	bne.n	800b184 <GUI__ExpandPixelIndicesEx+0x188>
 800b192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19a:	bf00      	nop

0800b19c <GUI__ManageCacheEx>:
 800b19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b19e:	1e07      	subs	r7, r0, #0
 800b1a0:	460e      	mov	r6, r1
 800b1a2:	dc1f      	bgt.n	800b1e4 <GUI__ManageCacheEx+0x48>
 800b1a4:	4c30      	ldr	r4, [pc, #192]	; (800b268 <GUI__ManageCacheEx+0xcc>)
 800b1a6:	6863      	ldr	r3, [r4, #4]
 800b1a8:	b103      	cbz	r3, 800b1ac <GUI__ManageCacheEx+0x10>
 800b1aa:	4798      	blx	r3
 800b1ac:	2e01      	cmp	r6, #1
 800b1ae:	d010      	beq.n	800b1d2 <GUI__ManageCacheEx+0x36>
 800b1b0:	2e02      	cmp	r6, #2
 800b1b2:	d02d      	beq.n	800b210 <GUI__ManageCacheEx+0x74>
 800b1b4:	b9b6      	cbnz	r6, 800b1e4 <GUI__ManageCacheEx+0x48>
 800b1b6:	00bd      	lsls	r5, r7, #2
 800b1b8:	1963      	adds	r3, r4, r5
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d03d      	beq.n	800b23c <GUI__ManageCacheEx+0xa0>
 800b1c0:	2601      	movs	r6, #1
 800b1c2:	442c      	add	r4, r5
 800b1c4:	4635      	mov	r5, r6
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	bf18      	it	ne
 800b1cc:	3b01      	subne	r3, #1
 800b1ce:	60a3      	str	r3, [r4, #8]
 800b1d0:	e018      	b.n	800b204 <GUI__ManageCacheEx+0x68>
 800b1d2:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800b1d6:	68a5      	ldr	r5, [r4, #8]
 800b1d8:	b9bd      	cbnz	r5, 800b20a <GUI__ManageCacheEx+0x6e>
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f7fb f8fe 	bl	80063dc <GUI_DEVICE__GetpDriver>
 800b1e0:	9001      	str	r0, [sp, #4]
 800b1e2:	b908      	cbnz	r0, 800b1e8 <GUI__ManageCacheEx+0x4c>
 800b1e4:	2501      	movs	r5, #1
 800b1e6:	e00d      	b.n	800b204 <GUI__ManageCacheEx+0x68>
 800b1e8:	68c3      	ldr	r3, [r0, #12]
 800b1ea:	210d      	movs	r1, #13
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ee:	a801      	add	r0, sp, #4
 800b1f0:	4798      	blx	r3
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d0f5      	beq.n	800b1e4 <GUI__ManageCacheEx+0x48>
 800b1f8:	4631      	mov	r1, r6
 800b1fa:	9801      	ldr	r0, [sp, #4]
 800b1fc:	4798      	blx	r3
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	3301      	adds	r3, #1
 800b202:	60a3      	str	r3, [r4, #8]
 800b204:	4628      	mov	r0, r5
 800b206:	b003      	add	sp, #12
 800b208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b20a:	3501      	adds	r5, #1
 800b20c:	60a5      	str	r5, [r4, #8]
 800b20e:	e7e9      	b.n	800b1e4 <GUI__ManageCacheEx+0x48>
 800b210:	4638      	mov	r0, r7
 800b212:	f7fb f8e3 	bl	80063dc <GUI_DEVICE__GetpDriver>
 800b216:	9001      	str	r0, [sp, #4]
 800b218:	2800      	cmp	r0, #0
 800b21a:	d0e3      	beq.n	800b1e4 <GUI__ManageCacheEx+0x48>
 800b21c:	68c3      	ldr	r3, [r0, #12]
 800b21e:	210d      	movs	r1, #13
 800b220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b222:	a801      	add	r0, sp, #4
 800b224:	4798      	blx	r3
 800b226:	4605      	mov	r5, r0
 800b228:	2800      	cmp	r0, #0
 800b22a:	d0db      	beq.n	800b1e4 <GUI__ManageCacheEx+0x48>
 800b22c:	6823      	ldr	r3, [r4, #0]
 800b22e:	b103      	cbz	r3, 800b232 <GUI__ManageCacheEx+0x96>
 800b230:	4798      	blx	r3
 800b232:	2102      	movs	r1, #2
 800b234:	9801      	ldr	r0, [sp, #4]
 800b236:	47a8      	blx	r5
 800b238:	2500      	movs	r5, #0
 800b23a:	e7e3      	b.n	800b204 <GUI__ManageCacheEx+0x68>
 800b23c:	4638      	mov	r0, r7
 800b23e:	f7fb f8cd 	bl	80063dc <GUI_DEVICE__GetpDriver>
 800b242:	9001      	str	r0, [sp, #4]
 800b244:	2800      	cmp	r0, #0
 800b246:	d0bb      	beq.n	800b1c0 <GUI__ManageCacheEx+0x24>
 800b248:	68c3      	ldr	r3, [r0, #12]
 800b24a:	210d      	movs	r1, #13
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	a801      	add	r0, sp, #4
 800b250:	4798      	blx	r3
 800b252:	4607      	mov	r7, r0
 800b254:	2800      	cmp	r0, #0
 800b256:	d0b3      	beq.n	800b1c0 <GUI__ManageCacheEx+0x24>
 800b258:	6823      	ldr	r3, [r4, #0]
 800b25a:	b103      	cbz	r3, 800b25e <GUI__ManageCacheEx+0xc2>
 800b25c:	4798      	blx	r3
 800b25e:	2100      	movs	r1, #0
 800b260:	9801      	ldr	r0, [sp, #4]
 800b262:	47b8      	blx	r7
 800b264:	e7ad      	b.n	800b1c2 <GUI__ManageCacheEx+0x26>
 800b266:	bf00      	nop
 800b268:	20000344 	.word	0x20000344

0800b26c <GUI__ManageCache>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <GUI__ManageCache+0xc>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4601      	mov	r1, r0
 800b272:	7c58      	ldrb	r0, [r3, #17]
 800b274:	f7ff bf92 	b.w	800b19c <GUI__ManageCacheEx>
 800b278:	200000d8 	.word	0x200000d8

0800b27c <_Log2VisBuffered>:
 800b27c:	4770      	bx	lr
	...

0800b280 <_DispLine>:
 800b280:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b282:	ab02      	add	r3, sp, #8
 800b284:	4615      	mov	r5, r2
 800b286:	f843 1d08 	str.w	r1, [r3, #-8]!
 800b28a:	4a20      	ldr	r2, [pc, #128]	; (800b30c <_DispLine+0x8c>)
 800b28c:	9001      	str	r0, [sp, #4]
 800b28e:	6814      	ldr	r4, [r2, #0]
 800b290:	4619      	mov	r1, r3
 800b292:	2201      	movs	r2, #1
 800b294:	47a0      	blx	r4
 800b296:	4c1e      	ldr	r4, [pc, #120]	; (800b310 <_DispLine+0x90>)
 800b298:	9001      	str	r0, [sp, #4]
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	6958      	ldr	r0, [r3, #20]
 800b29e:	b9d0      	cbnz	r0, 800b2d6 <_DispLine+0x56>
 800b2a0:	2001      	movs	r0, #1
 800b2a2:	f7ff ffe3 	bl	800b26c <GUI__ManageCache>
 800b2a6:	6822      	ldr	r2, [r4, #0]
 800b2a8:	69d3      	ldr	r3, [r2, #28]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	b9d3      	cbnz	r3, 800b2e4 <_DispLine+0x64>
 800b2ae:	4d19      	ldr	r5, [pc, #100]	; (800b314 <_DispLine+0x94>)
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	db20      	blt.n	800b2fc <_DispLine+0x7c>
 800b2ba:	a801      	add	r0, sp, #4
 800b2bc:	f7fc f81a 	bl	80072f4 <GUI_UC__GetCharCodeInc>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4606      	mov	r6, r0
 800b2c8:	4798      	blx	r3
 800b2ca:	682b      	ldr	r3, [r5, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0ef      	beq.n	800b2b0 <_DispLine+0x30>
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	4798      	blx	r3
 800b2d4:	e7ec      	b.n	800b2b0 <_DispLine+0x30>
 800b2d6:	4629      	mov	r1, r5
 800b2d8:	f7fa fed4 	bl	8006084 <GUI_RectsIntersect>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d1df      	bne.n	800b2a0 <_DispLine+0x20>
 800b2e0:	b002      	add	sp, #8
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	4c0c      	ldr	r4, [pc, #48]	; (800b318 <_DispLine+0x98>)
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	6821      	ldr	r1, [r4, #0]
 800b2ea:	b159      	cbz	r1, 800b304 <_DispLine+0x84>
 800b2ec:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 800b2f0:	9801      	ldr	r0, [sp, #4]
 800b2f2:	9900      	ldr	r1, [sp, #0]
 800b2f4:	4798      	blx	r3
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	4798      	blx	r3
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	f7ff ffb5 	bl	800b26c <GUI__ManageCache>
 800b302:	e7ed      	b.n	800b2e0 <_DispLine+0x60>
 800b304:	9900      	ldr	r1, [sp, #0]
 800b306:	9801      	ldr	r0, [sp, #4]
 800b308:	4798      	blx	r3
 800b30a:	e7f7      	b.n	800b2fc <_DispLine+0x7c>
 800b30c:	20000110 	.word	0x20000110
 800b310:	200000d8 	.word	0x200000d8
 800b314:	20008994 	.word	0x20008994
 800b318:	20008988 	.word	0x20008988

0800b31c <GUI__GetLineNumChars>:
 800b31c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b31e:	460d      	mov	r5, r1
 800b320:	9001      	str	r0, [sp, #4]
 800b322:	4604      	mov	r4, r0
 800b324:	b140      	cbz	r0, 800b338 <GUI__GetLineNumChars+0x1c>
 800b326:	4b0b      	ldr	r3, [pc, #44]	; (800b354 <GUI__GetLineNumChars+0x38>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	695c      	ldr	r4, [r3, #20]
 800b32e:	b174      	cbz	r4, 800b34e <GUI__GetLineNumChars+0x32>
 800b330:	6864      	ldr	r4, [r4, #4]
 800b332:	b164      	cbz	r4, 800b34e <GUI__GetLineNumChars+0x32>
 800b334:	47a0      	blx	r4
 800b336:	4604      	mov	r4, r0
 800b338:	4620      	mov	r0, r4
 800b33a:	b003      	add	sp, #12
 800b33c:	bd30      	pop	{r4, r5, pc}
 800b33e:	a801      	add	r0, sp, #4
 800b340:	f7fb ffd8 	bl	80072f4 <GUI_UC__GetCharCodeInc>
 800b344:	2800      	cmp	r0, #0
 800b346:	d0f7      	beq.n	800b338 <GUI__GetLineNumChars+0x1c>
 800b348:	280a      	cmp	r0, #10
 800b34a:	d0f5      	beq.n	800b338 <GUI__GetLineNumChars+0x1c>
 800b34c:	3401      	adds	r4, #1
 800b34e:	42ac      	cmp	r4, r5
 800b350:	dbf5      	blt.n	800b33e <GUI__GetLineNumChars+0x22>
 800b352:	e7f1      	b.n	800b338 <GUI__GetLineNumChars+0x1c>
 800b354:	200000d8 	.word	0x200000d8

0800b358 <GUI__GetOverlap>:
 800b358:	b513      	push	{r0, r1, r4, lr}
 800b35a:	a902      	add	r1, sp, #8
 800b35c:	2400      	movs	r4, #0
 800b35e:	f841 4d04 	str.w	r4, [r1, #-4]!
 800b362:	f7fa fc59 	bl	8005c18 <GUI_GetCharDistXEx>
 800b366:	9b01      	ldr	r3, [sp, #4]
 800b368:	4298      	cmp	r0, r3
 800b36a:	bfb4      	ite	lt
 800b36c:	1a18      	sublt	r0, r3, r0
 800b36e:	4620      	movge	r0, r4
 800b370:	b002      	add	sp, #8
 800b372:	bd10      	pop	{r4, pc}

0800b374 <GUI__GetLineDistX>:
 800b374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b376:	ab02      	add	r3, sp, #8
 800b378:	4a14      	ldr	r2, [pc, #80]	; (800b3cc <GUI__GetLineDistX+0x58>)
 800b37a:	f843 1d08 	str.w	r1, [r3, #-8]!
 800b37e:	6814      	ldr	r4, [r2, #0]
 800b380:	9001      	str	r0, [sp, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	4619      	mov	r1, r3
 800b386:	47a0      	blx	r4
 800b388:	9001      	str	r0, [sp, #4]
 800b38a:	b1e8      	cbz	r0, 800b3c8 <GUI__GetLineDistX+0x54>
 800b38c:	4b10      	ldr	r3, [pc, #64]	; (800b3d0 <GUI__GetLineDistX+0x5c>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	69db      	ldr	r3, [r3, #28]
 800b392:	695c      	ldr	r4, [r3, #20]
 800b394:	b10c      	cbz	r4, 800b39a <GUI__GetLineDistX+0x26>
 800b396:	6824      	ldr	r4, [r4, #0]
 800b398:	b954      	cbnz	r4, 800b3b0 <GUI__GetLineDistX+0x3c>
 800b39a:	4625      	mov	r5, r4
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	9300      	str	r3, [sp, #0]
 800b3a4:	da08      	bge.n	800b3b8 <GUI__GetLineDistX+0x44>
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f7ff ffd6 	bl	800b358 <GUI__GetOverlap>
 800b3ac:	4428      	add	r0, r5
 800b3ae:	e001      	b.n	800b3b4 <GUI__GetLineDistX+0x40>
 800b3b0:	9900      	ldr	r1, [sp, #0]
 800b3b2:	47a0      	blx	r4
 800b3b4:	b003      	add	sp, #12
 800b3b6:	bd30      	pop	{r4, r5, pc}
 800b3b8:	a801      	add	r0, sp, #4
 800b3ba:	f7fb ff9b 	bl	80072f4 <GUI_UC__GetCharCodeInc>
 800b3be:	4604      	mov	r4, r0
 800b3c0:	f7fa fc22 	bl	8005c08 <GUI_GetCharDistX>
 800b3c4:	4405      	add	r5, r0
 800b3c6:	e7e9      	b.n	800b39c <GUI__GetLineDistX+0x28>
 800b3c8:	e7f4      	b.n	800b3b4 <GUI__GetLineDistX+0x40>
 800b3ca:	bf00      	nop
 800b3cc:	20000110 	.word	0x20000110
 800b3d0:	200000d8 	.word	0x200000d8

0800b3d4 <GUI__DispLine>:
 800b3d4:	4b26      	ldr	r3, [pc, #152]	; (800b470 <GUI__DispLine+0x9c>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3da:	4605      	mov	r5, r0
 800b3dc:	460e      	mov	r6, r1
 800b3de:	b15b      	cbz	r3, 800b3f8 <GUI__DispLine+0x24>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	f7fe fe0d 	bl	800a000 <WM__InitIVRSearch>
 800b3e6:	b390      	cbz	r0, 800b44e <GUI__DispLine+0x7a>
 800b3e8:	466a      	mov	r2, sp
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f7ff ff47 	bl	800b280 <_DispLine>
 800b3f2:	f7fe fd4b 	bl	8009e8c <WM__GetNextIVR>
 800b3f6:	e7f6      	b.n	800b3e6 <GUI__DispLine+0x12>
 800b3f8:	6810      	ldr	r0, [r2, #0]
 800b3fa:	6851      	ldr	r1, [r2, #4]
 800b3fc:	4c1d      	ldr	r4, [pc, #116]	; (800b474 <GUI__DispLine+0xa0>)
 800b3fe:	466b      	mov	r3, sp
 800b400:	c303      	stmia	r3!, {r0, r1}
 800b402:	6821      	ldr	r1, [r4, #0]
 800b404:	f8bd 3000 	ldrh.w	r3, [sp]
 800b408:	f8b1 2048 	ldrh.w	r2, [r1, #72]	; 0x48
 800b40c:	4413      	add	r3, r2
 800b40e:	f8ad 3000 	strh.w	r3, [sp]
 800b412:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
 800b416:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800b41a:	4419      	add	r1, r3
 800b41c:	f8ad 1002 	strh.w	r1, [sp, #2]
 800b420:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800b424:	440a      	add	r2, r1
 800b426:	f8ad 2004 	strh.w	r2, [sp, #4]
 800b42a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b42e:	4668      	mov	r0, sp
 800b430:	4413      	add	r3, r2
 800b432:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b436:	f7fe fde3 	bl	800a000 <WM__InitIVRSearch>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	b948      	cbnz	r0, 800b452 <GUI__DispLine+0x7e>
 800b43e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800b440:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b442:	1a52      	subs	r2, r2, r1
 800b444:	845a      	strh	r2, [r3, #34]	; 0x22
 800b446:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800b448:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800b44a:	1a52      	subs	r2, r2, r1
 800b44c:	849a      	strh	r2, [r3, #36]	; 0x24
 800b44e:	b002      	add	sp, #8
 800b450:	bd70      	pop	{r4, r5, r6, pc}
 800b452:	f8bd 2000 	ldrh.w	r2, [sp]
 800b456:	845a      	strh	r2, [r3, #34]	; 0x22
 800b458:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800b45c:	849a      	strh	r2, [r3, #36]	; 0x24
 800b45e:	4631      	mov	r1, r6
 800b460:	466a      	mov	r2, sp
 800b462:	4628      	mov	r0, r5
 800b464:	f7ff ff0c 	bl	800b280 <_DispLine>
 800b468:	f7fe fd10 	bl	8009e8c <WM__GetNextIVR>
 800b46c:	e7e5      	b.n	800b43a <GUI__DispLine+0x66>
 800b46e:	bf00      	nop
 800b470:	20008974 	.word	0x20008974
 800b474:	200000d8 	.word	0x200000d8

0800b478 <GL_FillCircle>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	f240 26c3 	movw	r6, #707	; 0x2c3
 800b480:	b085      	sub	sp, #20
 800b482:	4f2c      	ldr	r7, [pc, #176]	; (800b534 <GL_FillCircle+0xbc>)
 800b484:	4356      	muls	r6, r2
 800b486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b48a:	fb96 f6f3 	sdiv	r6, r6, r3
 800b48e:	2302      	movs	r3, #2
 800b490:	fb92 f3f3 	sdiv	r3, r2, r3
 800b494:	fb02 3302 	mla	r3, r2, r2, r3
 800b498:	9301      	str	r3, [sp, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b49e:	4614      	mov	r4, r2
 800b4a0:	4680      	mov	r8, r0
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4402      	add	r2, r0
 800b4a6:	2501      	movs	r5, #1
 800b4a8:	1b00      	subs	r0, r0, r4
 800b4aa:	4689      	mov	r9, r1
 800b4ac:	4798      	blx	r3
 800b4ae:	eb08 0305 	add.w	r3, r8, r5
 800b4b2:	9302      	str	r3, [sp, #8]
 800b4b4:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800b4b8:	3601      	adds	r6, #1
 800b4ba:	9303      	str	r3, [sp, #12]
 800b4bc:	42b5      	cmp	r5, r6
 800b4be:	dd02      	ble.n	800b4c6 <GL_FillCircle+0x4e>
 800b4c0:	b005      	add	sp, #20
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	fb04 f304 	mul.w	r3, r4, r4
 800b4ca:	9a01      	ldr	r2, [sp, #4]
 800b4cc:	fb05 3305 	mla	r3, r5, r5, r3
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	da18      	bge.n	800b506 <GL_FillCircle+0x8e>
 800b4d4:	42b4      	cmp	r4, r6
 800b4d6:	dd15      	ble.n	800b504 <GL_FillCircle+0x8c>
 800b4d8:	9b02      	ldr	r3, [sp, #8]
 800b4da:	eba3 0a05 	sub.w	sl, r3, r5
 800b4de:	9b03      	ldr	r3, [sp, #12]
 800b4e0:	eb03 0b05 	add.w	fp, r3, r5
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4e8:	465a      	mov	r2, fp
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	eb04 0109 	add.w	r1, r4, r9
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	4798      	blx	r3
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4f8:	465a      	mov	r2, fp
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	eba9 0104 	sub.w	r1, r9, r4
 800b500:	4650      	mov	r0, sl
 800b502:	4798      	blx	r3
 800b504:	3c01      	subs	r4, #1
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b50a:	eba8 0a04 	sub.w	sl, r8, r4
 800b50e:	eb04 0b08 	add.w	fp, r4, r8
 800b512:	eb09 0105 	add.w	r1, r9, r5
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	465a      	mov	r2, fp
 800b51a:	4650      	mov	r0, sl
 800b51c:	4798      	blx	r3
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b522:	eba9 0105 	sub.w	r1, r9, r5
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	465a      	mov	r2, fp
 800b52a:	4650      	mov	r0, sl
 800b52c:	4798      	blx	r3
 800b52e:	3501      	adds	r5, #1
 800b530:	e7c4      	b.n	800b4bc <GL_FillCircle+0x44>
 800b532:	bf00      	nop
 800b534:	200000d8 	.word	0x200000d8

0800b538 <GUI_SelectLayer>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	4c07      	ldr	r4, [pc, #28]	; (800b558 <GUI_SelectLayer+0x20>)
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	4606      	mov	r6, r0
 800b540:	7c5d      	ldrb	r5, [r3, #17]
 800b542:	b930      	cbnz	r0, 800b552 <GUI_SelectLayer+0x1a>
 800b544:	f7fa ff4a 	bl	80063dc <GUI_DEVICE__GetpDriver>
 800b548:	b118      	cbz	r0, 800b552 <GUI_SelectLayer+0x1a>
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	745e      	strb	r6, [r3, #17]
 800b54e:	f7fa fdcb 	bl	80060e8 <GUI_SelectLCD>
 800b552:	4628      	mov	r0, r5
 800b554:	bd70      	pop	{r4, r5, r6, pc}
 800b556:	bf00      	nop
 800b558:	200000d8 	.word	0x200000d8

0800b55c <_Unlink>:
 800b55c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b55e:	4605      	mov	r5, r0
 800b560:	b158      	cbz	r0, 800b57a <_Unlink+0x1e>
 800b562:	f7fa f933 	bl	80057cc <GUI_ALLOC_LockH>
 800b566:	4b0f      	ldr	r3, [pc, #60]	; (800b5a4 <_Unlink+0x48>)
 800b568:	9000      	str	r0, [sp, #0]
 800b56a:	685c      	ldr	r4, [r3, #4]
 800b56c:	42a5      	cmp	r5, r4
 800b56e:	d109      	bne.n	800b584 <_Unlink+0x28>
 800b570:	6842      	ldr	r2, [r0, #4]
 800b572:	605a      	str	r2, [r3, #4]
 800b574:	4668      	mov	r0, sp
 800b576:	f7fa f937 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b57a:	b003      	add	sp, #12
 800b57c:	bd30      	pop	{r4, r5, pc}
 800b57e:	a801      	add	r0, sp, #4
 800b580:	f7fa f932 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b584:	2c00      	cmp	r4, #0
 800b586:	d0f5      	beq.n	800b574 <_Unlink+0x18>
 800b588:	4620      	mov	r0, r4
 800b58a:	f7fa f91f 	bl	80057cc <GUI_ALLOC_LockH>
 800b58e:	6844      	ldr	r4, [r0, #4]
 800b590:	9001      	str	r0, [sp, #4]
 800b592:	42a5      	cmp	r5, r4
 800b594:	d1f3      	bne.n	800b57e <_Unlink+0x22>
 800b596:	9b00      	ldr	r3, [sp, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	6043      	str	r3, [r0, #4]
 800b59c:	a801      	add	r0, sp, #4
 800b59e:	f7fa f923 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b5a2:	e7e7      	b.n	800b574 <_Unlink+0x18>
 800b5a4:	20000358 	.word	0x20000358

0800b5a8 <GUI_TIMER__GetFirstTimer>:
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5ac:	6003      	str	r3, [r0, #0]
 800b5ae:	4b09      	ldr	r3, [pc, #36]	; (800b5d4 <GUI_TIMER__GetFirstTimer+0x2c>)
 800b5b0:	681c      	ldr	r4, [r3, #0]
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	b154      	cbz	r4, 800b5cc <GUI_TIMER__GetFirstTimer+0x24>
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7fa f908 	bl	80057cc <GUI_ALLOC_LockH>
 800b5bc:	ab02      	add	r3, sp, #8
 800b5be:	6902      	ldr	r2, [r0, #16]
 800b5c0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b5c4:	602a      	str	r2, [r5, #0]
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fa f90e 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	b003      	add	sp, #12
 800b5d0:	bd30      	pop	{r4, r5, pc}
 800b5d2:	bf00      	nop
 800b5d4:	20000358 	.word	0x20000358

0800b5d8 <GUI_TIMER__GetNextTimerLin>:
 800b5d8:	2300      	movs	r3, #0
 800b5da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b5dc:	600b      	str	r3, [r1, #0]
 800b5de:	460e      	mov	r6, r1
 800b5e0:	4604      	mov	r4, r0
 800b5e2:	b190      	cbz	r0, 800b60a <GUI_TIMER__GetNextTimerLin+0x32>
 800b5e4:	f7fa f8f2 	bl	80057cc <GUI_ALLOC_LockH>
 800b5e8:	ad02      	add	r5, sp, #8
 800b5ea:	6884      	ldr	r4, [r0, #8]
 800b5ec:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b5f0:	b144      	cbz	r4, 800b604 <GUI_TIMER__GetNextTimerLin+0x2c>
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	f7fa f8f8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	f7fa f8e7 	bl	80057cc <GUI_ALLOC_LockH>
 800b5fe:	6903      	ldr	r3, [r0, #16]
 800b600:	9001      	str	r0, [sp, #4]
 800b602:	6033      	str	r3, [r6, #0]
 800b604:	4628      	mov	r0, r5
 800b606:	f7fa f8ef 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b60a:	4620      	mov	r0, r4
 800b60c:	b002      	add	sp, #8
 800b60e:	bd70      	pop	{r4, r5, r6, pc}

0800b610 <GUI_TIMER_Delete>:
 800b610:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b612:	4604      	mov	r4, r0
 800b614:	b198      	cbz	r0, 800b63e <GUI_TIMER_Delete+0x2e>
 800b616:	4e17      	ldr	r6, [pc, #92]	; (800b674 <GUI_TIMER_Delete+0x64>)
 800b618:	6835      	ldr	r5, [r6, #0]
 800b61a:	42a8      	cmp	r0, r5
 800b61c:	d114      	bne.n	800b648 <GUI_TIMER_Delete+0x38>
 800b61e:	f7fa f8d5 	bl	80057cc <GUI_ALLOC_LockH>
 800b622:	ab02      	add	r3, sp, #8
 800b624:	6882      	ldr	r2, [r0, #8]
 800b626:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b62a:	6032      	str	r2, [r6, #0]
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fa f8db 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b632:	4620      	mov	r0, r4
 800b634:	f7ff ff92 	bl	800b55c <_Unlink>
 800b638:	4620      	mov	r0, r4
 800b63a:	f7fa f901 	bl	8005840 <GUI_ALLOC_Free>
 800b63e:	b002      	add	sp, #8
 800b640:	bd70      	pop	{r4, r5, r6, pc}
 800b642:	4668      	mov	r0, sp
 800b644:	f7fa f8d0 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b648:	2d00      	cmp	r5, #0
 800b64a:	d0f2      	beq.n	800b632 <GUI_TIMER_Delete+0x22>
 800b64c:	4628      	mov	r0, r5
 800b64e:	f7fa f8bd 	bl	80057cc <GUI_ALLOC_LockH>
 800b652:	6885      	ldr	r5, [r0, #8]
 800b654:	9000      	str	r0, [sp, #0]
 800b656:	42ac      	cmp	r4, r5
 800b658:	d1f3      	bne.n	800b642 <GUI_TIMER_Delete+0x32>
 800b65a:	4620      	mov	r0, r4
 800b65c:	f7fa f8b6 	bl	80057cc <GUI_ALLOC_LockH>
 800b660:	9b00      	ldr	r3, [sp, #0]
 800b662:	6882      	ldr	r2, [r0, #8]
 800b664:	9001      	str	r0, [sp, #4]
 800b666:	609a      	str	r2, [r3, #8]
 800b668:	a801      	add	r0, sp, #4
 800b66a:	f7fa f8bd 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b66e:	4668      	mov	r0, sp
 800b670:	e7dd      	b.n	800b62e <GUI_TIMER_Delete+0x1e>
 800b672:	bf00      	nop
 800b674:	20000358 	.word	0x20000358

0800b678 <GUI_TIMER_GetFlag>:
 800b678:	b513      	push	{r0, r1, r4, lr}
 800b67a:	460c      	mov	r4, r1
 800b67c:	b178      	cbz	r0, 800b69e <GUI_TIMER_GetFlag+0x26>
 800b67e:	f7fa f8a5 	bl	80057cc <GUI_ALLOC_LockH>
 800b682:	ab02      	add	r3, sp, #8
 800b684:	8982      	ldrh	r2, [r0, #12]
 800b686:	f843 0d04 	str.w	r0, [r3, #-4]!
 800b68a:	4222      	tst	r2, r4
 800b68c:	4618      	mov	r0, r3
 800b68e:	bf14      	ite	ne
 800b690:	2401      	movne	r4, #1
 800b692:	2400      	moveq	r4, #0
 800b694:	f7fa f8a8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b698:	4620      	mov	r0, r4
 800b69a:	b002      	add	sp, #8
 800b69c:	bd10      	pop	{r4, pc}
 800b69e:	2401      	movs	r4, #1
 800b6a0:	e7fa      	b.n	800b698 <GUI_TIMER_GetFlag+0x20>

0800b6a2 <_GetIndexMask_0>:
 800b6a2:	b508      	push	{r3, lr}
 800b6a4:	f7fd fb5a 	bl	8008d5c <LCD_GetNumColors>
 800b6a8:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800b6ac:	d014      	beq.n	800b6d8 <_GetIndexMask_0+0x36>
 800b6ae:	287f      	cmp	r0, #127	; 0x7f
 800b6b0:	d814      	bhi.n	800b6dc <_GetIndexMask_0+0x3a>
 800b6b2:	283f      	cmp	r0, #63	; 0x3f
 800b6b4:	d814      	bhi.n	800b6e0 <_GetIndexMask_0+0x3e>
 800b6b6:	281f      	cmp	r0, #31
 800b6b8:	d814      	bhi.n	800b6e4 <_GetIndexMask_0+0x42>
 800b6ba:	280f      	cmp	r0, #15
 800b6bc:	d814      	bhi.n	800b6e8 <_GetIndexMask_0+0x46>
 800b6be:	2807      	cmp	r0, #7
 800b6c0:	d814      	bhi.n	800b6ec <_GetIndexMask_0+0x4a>
 800b6c2:	2803      	cmp	r0, #3
 800b6c4:	d814      	bhi.n	800b6f0 <_GetIndexMask_0+0x4e>
 800b6c6:	2801      	cmp	r0, #1
 800b6c8:	bf94      	ite	ls
 800b6ca:	2000      	movls	r0, #0
 800b6cc:	2001      	movhi	r0, #1
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	fa03 f000 	lsl.w	r0, r3, r0
 800b6d4:	3801      	subs	r0, #1
 800b6d6:	bd08      	pop	{r3, pc}
 800b6d8:	2008      	movs	r0, #8
 800b6da:	e7f8      	b.n	800b6ce <_GetIndexMask_0+0x2c>
 800b6dc:	2007      	movs	r0, #7
 800b6de:	e7f6      	b.n	800b6ce <_GetIndexMask_0+0x2c>
 800b6e0:	2006      	movs	r0, #6
 800b6e2:	e7f4      	b.n	800b6ce <_GetIndexMask_0+0x2c>
 800b6e4:	2005      	movs	r0, #5
 800b6e6:	e7f2      	b.n	800b6ce <_GetIndexMask_0+0x2c>
 800b6e8:	2004      	movs	r0, #4
 800b6ea:	e7f0      	b.n	800b6ce <_GetIndexMask_0+0x2c>
 800b6ec:	2003      	movs	r0, #3
 800b6ee:	e7ee      	b.n	800b6ce <_GetIndexMask_0+0x2c>
 800b6f0:	2002      	movs	r0, #2
 800b6f2:	e7ec      	b.n	800b6ce <_GetIndexMask_0+0x2c>

0800b6f4 <_Index2Color_0>:
 800b6f4:	b538      	push	{r3, r4, r5, lr}
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	f7fd fb30 	bl	8008d5c <LCD_GetNumColors>
 800b6fc:	4605      	mov	r5, r0
 800b6fe:	f7fd fb4b 	bl	8008d98 <LCD_GetPalette>
 800b702:	42a5      	cmp	r5, r4
 800b704:	d903      	bls.n	800b70e <_Index2Color_0+0x1a>
 800b706:	b118      	cbz	r0, 800b710 <_Index2Color_0+0x1c>
 800b708:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b70c:	bd38      	pop	{r3, r4, r5, pc}
 800b70e:	2000      	movs	r0, #0
 800b710:	bd38      	pop	{r3, r4, r5, pc}

0800b712 <_Color2Index_0>:
 800b712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b716:	4681      	mov	r9, r0
 800b718:	f7fd fb20 	bl	8008d5c <LCD_GetNumColors>
 800b71c:	4607      	mov	r7, r0
 800b71e:	f7fd fb3b 	bl	8008d98 <LCD_GetPalette>
 800b722:	4606      	mov	r6, r0
 800b724:	b1e0      	cbz	r0, 800b760 <_Color2Index_0+0x4e>
 800b726:	2400      	movs	r4, #0
 800b728:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800b72c:	454b      	cmp	r3, r9
 800b72e:	d014      	beq.n	800b75a <_Color2Index_0+0x48>
 800b730:	3401      	adds	r4, #1
 800b732:	42a7      	cmp	r7, r4
 800b734:	dcf8      	bgt.n	800b728 <_Color2Index_0+0x16>
 800b736:	2400      	movs	r4, #0
 800b738:	f06f 487f 	mvn.w	r8, #4278190080	; 0xff000000
 800b73c:	4625      	mov	r5, r4
 800b73e:	f856 1025 	ldr.w	r1, [r6, r5, lsl #2]
 800b742:	4648      	mov	r0, r9
 800b744:	f7fa fbe1 	bl	8005f0a <GUI_CalcColorDist>
 800b748:	4580      	cmp	r8, r0
 800b74a:	bf88      	it	hi
 800b74c:	462c      	movhi	r4, r5
 800b74e:	f105 0501 	add.w	r5, r5, #1
 800b752:	bf88      	it	hi
 800b754:	4680      	movhi	r8, r0
 800b756:	42af      	cmp	r7, r5
 800b758:	dcf1      	bgt.n	800b73e <_Color2Index_0+0x2c>
 800b75a:	4620      	mov	r0, r4
 800b75c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b760:	4604      	mov	r4, r0
 800b762:	e7fa      	b.n	800b75a <_Color2Index_0+0x48>

0800b764 <LCD_Index2Color_M8888I>:
 800b764:	4770      	bx	lr

0800b766 <GUI_MEMDEV__WriteToActiveAt>:
 800b766:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b76a:	460f      	mov	r7, r1
 800b76c:	4690      	mov	r8, r2
 800b76e:	4606      	mov	r6, r0
 800b770:	f7fa f82c 	bl	80057cc <GUI_ALLOC_LockH>
 800b774:	6803      	ldr	r3, [r0, #0]
 800b776:	ac02      	add	r4, sp, #8
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f844 0d04 	str.w	r0, [r4, #-4]!
 800b77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b780:	2116      	movs	r1, #22
 800b782:	2000      	movs	r0, #0
 800b784:	4798      	blx	r3
 800b786:	4605      	mov	r5, r0
 800b788:	4620      	mov	r0, r4
 800b78a:	f7fa f82d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b78e:	b11d      	cbz	r5, 800b798 <GUI_MEMDEV__WriteToActiveAt+0x32>
 800b790:	4642      	mov	r2, r8
 800b792:	4639      	mov	r1, r7
 800b794:	4630      	mov	r0, r6
 800b796:	47a8      	blx	r5
 800b798:	b002      	add	sp, #8
 800b79a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800b7a0 <GUI_MEMDEV__CreateFixed>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	4d46      	ldr	r5, [pc, #280]	; (800b8c0 <GUI_MEMDEV__CreateFixed+0x120>)
 800b7a6:	b087      	sub	sp, #28
 800b7a8:	461c      	mov	r4, r3
 800b7aa:	682b      	ldr	r3, [r5, #0]
 800b7ac:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800b7ae:	7c5b      	ldrb	r3, [r3, #17]
 800b7b0:	4681      	mov	r9, r0
 800b7b2:	468a      	mov	sl, r1
 800b7b4:	4690      	mov	r8, r2
 800b7b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b7b8:	9811      	ldr	r0, [sp, #68]	; 0x44
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f7fa fe20 	bl	8006400 <GUI_DEVICE_Create>
 800b7c0:	9503      	str	r5, [sp, #12]
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	b920      	cbnz	r0, 800b7d0 <GUI_MEMDEV__CreateFixed+0x30>
 800b7c6:	2700      	movs	r7, #0
 800b7c8:	4638      	mov	r0, r7
 800b7ca:	b007      	add	sp, #28
 800b7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d0:	6903      	ldr	r3, [r0, #16]
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	4798      	blx	r3
 800b7d6:	f7fd fb52 	bl	8008e7e <LCD__GetBPPDevice>
 800b7da:	fb00 f508 	mul.w	r5, r0, r8
 800b7de:	9002      	str	r0, [sp, #8]
 800b7e0:	f7fa f934 	bl	8005a4c <GUI_ALLOC_RequestSize>
 800b7e4:	f017 0701 	ands.w	r7, r7, #1
 800b7e8:	bf08      	it	eq
 800b7ea:	2304      	moveq	r3, #4
 800b7ec:	f105 0507 	add.w	r5, r5, #7
 800b7f0:	bf04      	itt	eq
 800b7f2:	fb90 f0f3 	sdiveq	r0, r0, r3
 800b7f6:	eb00 0040 	addeq.w	r0, r0, r0, lsl #1
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	ea4f 05d5 	mov.w	r5, r5, lsr #3
 800b800:	dc42      	bgt.n	800b888 <GUI_MEMDEV__CreateFixed+0xe8>
 800b802:	b1ad      	cbz	r5, 800b830 <GUI_MEMDEV__CreateFixed+0x90>
 800b804:	3818      	subs	r0, #24
 800b806:	fbb0 f0f5 	udiv	r0, r0, r5
 800b80a:	4264      	negs	r4, r4
 800b80c:	4284      	cmp	r4, r0
 800b80e:	bfa8      	it	ge
 800b810:	4604      	movge	r4, r0
 800b812:	b97f      	cbnz	r7, 800b834 <GUI_MEMDEV__CreateFixed+0x94>
 800b814:	9700      	str	r7, [sp, #0]
 800b816:	4623      	mov	r3, r4
 800b818:	4642      	mov	r2, r8
 800b81a:	4651      	mov	r1, sl
 800b81c:	4648      	mov	r0, r9
 800b81e:	f001 f89f 	bl	800c960 <GUI_USAGE_BM_Create>
 800b822:	2c00      	cmp	r4, #0
 800b824:	4683      	mov	fp, r0
 800b826:	dc39      	bgt.n	800b89c <GUI_MEMDEV__CreateFixed+0xfc>
 800b828:	4630      	mov	r0, r6
 800b82a:	f7fa fde7 	bl	80063fc <GUI_DEVICE_Delete>
 800b82e:	e7ca      	b.n	800b7c6 <GUI_MEMDEV__CreateFixed+0x26>
 800b830:	4628      	mov	r0, r5
 800b832:	e7ea      	b.n	800b80a <GUI_MEMDEV__CreateFixed+0x6a>
 800b834:	2c00      	cmp	r4, #0
 800b836:	ddf7      	ble.n	800b828 <GUI_MEMDEV__CreateFixed+0x88>
 800b838:	fb05 f004 	mul.w	r0, r5, r4
 800b83c:	3018      	adds	r0, #24
 800b83e:	f7fa f991 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 800b842:	4607      	mov	r7, r0
 800b844:	2800      	cmp	r0, #0
 800b846:	d0ef      	beq.n	800b828 <GUI_MEMDEV__CreateFixed+0x88>
 800b848:	f04f 0b00 	mov.w	fp, #0
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7f9 ffbd 	bl	80057cc <GUI_ALLOC_LockH>
 800b852:	4603      	mov	r3, r0
 800b854:	a806      	add	r0, sp, #24
 800b856:	9a02      	ldr	r2, [sp, #8]
 800b858:	f840 3d04 	str.w	r3, [r0, #-4]!
 800b85c:	f8a3 9004 	strh.w	r9, [r3, #4]
 800b860:	601e      	str	r6, [r3, #0]
 800b862:	f8a3 a006 	strh.w	sl, [r3, #6]
 800b866:	f8a3 8008 	strh.w	r8, [r3, #8]
 800b86a:	815c      	strh	r4, [r3, #10]
 800b86c:	60dd      	str	r5, [r3, #12]
 800b86e:	611a      	str	r2, [r3, #16]
 800b870:	f8c3 b014 	str.w	fp, [r3, #20]
 800b874:	f7f9 ffb8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b87a:	6133      	str	r3, [r6, #16]
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	60b7      	str	r7, [r6, #8]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	7c5b      	ldrb	r3, [r3, #17]
 800b884:	61b3      	str	r3, [r6, #24]
 800b886:	e79f      	b.n	800b7c8 <GUI_MEMDEV__CreateFixed+0x28>
 800b888:	2f00      	cmp	r7, #0
 800b88a:	d1d5      	bne.n	800b838 <GUI_MEMDEV__CreateFixed+0x98>
 800b88c:	9700      	str	r7, [sp, #0]
 800b88e:	4623      	mov	r3, r4
 800b890:	4642      	mov	r2, r8
 800b892:	4651      	mov	r1, sl
 800b894:	4648      	mov	r0, r9
 800b896:	f001 f863 	bl	800c960 <GUI_USAGE_BM_Create>
 800b89a:	4683      	mov	fp, r0
 800b89c:	fb05 f004 	mul.w	r0, r5, r4
 800b8a0:	3018      	adds	r0, #24
 800b8a2:	f7fa f979 	bl	8005b98 <GUI_ALLOC_AllocZero>
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	d1cf      	bne.n	800b84c <GUI_MEMDEV__CreateFixed+0xac>
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7fa fda5 	bl	80063fc <GUI_DEVICE_Delete>
 800b8b2:	f1bb 0f00 	cmp.w	fp, #0
 800b8b6:	d086      	beq.n	800b7c6 <GUI_MEMDEV__CreateFixed+0x26>
 800b8b8:	4658      	mov	r0, fp
 800b8ba:	f7f9 ffc1 	bl	8005840 <GUI_ALLOC_Free>
 800b8be:	e783      	b.n	800b7c8 <GUI_MEMDEV__CreateFixed+0x28>
 800b8c0:	200000d8 	.word	0x200000d8

0800b8c4 <GUI_MEMDEV_GetBitsPerPixel>:
 800b8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	b170      	cbz	r0, 800b8e8 <GUI_MEMDEV_GetBitsPerPixel+0x24>
 800b8ca:	f7f9 ff7f 	bl	80057cc <GUI_ALLOC_LockH>
 800b8ce:	6803      	ldr	r3, [r0, #0]
 800b8d0:	ad02      	add	r5, sp, #8
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	4798      	blx	r3
 800b8dc:	f7fd facf 	bl	8008e7e <LCD__GetBPPDevice>
 800b8e0:	4604      	mov	r4, r0
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f7f9 ff80 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	b003      	add	sp, #12
 800b8ec:	bd30      	pop	{r4, r5, pc}
	...

0800b8f0 <GUI_MEMDEV_Delete>:
 800b8f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	b1d0      	cbz	r0, 800b92c <GUI_MEMDEV_Delete+0x3c>
 800b8f6:	4b0e      	ldr	r3, [pc, #56]	; (800b930 <GUI_MEMDEV_Delete+0x40>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8fc:	4298      	cmp	r0, r3
 800b8fe:	d101      	bne.n	800b904 <GUI_MEMDEV_Delete+0x14>
 800b900:	f7fa fbf2 	bl	80060e8 <GUI_SelectLCD>
 800b904:	4620      	mov	r0, r4
 800b906:	f7f9 ff61 	bl	80057cc <GUI_ALLOC_LockH>
 800b90a:	9001      	str	r0, [sp, #4]
 800b90c:	6940      	ldr	r0, [r0, #20]
 800b90e:	b108      	cbz	r0, 800b914 <GUI_MEMDEV_Delete+0x24>
 800b910:	f000 ff56 	bl	800c7c0 <GUI_USAGE_DecUseCnt>
 800b914:	ad02      	add	r5, sp, #8
 800b916:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	f7fa fd6e 	bl	80063fc <GUI_DEVICE_Delete>
 800b920:	4628      	mov	r0, r5
 800b922:	f7f9 ff61 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b926:	4620      	mov	r0, r4
 800b928:	f7f9 ff8a 	bl	8005840 <GUI_ALLOC_Free>
 800b92c:	b003      	add	sp, #12
 800b92e:	bd30      	pop	{r4, r5, pc}
 800b930:	200000d8 	.word	0x200000d8

0800b934 <GUI_MEMDEV_CreateEx>:
 800b934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b938:	4699      	mov	r9, r3
 800b93a:	4b19      	ldr	r3, [pc, #100]	; (800b9a0 <GUI_MEMDEV_CreateEx+0x6c>)
 800b93c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4606      	mov	r6, r0
 800b942:	7c58      	ldrb	r0, [r3, #17]
 800b944:	4b17      	ldr	r3, [pc, #92]	; (800b9a4 <GUI_MEMDEV_CreateEx+0x70>)
 800b946:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800b94a:	460f      	mov	r7, r1
 800b94c:	4690      	mov	r8, r2
 800b94e:	68e3      	ldr	r3, [r4, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2b04      	cmp	r3, #4
 800b954:	d006      	beq.n	800b964 <GUI_MEMDEV_CreateEx+0x30>
 800b956:	6824      	ldr	r4, [r4, #0]
 800b958:	2c00      	cmp	r4, #0
 800b95a:	d1f8      	bne.n	800b94e <GUI_MEMDEV_CreateEx+0x1a>
 800b95c:	f7fa fd3e 	bl	80063dc <GUI_DEVICE__GetpDriver>
 800b960:	4604      	mov	r4, r0
 800b962:	b130      	cbz	r0, 800b972 <GUI_MEMDEV_CreateEx+0x3e>
 800b964:	68e3      	ldr	r3, [r4, #12]
 800b966:	2101      	movs	r1, #1
 800b968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96a:	4620      	mov	r0, r4
 800b96c:	4798      	blx	r3
 800b96e:	4682      	mov	sl, r0
 800b970:	b918      	cbnz	r0, 800b97a <GUI_MEMDEV_CreateEx+0x46>
 800b972:	2000      	movs	r0, #0
 800b974:	b004      	add	sp, #16
 800b976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97a:	6924      	ldr	r4, [r4, #16]
 800b97c:	68a3      	ldr	r3, [r4, #8]
 800b97e:	4798      	blx	r3
 800b980:	3001      	adds	r0, #1
 800b982:	bf04      	itt	eq
 800b984:	f045 0501 	orreq.w	r5, r5, #1
 800b988:	4c07      	ldreq	r4, [pc, #28]	; (800b9a8 <GUI_MEMDEV_CreateEx+0x74>)
 800b98a:	9402      	str	r4, [sp, #8]
 800b98c:	e88d 0420 	stmia.w	sp, {r5, sl}
 800b990:	464b      	mov	r3, r9
 800b992:	4642      	mov	r2, r8
 800b994:	4639      	mov	r1, r7
 800b996:	4630      	mov	r0, r6
 800b998:	f7ff ff02 	bl	800b7a0 <GUI_MEMDEV__CreateFixed>
 800b99c:	e7ea      	b.n	800b974 <GUI_MEMDEV_CreateEx+0x40>
 800b99e:	bf00      	nop
 800b9a0:	200000d8 	.word	0x200000d8
 800b9a4:	200089b8 	.word	0x200089b8
 800b9a8:	08010d18 	.word	0x08010d18

0800b9ac <GUI_MEMDEV_Select>:
 800b9ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9ae:	4c11      	ldr	r4, [pc, #68]	; (800b9f4 <GUI_MEMDEV_Select+0x48>)
 800b9b0:	6822      	ldr	r2, [r4, #0]
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	6d97      	ldr	r7, [r2, #88]	; 0x58
 800b9b6:	b920      	cbnz	r0, 800b9c2 <GUI_MEMDEV_Select+0x16>
 800b9b8:	f7fa fb96 	bl	80060e8 <GUI_SelectLCD>
 800b9bc:	4638      	mov	r0, r7
 800b9be:	b003      	add	sp, #12
 800b9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9c2:	b10f      	cbz	r7, 800b9c8 <GUI_MEMDEV_Select+0x1c>
 800b9c4:	f7fa fb90 	bl	80060e8 <GUI_SelectLCD>
 800b9c8:	f7fe fcc8 	bl	800a35c <WM_Deactivate>
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7f9 fefd 	bl	80057cc <GUI_ALLOC_LockH>
 800b9d2:	ad02      	add	r5, sp, #8
 800b9d4:	6823      	ldr	r3, [r4, #0]
 800b9d6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800b9da:	659e      	str	r6, [r3, #88]	; 0x58
 800b9dc:	6800      	ldr	r0, [r0, #0]
 800b9de:	f7fa fd4d 	bl	800647c <GUI_DEVICE_Link>
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f7f9 ff00 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800b9e8:	f7fd fad0 	bl	8008f8c <LCD_UpdateColorIndices>
 800b9ec:	f7fd f812 	bl	8008a14 <LCD_SetClipRectMax>
 800b9f0:	e7e4      	b.n	800b9bc <GUI_MEMDEV_Select+0x10>
 800b9f2:	bf00      	nop
 800b9f4:	200000d8 	.word	0x200000d8

0800b9f8 <GUI_MEMDEV_CopyToLCDAt>:
 800b9f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	4615      	mov	r5, r2
 800ba00:	4606      	mov	r6, r0
 800ba02:	b390      	cbz	r0, 800ba6a <GUI_MEMDEV_CopyToLCDAt+0x72>
 800ba04:	2000      	movs	r0, #0
 800ba06:	f7fa fb7c 	bl	8006102 <GUI_SetDrawMode>
 800ba0a:	4b1d      	ldr	r3, [pc, #116]	; (800ba80 <GUI_MEMDEV_CopyToLCDAt+0x88>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4607      	mov	r7, r0
 800ba10:	4630      	mov	r0, r6
 800ba12:	f8d3 8058 	ldr.w	r8, [r3, #88]	; 0x58
 800ba16:	f7f9 fed9 	bl	80057cc <GUI_ALLOC_LockH>
 800ba1a:	9001      	str	r0, [sp, #4]
 800ba1c:	f7fa fb64 	bl	80060e8 <GUI_SelectLCD>
 800ba20:	9a01      	ldr	r2, [sp, #4]
 800ba22:	4b18      	ldr	r3, [pc, #96]	; (800ba84 <GUI_MEMDEV_CopyToLCDAt+0x8c>)
 800ba24:	429c      	cmp	r4, r3
 800ba26:	8913      	ldrh	r3, [r2, #8]
 800ba28:	bf04      	itt	eq
 800ba2a:	f9b2 4004 	ldrsheq.w	r4, [r2, #4]
 800ba2e:	f9b2 5006 	ldrsheq.w	r5, [r2, #6]
 800ba32:	f8ad 4008 	strh.w	r4, [sp, #8]
 800ba36:	3b01      	subs	r3, #1
 800ba38:	4423      	add	r3, r4
 800ba3a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ba3e:	8953      	ldrh	r3, [r2, #10]
 800ba40:	f8ad 500a 	strh.w	r5, [sp, #10]
 800ba44:	3b01      	subs	r3, #1
 800ba46:	442b      	add	r3, r5
 800ba48:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ba4c:	f7fe fc7e 	bl	800a34c <WM_Activate>
 800ba50:	a801      	add	r0, sp, #4
 800ba52:	f7f9 fec9 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800ba56:	a802      	add	r0, sp, #8
 800ba58:	f7fe fad2 	bl	800a000 <WM__InitIVRSearch>
 800ba5c:	b940      	cbnz	r0, 800ba70 <GUI_MEMDEV_CopyToLCDAt+0x78>
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7ff ffa4 	bl	800b9ac <GUI_MEMDEV_Select>
 800ba64:	4638      	mov	r0, r7
 800ba66:	f7fa fb4c 	bl	8006102 <GUI_SetDrawMode>
 800ba6a:	b004      	add	sp, #16
 800ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba70:	462a      	mov	r2, r5
 800ba72:	4621      	mov	r1, r4
 800ba74:	4630      	mov	r0, r6
 800ba76:	f001 f813 	bl	800caa0 <GUI_MEMDEV__WriteToActiveOpaque>
 800ba7a:	f7fe fa07 	bl	8009e8c <WM__GetNextIVR>
 800ba7e:	e7ed      	b.n	800ba5c <GUI_MEMDEV_CopyToLCDAt+0x64>
 800ba80:	200000d8 	.word	0x200000d8
 800ba84:	fffff001 	.word	0xfffff001

0800ba88 <GUI_MEMDEV_CopyToLCD>:
 800ba88:	4a01      	ldr	r2, [pc, #4]	; (800ba90 <GUI_MEMDEV_CopyToLCD+0x8>)
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	f7ff bfb4 	b.w	800b9f8 <GUI_MEMDEV_CopyToLCDAt>
 800ba90:	fffff001 	.word	0xfffff001

0800ba94 <_GetDevData>:
 800ba94:	2901      	cmp	r1, #1
 800ba96:	4802      	ldr	r0, [pc, #8]	; (800baa0 <_GetDevData+0xc>)
 800ba98:	bf18      	it	ne
 800ba9a:	2000      	movne	r0, #0
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	08010c8c 	.word	0x08010c8c

0800baa4 <_GetDevFunc>:
 800baa4:	2916      	cmp	r1, #22
 800baa6:	4802      	ldr	r0, [pc, #8]	; (800bab0 <_GetDevFunc+0xc>)
 800baa8:	bf18      	it	ne
 800baaa:	2000      	movne	r0, #0
 800baac:	4770      	bx	lr
 800baae:	bf00      	nop
 800bab0:	0800caa1 	.word	0x0800caa1

0800bab4 <_SetOrg>:
 800bab4:	6800      	ldr	r0, [r0, #0]
 800bab6:	68c3      	ldr	r3, [r0, #12]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	4718      	bx	r3

0800babc <_GetDevProp>:
 800babc:	6800      	ldr	r0, [r0, #0]
 800babe:	68c3      	ldr	r3, [r0, #12]
 800bac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac2:	4718      	bx	r3

0800bac4 <_GetRect>:
 800bac4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bac6:	6880      	ldr	r0, [r0, #8]
 800bac8:	460c      	mov	r4, r1
 800baca:	f7f9 fe7f 	bl	80057cc <GUI_ALLOC_LockH>
 800bace:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800bad2:	8905      	ldrh	r5, [r0, #8]
 800bad4:	8022      	strh	r2, [r4, #0]
 800bad6:	442a      	add	r2, r5
 800bad8:	3a01      	subs	r2, #1
 800bada:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800bade:	80a2      	strh	r2, [r4, #4]
 800bae0:	a902      	add	r1, sp, #8
 800bae2:	8942      	ldrh	r2, [r0, #10]
 800bae4:	f841 0d04 	str.w	r0, [r1, #-4]!
 800bae8:	8063      	strh	r3, [r4, #2]
 800baea:	4413      	add	r3, r2
 800baec:	3b01      	subs	r3, #1
 800baee:	80e3      	strh	r3, [r4, #6]
 800baf0:	4608      	mov	r0, r1
 800baf2:	f7f9 fe79 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800baf6:	b003      	add	sp, #12
 800baf8:	bd30      	pop	{r4, r5, pc}
	...

0800bafc <_XY2PTR_BITOFFSET>:
 800bafc:	4b10      	ldr	r3, [pc, #64]	; (800bb40 <_XY2PTR_BITOFFSET+0x44>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb02:	4604      	mov	r4, r0
 800bb04:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bb06:	460d      	mov	r5, r1
 800bb08:	4617      	mov	r7, r2
 800bb0a:	f7f9 fe5f 	bl	80057cc <GUI_ALLOC_LockH>
 800bb0e:	4606      	mov	r6, r0
 800bb10:	9001      	str	r0, [sp, #4]
 800bb12:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800bb16:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 800bb1a:	68f3      	ldr	r3, [r6, #12]
 800bb1c:	1a20      	subs	r0, r4, r0
 800bb1e:	1a6d      	subs	r5, r5, r1
 800bb20:	10c1      	asrs	r1, r0, #3
 800bb22:	fb03 1505 	mla	r5, r3, r5, r1
 800bb26:	b11f      	cbz	r7, 800bb30 <_XY2PTR_BITOFFSET+0x34>
 800bb28:	43c0      	mvns	r0, r0
 800bb2a:	f000 0007 	and.w	r0, r0, #7
 800bb2e:	6038      	str	r0, [r7, #0]
 800bb30:	a801      	add	r0, sp, #4
 800bb32:	f7f9 fe59 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bb36:	3518      	adds	r5, #24
 800bb38:	1970      	adds	r0, r6, r5
 800bb3a:	b003      	add	sp, #12
 800bb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	200000d8 	.word	0x200000d8

0800bb44 <_GetPixelIndex>:
 800bb44:	b507      	push	{r0, r1, r2, lr}
 800bb46:	4608      	mov	r0, r1
 800bb48:	4611      	mov	r1, r2
 800bb4a:	aa01      	add	r2, sp, #4
 800bb4c:	f7ff ffd6 	bl	800bafc <_XY2PTR_BITOFFSET>
 800bb50:	9b01      	ldr	r3, [sp, #4]
 800bb52:	7800      	ldrb	r0, [r0, #0]
 800bb54:	4118      	asrs	r0, r3
 800bb56:	f000 0001 	and.w	r0, r0, #1
 800bb5a:	b003      	add	sp, #12
 800bb5c:	f85d fb04 	ldr.w	pc, [sp], #4

0800bb60 <_XorPixel>:
 800bb60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bb62:	4b14      	ldr	r3, [pc, #80]	; (800bbb4 <_XorPixel+0x54>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bb68:	460d      	mov	r5, r1
 800bb6a:	4616      	mov	r6, r2
 800bb6c:	f7f9 fe2e 	bl	80057cc <GUI_ALLOC_LockH>
 800bb70:	aa03      	add	r2, sp, #12
 800bb72:	9001      	str	r0, [sp, #4]
 800bb74:	4631      	mov	r1, r6
 800bb76:	4628      	mov	r0, r5
 800bb78:	f7ff ffc0 	bl	800bafc <_XY2PTR_BITOFFSET>
 800bb7c:	9a03      	ldr	r2, [sp, #12]
 800bb7e:	2301      	movs	r3, #1
 800bb80:	4093      	lsls	r3, r2
 800bb82:	7802      	ldrb	r2, [r0, #0]
 800bb84:	4053      	eors	r3, r2
 800bb86:	7003      	strb	r3, [r0, #0]
 800bb88:	9b01      	ldr	r3, [sp, #4]
 800bb8a:	6958      	ldr	r0, [r3, #20]
 800bb8c:	b160      	cbz	r0, 800bba8 <_XorPixel+0x48>
 800bb8e:	f7f9 fe1d 	bl	80057cc <GUI_ALLOC_LockH>
 800bb92:	ac04      	add	r4, sp, #16
 800bb94:	6883      	ldr	r3, [r0, #8]
 800bb96:	f844 0d08 	str.w	r0, [r4, #-8]!
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4798      	blx	r3
 800bba2:	4620      	mov	r0, r4
 800bba4:	f7f9 fe20 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bba8:	a801      	add	r0, sp, #4
 800bbaa:	f7f9 fe1d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bbae:	b004      	add	sp, #16
 800bbb0:	bd70      	pop	{r4, r5, r6, pc}
 800bbb2:	bf00      	nop
 800bbb4:	200000d8 	.word	0x200000d8

0800bbb8 <_SetPixelIndex>:
 800bbb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800bbba:	461c      	mov	r4, r3
 800bbbc:	4b17      	ldr	r3, [pc, #92]	; (800bc1c <_SetPixelIndex+0x64>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	4616      	mov	r6, r2
 800bbc6:	f7f9 fe01 	bl	80057cc <GUI_ALLOC_LockH>
 800bbca:	aa03      	add	r2, sp, #12
 800bbcc:	9001      	str	r0, [sp, #4]
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	f7ff ff93 	bl	800bafc <_XY2PTR_BITOFFSET>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	7802      	ldrb	r2, [r0, #0]
 800bbe0:	ea22 0203 	bic.w	r2, r2, r3
 800bbe4:	7002      	strb	r2, [r0, #0]
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	f004 0401 	and.w	r4, r4, #1
 800bbec:	409c      	lsls	r4, r3
 800bbee:	4322      	orrs	r2, r4
 800bbf0:	7002      	strb	r2, [r0, #0]
 800bbf2:	9b01      	ldr	r3, [sp, #4]
 800bbf4:	6958      	ldr	r0, [r3, #20]
 800bbf6:	b160      	cbz	r0, 800bc12 <_SetPixelIndex+0x5a>
 800bbf8:	f7f9 fde8 	bl	80057cc <GUI_ALLOC_LockH>
 800bbfc:	ac04      	add	r4, sp, #16
 800bbfe:	6883      	ldr	r3, [r0, #8]
 800bc00:	f844 0d08 	str.w	r0, [r4, #-8]!
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	4632      	mov	r2, r6
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4798      	blx	r3
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7f9 fdeb 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bc12:	a801      	add	r0, sp, #4
 800bc14:	f7f9 fde8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bc18:	b004      	add	sp, #16
 800bc1a:	bd70      	pop	{r4, r5, r6, pc}
 800bc1c:	200000d8 	.word	0x200000d8

0800bc20 <_DrawVLine>:
 800bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	4d2b      	ldr	r5, [pc, #172]	; (800bcd4 <_DrawVLine+0xb4>)
 800bc26:	461f      	mov	r7, r3
 800bc28:	682b      	ldr	r3, [r5, #0]
 800bc2a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bc2c:	460e      	mov	r6, r1
 800bc2e:	4614      	mov	r4, r2
 800bc30:	f7f9 fdcc 	bl	80057cc <GUI_ALLOC_LockH>
 800bc34:	9001      	str	r0, [sp, #4]
 800bc36:	6940      	ldr	r0, [r0, #20]
 800bc38:	46aa      	mov	sl, r5
 800bc3a:	b108      	cbz	r0, 800bc40 <_DrawVLine+0x20>
 800bc3c:	f7f9 fdc6 	bl	80057cc <GUI_ALLOC_LockH>
 800bc40:	9002      	str	r0, [sp, #8]
 800bc42:	aa03      	add	r2, sp, #12
 800bc44:	4621      	mov	r1, r4
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7ff ff58 	bl	800bafc <_XY2PTR_BITOFFSET>
 800bc4c:	f8da 3000 	ldr.w	r3, [sl]
 800bc50:	9a03      	ldr	r2, [sp, #12]
 800bc52:	7c19      	ldrb	r1, [r3, #16]
 800bc54:	f04f 0801 	mov.w	r8, #1
 800bc58:	07c9      	lsls	r1, r1, #31
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	fa08 f802 	lsl.w	r8, r8, r2
 800bc60:	d518      	bpl.n	800bc94 <_DrawVLine+0x74>
 800bc62:	782b      	ldrb	r3, [r5, #0]
 800bc64:	ea83 0308 	eor.w	r3, r3, r8
 800bc68:	702b      	strb	r3, [r5, #0]
 800bc6a:	9802      	ldr	r0, [sp, #8]
 800bc6c:	b120      	cbz	r0, 800bc78 <_DrawVLine+0x58>
 800bc6e:	6883      	ldr	r3, [r0, #8]
 800bc70:	4622      	mov	r2, r4
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4631      	mov	r1, r6
 800bc76:	4798      	blx	r3
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	3401      	adds	r4, #1
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	42bc      	cmp	r4, r7
 800bc80:	441d      	add	r5, r3
 800bc82:	ddee      	ble.n	800bc62 <_DrawVLine+0x42>
 800bc84:	a801      	add	r0, sp, #4
 800bc86:	f7f9 fdaf 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bc8a:	9b02      	ldr	r3, [sp, #8]
 800bc8c:	b9f3      	cbnz	r3, 800bccc <_DrawVLine+0xac>
 800bc8e:	b004      	add	sp, #16
 800bc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f003 0901 	and.w	r9, r3, #1
 800bc9c:	fa09 f902 	lsl.w	r9, r9, r2
 800bca0:	ea6f 0808 	mvn.w	r8, r8
 800bca4:	782b      	ldrb	r3, [r5, #0]
 800bca6:	ea03 0308 	and.w	r3, r3, r8
 800bcaa:	ea43 0309 	orr.w	r3, r3, r9
 800bcae:	702b      	strb	r3, [r5, #0]
 800bcb0:	9802      	ldr	r0, [sp, #8]
 800bcb2:	b120      	cbz	r0, 800bcbe <_DrawVLine+0x9e>
 800bcb4:	6883      	ldr	r3, [r0, #8]
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4798      	blx	r3
 800bcbe:	9b01      	ldr	r3, [sp, #4]
 800bcc0:	3401      	adds	r4, #1
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	42a7      	cmp	r7, r4
 800bcc6:	441d      	add	r5, r3
 800bcc8:	daec      	bge.n	800bca4 <_DrawVLine+0x84>
 800bcca:	e7db      	b.n	800bc84 <_DrawVLine+0x64>
 800bccc:	a802      	add	r0, sp, #8
 800bcce:	f7f9 fd8b 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bcd2:	e7dc      	b.n	800bc8e <_DrawVLine+0x6e>
 800bcd4:	200000d8 	.word	0x200000d8

0800bcd8 <_FillRect>:
 800bcd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	4c53      	ldr	r4, [pc, #332]	; (800be2c <_FillRect+0x154>)
 800bcde:	461e      	mov	r6, r3
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	b089      	sub	sp, #36	; 0x24
 800bce4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bce6:	468a      	mov	sl, r1
 800bce8:	4617      	mov	r7, r2
 800bcea:	f7f9 fd6f 	bl	80057cc <GUI_ALLOC_LockH>
 800bcee:	9005      	str	r0, [sp, #20]
 800bcf0:	6940      	ldr	r0, [r0, #20]
 800bcf2:	9403      	str	r4, [sp, #12]
 800bcf4:	eba6 060a 	sub.w	r6, r6, sl
 800bcf8:	3601      	adds	r6, #1
 800bcfa:	b180      	cbz	r0, 800bd1e <_FillRect+0x46>
 800bcfc:	f7f9 fd66 	bl	80057cc <GUI_ALLOC_LockH>
 800bd00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd02:	ac08      	add	r4, sp, #32
 800bd04:	1bdb      	subs	r3, r3, r7
 800bd06:	f844 0d08 	str.w	r0, [r4, #-8]!
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	463a      	mov	r2, r7
 800bd10:	4633      	mov	r3, r6
 800bd12:	4651      	mov	r1, sl
 800bd14:	f000 fd68 	bl	800c7e8 <GUI_USAGE_AddRect>
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f7f9 fd65 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bd1e:	f04f 0901 	mov.w	r9, #1
 800bd22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bd24:	429f      	cmp	r7, r3
 800bd26:	dd05      	ble.n	800bd34 <_FillRect+0x5c>
 800bd28:	a805      	add	r0, sp, #20
 800bd2a:	f7f9 fd5d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bd2e:	b009      	add	sp, #36	; 0x24
 800bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd34:	aa07      	add	r2, sp, #28
 800bd36:	4639      	mov	r1, r7
 800bd38:	4650      	mov	r0, sl
 800bd3a:	f7ff fedf 	bl	800bafc <_XY2PTR_BITOFFSET>
 800bd3e:	9b03      	ldr	r3, [sp, #12]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	7c13      	ldrb	r3, [r2, #16]
 800bd44:	f013 0f01 	tst.w	r3, #1
 800bd48:	4604      	mov	r4, r0
 800bd4a:	9b07      	ldr	r3, [sp, #28]
 800bd4c:	d02d      	beq.n	800bdaa <_FillRect+0xd2>
 800bd4e:	2b06      	cmp	r3, #6
 800bd50:	4633      	mov	r3, r6
 800bd52:	dc04      	bgt.n	800bd5e <_FillRect+0x86>
 800bd54:	9a07      	ldr	r2, [sp, #28]
 800bd56:	2a00      	cmp	r2, #0
 800bd58:	db00      	blt.n	800bd5c <_FillRect+0x84>
 800bd5a:	b923      	cbnz	r3, 800bd66 <_FillRect+0x8e>
 800bd5c:	3401      	adds	r4, #1
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc0a      	bgt.n	800bd78 <_FillRect+0xa0>
 800bd62:	3701      	adds	r7, #1
 800bd64:	e7dd      	b.n	800bd22 <_FillRect+0x4a>
 800bd66:	1e51      	subs	r1, r2, #1
 800bd68:	9107      	str	r1, [sp, #28]
 800bd6a:	7821      	ldrb	r1, [r4, #0]
 800bd6c:	fa09 f202 	lsl.w	r2, r9, r2
 800bd70:	404a      	eors	r2, r1
 800bd72:	3b01      	subs	r3, #1
 800bd74:	7022      	strb	r2, [r4, #0]
 800bd76:	e7ed      	b.n	800bd54 <_FillRect+0x7c>
 800bd78:	10da      	asrs	r2, r3, #3
 800bd7a:	d008      	beq.n	800bd8e <_FillRect+0xb6>
 800bd7c:	f003 0307 	and.w	r3, r3, #7
 800bd80:	4422      	add	r2, r4
 800bd82:	7821      	ldrb	r1, [r4, #0]
 800bd84:	43c9      	mvns	r1, r1
 800bd86:	f804 1b01 	strb.w	r1, [r4], #1
 800bd8a:	4294      	cmp	r4, r2
 800bd8c:	d1f9      	bne.n	800bd82 <_FillRect+0xaa>
 800bd8e:	2207      	movs	r2, #7
 800bd90:	9207      	str	r2, [sp, #28]
 800bd92:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800bd96:	d3e4      	bcc.n	800bd62 <_FillRect+0x8a>
 800bd98:	9a07      	ldr	r2, [sp, #28]
 800bd9a:	1e51      	subs	r1, r2, #1
 800bd9c:	9107      	str	r1, [sp, #28]
 800bd9e:	7821      	ldrb	r1, [r4, #0]
 800bda0:	fa09 f202 	lsl.w	r2, r9, r2
 800bda4:	404a      	eors	r2, r1
 800bda6:	7022      	strb	r2, [r4, #0]
 800bda8:	e7f3      	b.n	800bd92 <_FillRect+0xba>
 800bdaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800bdac:	6812      	ldr	r2, [r2, #0]
 800bdae:	2b06      	cmp	r3, #6
 800bdb0:	f002 0801 	and.w	r8, r2, #1
 800bdb4:	4635      	mov	r5, r6
 800bdb6:	dc04      	bgt.n	800bdc2 <_FillRect+0xea>
 800bdb8:	9b07      	ldr	r3, [sp, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	db00      	blt.n	800bdc0 <_FillRect+0xe8>
 800bdbe:	bb2d      	cbnz	r5, 800be0c <_FillRect+0x134>
 800bdc0:	3401      	adds	r4, #1
 800bdc2:	2d00      	cmp	r5, #0
 800bdc4:	ddcd      	ble.n	800bd62 <_FillRect+0x8a>
 800bdc6:	ea5f 0be5 	movs.w	fp, r5, asr #3
 800bdca:	d00a      	beq.n	800bde2 <_FillRect+0x10a>
 800bdcc:	4b18      	ldr	r3, [pc, #96]	; (800be30 <_FillRect+0x158>)
 800bdce:	f1c8 0100 	rsb	r1, r8, #0
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	465a      	mov	r2, fp
 800bdd6:	b2c9      	uxtb	r1, r1
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4798      	blx	r3
 800bddc:	445c      	add	r4, fp
 800bdde:	f005 0507 	and.w	r5, r5, #7
 800bde2:	2307      	movs	r3, #7
 800bde4:	9307      	str	r3, [sp, #28]
 800bde6:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
 800bdea:	d3ba      	bcc.n	800bd62 <_FillRect+0x8a>
 800bdec:	9b07      	ldr	r3, [sp, #28]
 800bdee:	fa09 f203 	lsl.w	r2, r9, r3
 800bdf2:	7823      	ldrb	r3, [r4, #0]
 800bdf4:	ea23 0302 	bic.w	r3, r3, r2
 800bdf8:	7023      	strb	r3, [r4, #0]
 800bdfa:	9b07      	ldr	r3, [sp, #28]
 800bdfc:	1e5a      	subs	r2, r3, #1
 800bdfe:	9207      	str	r2, [sp, #28]
 800be00:	7822      	ldrb	r2, [r4, #0]
 800be02:	fa08 f303 	lsl.w	r3, r8, r3
 800be06:	4313      	orrs	r3, r2
 800be08:	7023      	strb	r3, [r4, #0]
 800be0a:	e7ec      	b.n	800bde6 <_FillRect+0x10e>
 800be0c:	7822      	ldrb	r2, [r4, #0]
 800be0e:	fa09 f303 	lsl.w	r3, r9, r3
 800be12:	ea22 0303 	bic.w	r3, r2, r3
 800be16:	7023      	strb	r3, [r4, #0]
 800be18:	9b07      	ldr	r3, [sp, #28]
 800be1a:	1e5a      	subs	r2, r3, #1
 800be1c:	9207      	str	r2, [sp, #28]
 800be1e:	7822      	ldrb	r2, [r4, #0]
 800be20:	fa08 f303 	lsl.w	r3, r8, r3
 800be24:	4313      	orrs	r3, r2
 800be26:	3d01      	subs	r5, #1
 800be28:	7023      	strb	r3, [r4, #0]
 800be2a:	e7c5      	b.n	800bdb8 <_FillRect+0xe0>
 800be2c:	200000d8 	.word	0x200000d8
 800be30:	200000d4 	.word	0x200000d4

0800be34 <_DrawHLine>:
 800be34:	b507      	push	{r0, r1, r2, lr}
 800be36:	9200      	str	r2, [sp, #0]
 800be38:	f7ff ff4e 	bl	800bcd8 <_FillRect>
 800be3c:	b003      	add	sp, #12
 800be3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800be44 <_DrawBitmap>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	4ca3      	ldr	r4, [pc, #652]	; (800c0d8 <_DrawBitmap+0x294>)
 800be4a:	b093      	sub	sp, #76	; 0x4c
 800be4c:	4689      	mov	r9, r1
 800be4e:	9303      	str	r3, [sp, #12]
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	9002      	str	r0, [sp, #8]
 800be54:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800be56:	9206      	str	r2, [sp, #24]
 800be58:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800be5a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
 800be5e:	f7f9 fcb5 	bl	80057cc <GUI_ALLOC_LockH>
 800be62:	900e      	str	r0, [sp, #56]	; 0x38
 800be64:	6940      	ldr	r0, [r0, #20]
 800be66:	b108      	cbz	r0, 800be6c <_DrawBitmap+0x28>
 800be68:	f7f9 fcb0 	bl	80057cc <GUI_ALLOC_LockH>
 800be6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800be6e:	900f      	str	r0, [sp, #60]	; 0x3c
 800be70:	4499      	add	r9, r3
 800be72:	b150      	cbz	r0, 800be8a <_DrawBitmap+0x46>
 800be74:	6823      	ldr	r3, [r4, #0]
 800be76:	7c1b      	ldrb	r3, [r3, #16]
 800be78:	079b      	lsls	r3, r3, #30
 800be7a:	d106      	bne.n	800be8a <_DrawBitmap+0x46>
 800be7c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	9a06      	ldr	r2, [sp, #24]
 800be82:	9b03      	ldr	r3, [sp, #12]
 800be84:	4649      	mov	r1, r9
 800be86:	f000 fcaf 	bl	800c7e8 <GUI_USAGE_AddRect>
 800be8a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800be8c:	2b08      	cmp	r3, #8
 800be8e:	d175      	bne.n	800bf7c <_DrawBitmap+0x138>
 800be90:	eba9 0507 	sub.w	r5, r9, r7
 800be94:	9c06      	ldr	r4, [sp, #24]
 800be96:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800c0d8 <_DrawBitmap+0x294>
 800be9a:	9b06      	ldr	r3, [sp, #24]
 800be9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800be9e:	1ae3      	subs	r3, r4, r3
 800bea0:	429a      	cmp	r2, r3
 800bea2:	dc0a      	bgt.n	800beba <_DrawBitmap+0x76>
 800bea4:	a80e      	add	r0, sp, #56	; 0x38
 800bea6:	f7f9 fc9f 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800beaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800beac:	b113      	cbz	r3, 800beb4 <_DrawBitmap+0x70>
 800beae:	a80f      	add	r0, sp, #60	; 0x3c
 800beb0:	f7f9 fc9a 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800beb4:	b013      	add	sp, #76	; 0x4c
 800beb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beba:	f8d9 3000 	ldr.w	r3, [r9]
 800bebe:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800bec2:	7c1b      	ldrb	r3, [r3, #16]
 800bec4:	f1bb 0f00 	cmp.w	fp, #0
 800bec8:	d030      	beq.n	800bf2c <_DrawBitmap+0xe8>
 800beca:	f013 0303 	ands.w	r3, r3, #3
 800bece:	d006      	beq.n	800bede <_DrawBitmap+0x9a>
 800bed0:	2b02      	cmp	r3, #2
 800bed2:	d017      	beq.n	800bf04 <_DrawBitmap+0xc0>
 800bed4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bed6:	3401      	adds	r4, #1
 800bed8:	441f      	add	r7, r3
 800beda:	1aed      	subs	r5, r5, r3
 800bedc:	e7dd      	b.n	800be9a <_DrawBitmap+0x56>
 800bede:	463e      	mov	r6, r7
 800bee0:	f8d8 2000 	ldr.w	r2, [r8]
 800bee4:	7833      	ldrb	r3, [r6, #0]
 800bee6:	68d2      	ldr	r2, [r2, #12]
 800bee8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800beec:	f8d2 a018 	ldr.w	sl, [r2, #24]
 800bef0:	9802      	ldr	r0, [sp, #8]
 800bef2:	1971      	adds	r1, r6, r5
 800bef4:	4622      	mov	r2, r4
 800bef6:	47d0      	blx	sl
 800bef8:	9b03      	ldr	r3, [sp, #12]
 800befa:	3601      	adds	r6, #1
 800befc:	1b9b      	subs	r3, r3, r6
 800befe:	42df      	cmn	r7, r3
 800bf00:	d1ee      	bne.n	800bee0 <_DrawBitmap+0x9c>
 800bf02:	e7e7      	b.n	800bed4 <_DrawBitmap+0x90>
 800bf04:	463e      	mov	r6, r7
 800bf06:	1971      	adds	r1, r6, r5
 800bf08:	f816 3b01 	ldrb.w	r3, [r6], #1
 800bf0c:	b14b      	cbz	r3, 800bf22 <_DrawBitmap+0xde>
 800bf0e:	f8d8 2000 	ldr.w	r2, [r8]
 800bf12:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800bf16:	68d2      	ldr	r2, [r2, #12]
 800bf18:	9802      	ldr	r0, [sp, #8]
 800bf1a:	f8d2 a018 	ldr.w	sl, [r2, #24]
 800bf1e:	4622      	mov	r2, r4
 800bf20:	47d0      	blx	sl
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	1b9b      	subs	r3, r3, r6
 800bf26:	42df      	cmn	r7, r3
 800bf28:	d1ed      	bne.n	800bf06 <_DrawBitmap+0xc2>
 800bf2a:	e7d3      	b.n	800bed4 <_DrawBitmap+0x90>
 800bf2c:	f013 0303 	ands.w	r3, r3, #3
 800bf30:	d013      	beq.n	800bf5a <_DrawBitmap+0x116>
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d1ce      	bne.n	800bed4 <_DrawBitmap+0x90>
 800bf36:	463e      	mov	r6, r7
 800bf38:	1971      	adds	r1, r6, r5
 800bf3a:	f816 3b01 	ldrb.w	r3, [r6], #1
 800bf3e:	b13b      	cbz	r3, 800bf50 <_DrawBitmap+0x10c>
 800bf40:	f8d8 2000 	ldr.w	r2, [r8]
 800bf44:	9802      	ldr	r0, [sp, #8]
 800bf46:	68d2      	ldr	r2, [r2, #12]
 800bf48:	f8d2 a018 	ldr.w	sl, [r2, #24]
 800bf4c:	4622      	mov	r2, r4
 800bf4e:	47d0      	blx	sl
 800bf50:	9b03      	ldr	r3, [sp, #12]
 800bf52:	1b9b      	subs	r3, r3, r6
 800bf54:	42df      	cmn	r7, r3
 800bf56:	d1ef      	bne.n	800bf38 <_DrawBitmap+0xf4>
 800bf58:	e7bc      	b.n	800bed4 <_DrawBitmap+0x90>
 800bf5a:	463e      	mov	r6, r7
 800bf5c:	f8d8 3000 	ldr.w	r3, [r8]
 800bf60:	9802      	ldr	r0, [sp, #8]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	1971      	adds	r1, r6, r5
 800bf66:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800bf6a:	7833      	ldrb	r3, [r6, #0]
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	47d0      	blx	sl
 800bf70:	9b03      	ldr	r3, [sp, #12]
 800bf72:	3601      	adds	r6, #1
 800bf74:	1b9b      	subs	r3, r3, r6
 800bf76:	42df      	cmn	r7, r3
 800bf78:	d1f0      	bne.n	800bf5c <_DrawBitmap+0x118>
 800bf7a:	e7ab      	b.n	800bed4 <_DrawBitmap+0x90>
 800bf7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	f040 80dd 	bne.w	800c13e <_DrawBitmap+0x2fa>
 800bf84:	4b55      	ldr	r3, [pc, #340]	; (800c0dc <_DrawBitmap+0x298>)
 800bf86:	9a03      	ldr	r2, [sp, #12]
 800bf88:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800bf8c:	f1bb 0f00 	cmp.w	fp, #0
 800bf90:	bf08      	it	eq
 800bf92:	469b      	moveq	fp, r3
 800bf94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf96:	f003 0307 	and.w	r3, r3, #7
 800bf9a:	441a      	add	r2, r3
 800bf9c:	eba9 030a 	sub.w	r3, r9, sl
 800bfa0:	9208      	str	r2, [sp, #32]
 800bfa2:	930a      	str	r3, [sp, #40]	; 0x28
 800bfa4:	9b08      	ldr	r3, [sp, #32]
 800bfa6:	459a      	cmp	sl, r3
 800bfa8:	f6bf af7c 	bge.w	800bea4 <_DrawBitmap+0x60>
 800bfac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfae:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800bfb0:	4453      	add	r3, sl
 800bfb2:	2280      	movs	r2, #128	; 0x80
 800bfb4:	9307      	str	r3, [sp, #28]
 800bfb6:	f00a 0307 	and.w	r3, sl, #7
 800bfba:	fa42 f303 	asr.w	r3, r2, r3
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	9302      	str	r3, [sp, #8]
 800bfc2:	4b45      	ldr	r3, [pc, #276]	; (800c0d8 <_DrawBitmap+0x294>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800bfc8:	f7f9 fc00 	bl	80057cc <GUI_ALLOC_LockH>
 800bfcc:	ab12      	add	r3, sp, #72	; 0x48
 800bfce:	68c2      	ldr	r2, [r0, #12]
 800bfd0:	f843 0d04 	str.w	r0, [r3, #-4]!
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	9203      	str	r2, [sp, #12]
 800bfd8:	f7f9 fc06 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800bfdc:	f8db 3000 	ldr.w	r3, [fp]
 800bfe0:	9305      	str	r3, [sp, #20]
 800bfe2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bfe6:	9906      	ldr	r1, [sp, #24]
 800bfe8:	9807      	ldr	r0, [sp, #28]
 800bfea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bfee:	aa10      	add	r2, sp, #64	; 0x40
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	f7ff fd83 	bl	800bafc <_XY2PTR_BITOFFSET>
 800bff6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bff8:	f04f 0801 	mov.w	r8, #1
 800bffc:	fa08 f803 	lsl.w	r8, r8, r3
 800c000:	4b35      	ldr	r3, [pc, #212]	; (800c0d8 <_DrawBitmap+0x294>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	7c1b      	ldrb	r3, [r3, #16]
 800c006:	fa5f f888 	uxtb.w	r8, r8
 800c00a:	f003 0303 	and.w	r3, r3, #3
 800c00e:	ea6f 0908 	mvn.w	r9, r8
 800c012:	2b02      	cmp	r3, #2
 800c014:	eb07 06ea 	add.w	r6, r7, sl, asr #3
 800c018:	4605      	mov	r5, r0
 800c01a:	fa5f f989 	uxtb.w	r9, r9
 800c01e:	d020      	beq.n	800c062 <_DrawBitmap+0x21e>
 800c020:	2b03      	cmp	r3, #3
 800c022:	d05d      	beq.n	800c0e0 <_DrawBitmap+0x29c>
 800c024:	2b01      	cmp	r3, #1
 800c026:	d05b      	beq.n	800c0e0 <_DrawBitmap+0x29c>
 800c028:	9b05      	ldr	r3, [sp, #20]
 800c02a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c02c:	2200      	movs	r2, #0
 800c02e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 800c032:	7833      	ldrb	r3, [r6, #0]
 800c034:	9c02      	ldr	r4, [sp, #8]
 800c036:	421c      	tst	r4, r3
 800c038:	5cab      	ldrb	r3, [r5, r2]
 800c03a:	d00d      	beq.n	800c058 <_DrawBitmap+0x214>
 800c03c:	9c04      	ldr	r4, [sp, #16]
 800c03e:	b16c      	cbz	r4, 800c05c <_DrawBitmap+0x218>
 800c040:	ea48 0303 	orr.w	r3, r8, r3
 800c044:	54ab      	strb	r3, [r5, r2]
 800c046:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c048:	441e      	add	r6, r3
 800c04a:	9b03      	ldr	r3, [sp, #12]
 800c04c:	3901      	subs	r1, #1
 800c04e:	441a      	add	r2, r3
 800c050:	d1ef      	bne.n	800c032 <_DrawBitmap+0x1ee>
 800c052:	f10a 0a01 	add.w	sl, sl, #1
 800c056:	e7a5      	b.n	800bfa4 <_DrawBitmap+0x160>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d1f1      	bne.n	800c040 <_DrawBitmap+0x1fc>
 800c05c:	ea09 0303 	and.w	r3, r9, r3
 800c060:	e7f0      	b.n	800c044 <_DrawBitmap+0x200>
 800c062:	b31c      	cbz	r4, 800c0ac <_DrawBitmap+0x268>
 800c064:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c066:	9305      	str	r3, [sp, #20]
 800c068:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c06a:	9b06      	ldr	r3, [sp, #24]
 800c06c:	4413      	add	r3, r2
 800c06e:	9309      	str	r3, [sp, #36]	; 0x24
 800c070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c072:	9a05      	ldr	r2, [sp, #20]
 800c074:	9902      	ldr	r1, [sp, #8]
 800c076:	1a9a      	subs	r2, r3, r2
 800c078:	7833      	ldrb	r3, [r6, #0]
 800c07a:	4219      	tst	r1, r3
 800c07c:	d00a      	beq.n	800c094 <_DrawBitmap+0x250>
 800c07e:	9904      	ldr	r1, [sp, #16]
 800c080:	782b      	ldrb	r3, [r5, #0]
 800c082:	b181      	cbz	r1, 800c0a6 <_DrawBitmap+0x262>
 800c084:	ea48 0303 	orr.w	r3, r8, r3
 800c088:	702b      	strb	r3, [r5, #0]
 800c08a:	68a3      	ldr	r3, [r4, #8]
 800c08c:	9907      	ldr	r1, [sp, #28]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4620      	mov	r0, r4
 800c092:	4798      	blx	r3
 800c094:	9b03      	ldr	r3, [sp, #12]
 800c096:	441d      	add	r5, r3
 800c098:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c09a:	441e      	add	r6, r3
 800c09c:	9b05      	ldr	r3, [sp, #20]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	9305      	str	r3, [sp, #20]
 800c0a2:	d1e5      	bne.n	800c070 <_DrawBitmap+0x22c>
 800c0a4:	e7d5      	b.n	800c052 <_DrawBitmap+0x20e>
 800c0a6:	ea09 0303 	and.w	r3, r9, r3
 800c0aa:	e7ed      	b.n	800c088 <_DrawBitmap+0x244>
 800c0ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c0ae:	7833      	ldrb	r3, [r6, #0]
 800c0b0:	9902      	ldr	r1, [sp, #8]
 800c0b2:	4219      	tst	r1, r3
 800c0b4:	d005      	beq.n	800c0c2 <_DrawBitmap+0x27e>
 800c0b6:	9904      	ldr	r1, [sp, #16]
 800c0b8:	5d2b      	ldrb	r3, [r5, r4]
 800c0ba:	b149      	cbz	r1, 800c0d0 <_DrawBitmap+0x28c>
 800c0bc:	ea48 0303 	orr.w	r3, r8, r3
 800c0c0:	552b      	strb	r3, [r5, r4]
 800c0c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c0c4:	441e      	add	r6, r3
 800c0c6:	9b03      	ldr	r3, [sp, #12]
 800c0c8:	3a01      	subs	r2, #1
 800c0ca:	441c      	add	r4, r3
 800c0cc:	d1ef      	bne.n	800c0ae <_DrawBitmap+0x26a>
 800c0ce:	e7c0      	b.n	800c052 <_DrawBitmap+0x20e>
 800c0d0:	ea09 0303 	and.w	r3, r9, r3
 800c0d4:	e7f4      	b.n	800c0c0 <_DrawBitmap+0x27c>
 800c0d6:	bf00      	nop
 800c0d8:	200000d8 	.word	0x200000d8
 800c0dc:	08010cc0 	.word	0x08010cc0
 800c0e0:	b1ec      	cbz	r4, 800c11e <_DrawBitmap+0x2da>
 800c0e2:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 800c0e6:	9a06      	ldr	r2, [sp, #24]
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	4413      	add	r3, r2
 800c0ec:	9304      	str	r3, [sp, #16]
 800c0ee:	9b04      	ldr	r3, [sp, #16]
 800c0f0:	9902      	ldr	r1, [sp, #8]
 800c0f2:	eba3 0209 	sub.w	r2, r3, r9
 800c0f6:	7833      	ldrb	r3, [r6, #0]
 800c0f8:	4219      	tst	r1, r3
 800c0fa:	d008      	beq.n	800c10e <_DrawBitmap+0x2ca>
 800c0fc:	782b      	ldrb	r3, [r5, #0]
 800c0fe:	9907      	ldr	r1, [sp, #28]
 800c100:	ea88 0303 	eor.w	r3, r8, r3
 800c104:	702b      	strb	r3, [r5, #0]
 800c106:	68a3      	ldr	r3, [r4, #8]
 800c108:	4620      	mov	r0, r4
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4798      	blx	r3
 800c10e:	9b03      	ldr	r3, [sp, #12]
 800c110:	441d      	add	r5, r3
 800c112:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c114:	f1b9 0901 	subs.w	r9, r9, #1
 800c118:	441e      	add	r6, r3
 800c11a:	d1e8      	bne.n	800c0ee <_DrawBitmap+0x2aa>
 800c11c:	e799      	b.n	800c052 <_DrawBitmap+0x20e>
 800c11e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c120:	7832      	ldrb	r2, [r6, #0]
 800c122:	9902      	ldr	r1, [sp, #8]
 800c124:	4211      	tst	r1, r2
 800c126:	bf1e      	ittt	ne
 800c128:	5d2a      	ldrbne	r2, [r5, r4]
 800c12a:	ea88 0202 	eorne.w	r2, r8, r2
 800c12e:	552a      	strbne	r2, [r5, r4]
 800c130:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c132:	4416      	add	r6, r2
 800c134:	9a03      	ldr	r2, [sp, #12]
 800c136:	3b01      	subs	r3, #1
 800c138:	4414      	add	r4, r2
 800c13a:	d1f1      	bne.n	800c120 <_DrawBitmap+0x2dc>
 800c13c:	e789      	b.n	800c052 <_DrawBitmap+0x20e>
 800c13e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c140:	b113      	cbz	r3, 800c148 <_DrawBitmap+0x304>
 800c142:	a80f      	add	r0, sp, #60	; 0x3c
 800c144:	f7f9 fb50 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c148:	4ba6      	ldr	r3, [pc, #664]	; (800c3e4 <_DrawBitmap+0x5a0>)
 800c14a:	f8dd a018 	ldr.w	sl, [sp, #24]
 800c14e:	f1bb 0f00 	cmp.w	fp, #0
 800c152:	bf08      	it	eq
 800c154:	469b      	moveq	fp, r3
 800c156:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c158:	009b      	lsls	r3, r3, #2
 800c15a:	f003 0304 	and.w	r3, r3, #4
 800c15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c160:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	f003 0306 	and.w	r3, r3, #6
 800c168:	9309      	str	r3, [sp, #36]	; 0x24
 800c16a:	1c7b      	adds	r3, r7, #1
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c170:	f003 0303 	and.w	r3, r3, #3
 800c174:	f1c3 0304 	rsb	r3, r3, #4
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	930d      	str	r3, [sp, #52]	; 0x34
 800c17c:	9b05      	ldr	r3, [sp, #20]
 800c17e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c180:	3b01      	subs	r3, #1
 800c182:	9304      	str	r3, [sp, #16]
 800c184:	9b06      	ldr	r3, [sp, #24]
 800c186:	ebaa 0303 	sub.w	r3, sl, r3
 800c18a:	429a      	cmp	r2, r3
 800c18c:	dc01      	bgt.n	800c192 <_DrawBitmap+0x34e>
 800c18e:	a80e      	add	r0, sp, #56	; 0x38
 800c190:	e68e      	b.n	800beb0 <_DrawBitmap+0x6c>
 800c192:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c194:	2b02      	cmp	r3, #2
 800c196:	d008      	beq.n	800c1aa <_DrawBitmap+0x366>
 800c198:	2b04      	cmp	r3, #4
 800c19a:	d070      	beq.n	800c27e <_DrawBitmap+0x43a>
 800c19c:	9b05      	ldr	r3, [sp, #20]
 800c19e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f10a 0a01 	add.w	sl, sl, #1
 800c1a6:	9305      	str	r3, [sp, #20]
 800c1a8:	e7e8      	b.n	800c17c <_DrawBitmap+0x338>
 800c1aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	9b05      	ldr	r3, [sp, #20]
 800c1b0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c1b2:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b8:	409d      	lsls	r5, r3
 800c1ba:	4b8b      	ldr	r3, [pc, #556]	; (800c3e8 <_DrawBitmap+0x5a4>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	7c1b      	ldrb	r3, [r3, #16]
 800c1c0:	f013 0303 	ands.w	r3, r3, #3
 800c1c4:	b2ed      	uxtb	r5, r5
 800c1c6:	d030      	beq.n	800c22a <_DrawBitmap+0x3e6>
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d1e7      	bne.n	800c19c <_DrawBitmap+0x358>
 800c1cc:	9f03      	ldr	r7, [sp, #12]
 800c1ce:	464e      	mov	r6, r9
 800c1d0:	42bc      	cmp	r4, r7
 800c1d2:	bfc8      	it	gt
 800c1d4:	b2fc      	uxtbgt	r4, r7
 800c1d6:	1b3f      	subs	r7, r7, r4
 800c1d8:	3c01      	subs	r4, #1
 800c1da:	b2e3      	uxtb	r3, r4
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	9a08      	ldr	r2, [sp, #32]
 800c1e0:	1c73      	adds	r3, r6, #1
 800c1e2:	4413      	add	r3, r2
 800c1e4:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e6:	46b0      	mov	r8, r6
 800c1e8:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800c1ec:	d00b      	beq.n	800c206 <_DrawBitmap+0x3c2>
 800c1ee:	9a07      	ldr	r2, [sp, #28]
 800c1f0:	9802      	ldr	r0, [sp, #8]
 800c1f2:	6812      	ldr	r2, [r2, #0]
 800c1f4:	68d2      	ldr	r2, [r2, #12]
 800c1f6:	09ab      	lsrs	r3, r5, #6
 800c1f8:	6992      	ldr	r2, [r2, #24]
 800c1fa:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c1fe:	4614      	mov	r4, r2
 800c200:	4641      	mov	r1, r8
 800c202:	4652      	mov	r2, sl
 800c204:	47a0      	blx	r4
 800c206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c208:	f108 0801 	add.w	r8, r8, #1
 800c20c:	00ad      	lsls	r5, r5, #2
 800c20e:	4598      	cmp	r8, r3
 800c210:	b2ed      	uxtb	r5, r5
 800c212:	d1e9      	bne.n	800c1e8 <_DrawBitmap+0x3a4>
 800c214:	9b08      	ldr	r3, [sp, #32]
 800c216:	3601      	adds	r6, #1
 800c218:	441e      	add	r6, r3
 800c21a:	2f00      	cmp	r7, #0
 800c21c:	d0be      	beq.n	800c19c <_DrawBitmap+0x358>
 800c21e:	9b04      	ldr	r3, [sp, #16]
 800c220:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c224:	9304      	str	r3, [sp, #16]
 800c226:	2404      	movs	r4, #4
 800c228:	e7d2      	b.n	800c1d0 <_DrawBitmap+0x38c>
 800c22a:	9f03      	ldr	r7, [sp, #12]
 800c22c:	464e      	mov	r6, r9
 800c22e:	42bc      	cmp	r4, r7
 800c230:	bfc8      	it	gt
 800c232:	b2fc      	uxtbgt	r4, r7
 800c234:	1b3f      	subs	r7, r7, r4
 800c236:	3c01      	subs	r4, #1
 800c238:	b2e3      	uxtb	r3, r4
 800c23a:	f106 0801 	add.w	r8, r6, #1
 800c23e:	9308      	str	r3, [sp, #32]
 800c240:	4498      	add	r8, r3
 800c242:	4631      	mov	r1, r6
 800c244:	9a07      	ldr	r2, [sp, #28]
 800c246:	9802      	ldr	r0, [sp, #8]
 800c248:	6812      	ldr	r2, [r2, #0]
 800c24a:	68d2      	ldr	r2, [r2, #12]
 800c24c:	1c4b      	adds	r3, r1, #1
 800c24e:	6992      	ldr	r2, [r2, #24]
 800c250:	930a      	str	r3, [sp, #40]	; 0x28
 800c252:	09ab      	lsrs	r3, r5, #6
 800c254:	4614      	mov	r4, r2
 800c256:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c25a:	4652      	mov	r2, sl
 800c25c:	47a0      	blx	r4
 800c25e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c260:	00ad      	lsls	r5, r5, #2
 800c262:	4541      	cmp	r1, r8
 800c264:	b2ed      	uxtb	r5, r5
 800c266:	d1ed      	bne.n	800c244 <_DrawBitmap+0x400>
 800c268:	9b08      	ldr	r3, [sp, #32]
 800c26a:	3601      	adds	r6, #1
 800c26c:	441e      	add	r6, r3
 800c26e:	2f00      	cmp	r7, #0
 800c270:	d094      	beq.n	800c19c <_DrawBitmap+0x358>
 800c272:	9b04      	ldr	r3, [sp, #16]
 800c274:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 800c278:	9304      	str	r3, [sp, #16]
 800c27a:	2404      	movs	r4, #4
 800c27c:	e7d7      	b.n	800c22e <_DrawBitmap+0x3ea>
 800c27e:	9b05      	ldr	r3, [sp, #20]
 800c280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c282:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c286:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c288:	4093      	lsls	r3, r2
 800c28a:	4a57      	ldr	r2, [pc, #348]	; (800c3e8 <_DrawBitmap+0x5a4>)
 800c28c:	6812      	ldr	r2, [r2, #0]
 800c28e:	7c12      	ldrb	r2, [r2, #16]
 800c290:	f012 0203 	ands.w	r2, r2, #3
 800c294:	b2dc      	uxtb	r4, r3
 800c296:	d01a      	beq.n	800c2ce <_DrawBitmap+0x48a>
 800c298:	2a02      	cmp	r2, #2
 800c29a:	f47f af7f 	bne.w	800c19c <_DrawBitmap+0x358>
 800c29e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c2a0:	2a00      	cmp	r2, #0
 800c2a2:	d06d      	beq.n	800c380 <_DrawBitmap+0x53c>
 800c2a4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800c2a8:	d009      	beq.n	800c2be <_DrawBitmap+0x47a>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	9802      	ldr	r0, [sp, #8]
 800c2ae:	68db      	ldr	r3, [r3, #12]
 800c2b0:	0924      	lsrs	r4, r4, #4
 800c2b2:	699e      	ldr	r6, [r3, #24]
 800c2b4:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800c2b8:	4652      	mov	r2, sl
 800c2ba:	4649      	mov	r1, r9
 800c2bc:	47b0      	blx	r6
 800c2be:	9b03      	ldr	r3, [sp, #12]
 800c2c0:	1e5f      	subs	r7, r3, #1
 800c2c2:	9b05      	ldr	r3, [sp, #20]
 800c2c4:	781c      	ldrb	r4, [r3, #0]
 800c2c6:	f109 0601 	add.w	r6, r9, #1
 800c2ca:	9304      	str	r3, [sp, #16]
 800c2cc:	e05a      	b.n	800c384 <_DrawBitmap+0x540>
 800c2ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d051      	beq.n	800c378 <_DrawBitmap+0x534>
 800c2d4:	f109 0301 	add.w	r3, r9, #1
 800c2d8:	9307      	str	r3, [sp, #28]
 800c2da:	682b      	ldr	r3, [r5, #0]
 800c2dc:	9802      	ldr	r0, [sp, #8]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	0924      	lsrs	r4, r4, #4
 800c2e2:	699f      	ldr	r7, [r3, #24]
 800c2e4:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800c2e8:	4652      	mov	r2, sl
 800c2ea:	4649      	mov	r1, r9
 800c2ec:	47b8      	blx	r7
 800c2ee:	9b03      	ldr	r3, [sp, #12]
 800c2f0:	1e5f      	subs	r7, r3, #1
 800c2f2:	9b05      	ldr	r3, [sp, #20]
 800c2f4:	9304      	str	r3, [sp, #16]
 800c2f6:	781c      	ldrb	r4, [r3, #0]
 800c2f8:	2f01      	cmp	r7, #1
 800c2fa:	dd2f      	ble.n	800c35c <_DrawBitmap+0x518>
 800c2fc:	9a07      	ldr	r2, [sp, #28]
 800c2fe:	107b      	asrs	r3, r7, #1
 800c300:	9308      	str	r3, [sp, #32]
 800c302:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c306:	f007 0701 	and.w	r7, r7, #1
 800c30a:	930c      	str	r3, [sp, #48]	; 0x30
 800c30c:	4690      	mov	r8, r2
 800c30e:	682a      	ldr	r2, [r5, #0]
 800c310:	9802      	ldr	r0, [sp, #8]
 800c312:	68d2      	ldr	r2, [r2, #12]
 800c314:	f108 0301 	add.w	r3, r8, #1
 800c318:	6992      	ldr	r2, [r2, #24]
 800c31a:	930a      	str	r3, [sp, #40]	; 0x28
 800c31c:	0923      	lsrs	r3, r4, #4
 800c31e:	4641      	mov	r1, r8
 800c320:	4616      	mov	r6, r2
 800c322:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c326:	4652      	mov	r2, sl
 800c328:	47b0      	blx	r6
 800c32a:	682a      	ldr	r2, [r5, #0]
 800c32c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c32e:	68d2      	ldr	r2, [r2, #12]
 800c330:	9802      	ldr	r0, [sp, #8]
 800c332:	f004 030f 	and.w	r3, r4, #15
 800c336:	6994      	ldr	r4, [r2, #24]
 800c338:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c33c:	4652      	mov	r2, sl
 800c33e:	47a0      	blx	r4
 800c340:	9b04      	ldr	r3, [sp, #16]
 800c342:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800c346:	9304      	str	r3, [sp, #16]
 800c348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c34a:	f108 0802 	add.w	r8, r8, #2
 800c34e:	4598      	cmp	r8, r3
 800c350:	d1dd      	bne.n	800c30e <_DrawBitmap+0x4ca>
 800c352:	9a07      	ldr	r2, [sp, #28]
 800c354:	9b08      	ldr	r3, [sp, #32]
 800c356:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c35a:	9307      	str	r3, [sp, #28]
 800c35c:	2f00      	cmp	r7, #0
 800c35e:	f43f af1d 	beq.w	800c19c <_DrawBitmap+0x358>
 800c362:	682b      	ldr	r3, [r5, #0]
 800c364:	9907      	ldr	r1, [sp, #28]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	0924      	lsrs	r4, r4, #4
 800c36a:	699d      	ldr	r5, [r3, #24]
 800c36c:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800c370:	4652      	mov	r2, sl
 800c372:	9802      	ldr	r0, [sp, #8]
 800c374:	47a8      	blx	r5
 800c376:	e711      	b.n	800c19c <_DrawBitmap+0x358>
 800c378:	9f03      	ldr	r7, [sp, #12]
 800c37a:	f8cd 901c 	str.w	r9, [sp, #28]
 800c37e:	e7bb      	b.n	800c2f8 <_DrawBitmap+0x4b4>
 800c380:	9f03      	ldr	r7, [sp, #12]
 800c382:	464e      	mov	r6, r9
 800c384:	2f01      	cmp	r7, #1
 800c386:	dc0d      	bgt.n	800c3a4 <_DrawBitmap+0x560>
 800c388:	2f00      	cmp	r7, #0
 800c38a:	f43f af07 	beq.w	800c19c <_DrawBitmap+0x358>
 800c38e:	0924      	lsrs	r4, r4, #4
 800c390:	f43f af04 	beq.w	800c19c <_DrawBitmap+0x358>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	4652      	mov	r2, sl
 800c39a:	699d      	ldr	r5, [r3, #24]
 800c39c:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	e7e6      	b.n	800c372 <_DrawBitmap+0x52e>
 800c3a4:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 800c3a8:	d00a      	beq.n	800c3c0 <_DrawBitmap+0x57c>
 800c3aa:	682a      	ldr	r2, [r5, #0]
 800c3ac:	9802      	ldr	r0, [sp, #8]
 800c3ae:	68d2      	ldr	r2, [r2, #12]
 800c3b0:	0923      	lsrs	r3, r4, #4
 800c3b2:	f8d2 8018 	ldr.w	r8, [r2, #24]
 800c3b6:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c3ba:	4652      	mov	r2, sl
 800c3bc:	4631      	mov	r1, r6
 800c3be:	47c0      	blx	r8
 800c3c0:	f014 030f 	ands.w	r3, r4, #15
 800c3c4:	d008      	beq.n	800c3d8 <_DrawBitmap+0x594>
 800c3c6:	682a      	ldr	r2, [r5, #0]
 800c3c8:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800c3cc:	68d2      	ldr	r2, [r2, #12]
 800c3ce:	9802      	ldr	r0, [sp, #8]
 800c3d0:	6994      	ldr	r4, [r2, #24]
 800c3d2:	1c71      	adds	r1, r6, #1
 800c3d4:	4652      	mov	r2, sl
 800c3d6:	47a0      	blx	r4
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	3602      	adds	r6, #2
 800c3dc:	3f02      	subs	r7, #2
 800c3de:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800c3e2:	e772      	b.n	800c2ca <_DrawBitmap+0x486>
 800c3e4:	08010cc0 	.word	0x08010cc0
 800c3e8:	200000d8 	.word	0x200000d8

0800c3ec <GUI_MEMDEV_Draw>:
 800c3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f0:	4698      	mov	r8, r3
 800c3f2:	b087      	sub	sp, #28
 800c3f4:	4b52      	ldr	r3, [pc, #328]	; (800c540 <GUI_MEMDEV_Draw+0x154>)
 800c3f6:	9203      	str	r2, [sp, #12]
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	9102      	str	r1, [sp, #8]
 800c3fc:	7c54      	ldrb	r4, [r2, #17]
 800c3fe:	4a51      	ldr	r2, [pc, #324]	; (800c544 <GUI_MEMDEV_Draw+0x158>)
 800c400:	5712      	ldrsb	r2, [r2, r4]
 800c402:	2a01      	cmp	r2, #1
 800c404:	4606      	mov	r6, r0
 800c406:	469b      	mov	fp, r3
 800c408:	4620      	mov	r0, r4
 800c40a:	dd37      	ble.n	800c47c <GUI_MEMDEV_Draw+0x90>
 800c40c:	f7fc fc84 	bl	8008d18 <LCD_GetXSizeEx>
 800c410:	4681      	mov	r9, r0
 800c412:	4620      	mov	r0, r4
 800c414:	f7fc fc83 	bl	8008d1e <LCD_GetYSizeEx>
 800c418:	4604      	mov	r4, r0
 800c41a:	b3b6      	cbz	r6, 800c48a <GUI_MEMDEV_Draw+0x9e>
 800c41c:	a905      	add	r1, sp, #20
 800c41e:	a804      	add	r0, sp, #16
 800c420:	f7f9 fdac 	bl	8005f7c <GUI_GetOrg>
 800c424:	9a04      	ldr	r2, [sp, #16]
 800c426:	9b05      	ldr	r3, [sp, #20]
 800c428:	f9b6 7000 	ldrsh.w	r7, [r6]
 800c42c:	f9b6 5002 	ldrsh.w	r5, [r6, #2]
 800c430:	4491      	add	r9, r2
 800c432:	441c      	add	r4, r3
 800c434:	f9b6 2004 	ldrsh.w	r2, [r6, #4]
 800c438:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800c43c:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800c440:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800c444:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c448:	3c01      	subs	r4, #1
 800c44a:	4591      	cmp	r9, r2
 800c44c:	bfd4      	ite	le
 800c44e:	ebc7 0909 	rsble	r9, r7, r9
 800c452:	ebc7 0902 	rsbgt	r9, r7, r2
 800c456:	429c      	cmp	r4, r3
 800c458:	bfd4      	ite	le
 800c45a:	ebc5 0404 	rsble	r4, r5, r4
 800c45e:	ebc5 0403 	rsbgt	r4, r5, r3
 800c462:	f109 0901 	add.w	r9, r9, #1
 800c466:	3401      	adds	r4, #1
 800c468:	f1b8 0f00 	cmp.w	r8, #0
 800c46c:	d101      	bne.n	800c472 <GUI_MEMDEV_Draw+0x86>
 800c46e:	f1c4 0800 	rsb	r8, r4, #0
 800c472:	f1b9 0f00 	cmp.w	r9, #0
 800c476:	dc0b      	bgt.n	800c490 <GUI_MEMDEV_Draw+0xa4>
 800c478:	2000      	movs	r0, #0
 800c47a:	e019      	b.n	800c4b0 <GUI_MEMDEV_Draw+0xc4>
 800c47c:	f7fc fc52 	bl	8008d24 <LCD_GetVXSizeEx>
 800c480:	4681      	mov	r9, r0
 800c482:	4620      	mov	r0, r4
 800c484:	f7fc fc51 	bl	8008d2a <LCD_GetVYSizeEx>
 800c488:	e7c6      	b.n	800c418 <GUI_MEMDEV_Draw+0x2c>
 800c48a:	4635      	mov	r5, r6
 800c48c:	4637      	mov	r7, r6
 800c48e:	e7eb      	b.n	800c468 <GUI_MEMDEV_Draw+0x7c>
 800c490:	2c00      	cmp	r4, #0
 800c492:	ddf1      	ble.n	800c478 <GUI_MEMDEV_Draw+0x8c>
 800c494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c496:	9300      	str	r3, [sp, #0]
 800c498:	464a      	mov	r2, r9
 800c49a:	4643      	mov	r3, r8
 800c49c:	4629      	mov	r1, r5
 800c49e:	4638      	mov	r0, r7
 800c4a0:	f7ff fa48 	bl	800b934 <GUI_MEMDEV_CreateEx>
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	b930      	cbnz	r0, 800c4b6 <GUI_MEMDEV_Draw+0xca>
 800c4a8:	9803      	ldr	r0, [sp, #12]
 800c4aa:	9b02      	ldr	r3, [sp, #8]
 800c4ac:	4798      	blx	r3
 800c4ae:	2001      	movs	r0, #1
 800c4b0:	b007      	add	sp, #28
 800c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b6:	f000 f869 	bl	800c58c <GUI_MEMDEV_GetYSize>
 800c4ba:	4284      	cmp	r4, r0
 800c4bc:	4680      	mov	r8, r0
 800c4be:	d006      	beq.n	800c4ce <GUI_MEMDEV_Draw+0xe2>
 800c4c0:	f8db 3000 	ldr.w	r3, [fp]
 800c4c4:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800c4c6:	b110      	cbz	r0, 800c4ce <GUI_MEMDEV_Draw+0xe2>
 800c4c8:	2132      	movs	r1, #50	; 0x32
 800c4ca:	f7fe f849 	bl	800a560 <WM__SendMessageNoPara>
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f7ff fa6c 	bl	800b9ac <GUI_MEMDEV_Select>
 800c4d4:	46a2      	mov	sl, r4
 800c4d6:	f04f 0900 	mov.w	r9, #0
 800c4da:	45d0      	cmp	r8, sl
 800c4dc:	dd03      	ble.n	800c4e6 <GUI_MEMDEV_Draw+0xfa>
 800c4de:	4651      	mov	r1, sl
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f000 f86b 	bl	800c5bc <GUI_MEMDEV_ReduceYSize>
 800c4e6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ea:	d008      	beq.n	800c4fe <GUI_MEMDEV_Draw+0x112>
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	eb05 0209 	add.w	r2, r5, r9
 800c4f2:	4639      	mov	r1, r7
 800c4f4:	f000 f878 	bl	800c5e8 <GUI_MEMDEV_SetOrg>
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f827 	bl	800c54c <GUI_MEMDEV_Clear>
 800c4fe:	9b02      	ldr	r3, [sp, #8]
 800c500:	9803      	ldr	r0, [sp, #12]
 800c502:	4798      	blx	r3
 800c504:	4b10      	ldr	r3, [pc, #64]	; (800c548 <GUI_MEMDEV_Draw+0x15c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	b10b      	cbz	r3, 800c50e <GUI_MEMDEV_Draw+0x122>
 800c50a:	20ff      	movs	r0, #255	; 0xff
 800c50c:	4798      	blx	r3
 800c50e:	4630      	mov	r0, r6
 800c510:	44c1      	add	r9, r8
 800c512:	f7ff fab9 	bl	800ba88 <GUI_MEMDEV_CopyToLCD>
 800c516:	454c      	cmp	r4, r9
 800c518:	ebaa 0a08 	sub.w	sl, sl, r8
 800c51c:	dcdd      	bgt.n	800c4da <GUI_MEMDEV_Draw+0xee>
 800c51e:	4630      	mov	r0, r6
 800c520:	f7ff f9e6 	bl	800b8f0 <GUI_MEMDEV_Delete>
 800c524:	2000      	movs	r0, #0
 800c526:	f7ff fa41 	bl	800b9ac <GUI_MEMDEV_Select>
 800c52a:	4544      	cmp	r4, r8
 800c52c:	d0a4      	beq.n	800c478 <GUI_MEMDEV_Draw+0x8c>
 800c52e:	f8db 3000 	ldr.w	r3, [fp]
 800c532:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800c534:	2800      	cmp	r0, #0
 800c536:	d09f      	beq.n	800c478 <GUI_MEMDEV_Draw+0x8c>
 800c538:	2133      	movs	r1, #51	; 0x33
 800c53a:	f7fe f811 	bl	800a560 <WM__SendMessageNoPara>
 800c53e:	e79b      	b.n	800c478 <GUI_MEMDEV_Draw+0x8c>
 800c540:	200000d8 	.word	0x200000d8
 800c544:	20008968 	.word	0x20008968
 800c548:	2000036c 	.word	0x2000036c

0800c54c <GUI_MEMDEV_Clear>:
 800c54c:	b513      	push	{r0, r1, r4, lr}
 800c54e:	b918      	cbnz	r0, 800c558 <GUI_MEMDEV_Clear+0xc>
 800c550:	4b0d      	ldr	r3, [pc, #52]	; (800c588 <GUI_MEMDEV_Clear+0x3c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c556:	b1a8      	cbz	r0, 800c584 <GUI_MEMDEV_Clear+0x38>
 800c558:	f7f9 f938 	bl	80057cc <GUI_ALLOC_LockH>
 800c55c:	ab02      	add	r3, sp, #8
 800c55e:	6944      	ldr	r4, [r0, #20]
 800c560:	f843 0d08 	str.w	r0, [r3, #-8]!
 800c564:	4618      	mov	r0, r3
 800c566:	f7f9 f93f 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c56a:	b15c      	cbz	r4, 800c584 <GUI_MEMDEV_Clear+0x38>
 800c56c:	4620      	mov	r0, r4
 800c56e:	f7f9 f92d 	bl	80057cc <GUI_ALLOC_LockH>
 800c572:	ac02      	add	r4, sp, #8
 800c574:	6883      	ldr	r3, [r0, #8]
 800c576:	f844 0d04 	str.w	r0, [r4, #-4]!
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	4798      	blx	r3
 800c57e:	4620      	mov	r0, r4
 800c580:	f7f9 f932 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c584:	b002      	add	sp, #8
 800c586:	bd10      	pop	{r4, pc}
 800c588:	200000d8 	.word	0x200000d8

0800c58c <GUI_MEMDEV_GetYSize>:
 800c58c:	b513      	push	{r0, r1, r4, lr}
 800c58e:	b918      	cbnz	r0, 800c598 <GUI_MEMDEV_GetYSize+0xc>
 800c590:	4b09      	ldr	r3, [pc, #36]	; (800c5b8 <GUI_MEMDEV_GetYSize+0x2c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c596:	b160      	cbz	r0, 800c5b2 <GUI_MEMDEV_GetYSize+0x26>
 800c598:	f7f9 f918 	bl	80057cc <GUI_ALLOC_LockH>
 800c59c:	ab02      	add	r3, sp, #8
 800c59e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 800c5a2:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7f9 f91e 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	b002      	add	sp, #8
 800c5b0:	bd10      	pop	{r4, pc}
 800c5b2:	4604      	mov	r4, r0
 800c5b4:	e7fa      	b.n	800c5ac <GUI_MEMDEV_GetYSize+0x20>
 800c5b6:	bf00      	nop
 800c5b8:	200000d8 	.word	0x200000d8

0800c5bc <GUI_MEMDEV_ReduceYSize>:
 800c5bc:	b513      	push	{r0, r1, r4, lr}
 800c5be:	460c      	mov	r4, r1
 800c5c0:	b918      	cbnz	r0, 800c5ca <GUI_MEMDEV_ReduceYSize+0xe>
 800c5c2:	4b08      	ldr	r3, [pc, #32]	; (800c5e4 <GUI_MEMDEV_ReduceYSize+0x28>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c5c8:	b150      	cbz	r0, 800c5e0 <GUI_MEMDEV_ReduceYSize+0x24>
 800c5ca:	f7f9 f8ff 	bl	80057cc <GUI_ALLOC_LockH>
 800c5ce:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800c5d2:	9001      	str	r0, [sp, #4]
 800c5d4:	42a3      	cmp	r3, r4
 800c5d6:	bfc8      	it	gt
 800c5d8:	8144      	strhgt	r4, [r0, #10]
 800c5da:	a801      	add	r0, sp, #4
 800c5dc:	f7f9 f904 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c5e0:	b002      	add	sp, #8
 800c5e2:	bd10      	pop	{r4, pc}
 800c5e4:	200000d8 	.word	0x200000d8

0800c5e8 <GUI_MEMDEV_SetOrg>:
 800c5e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ea:	460d      	mov	r5, r1
 800c5ec:	4614      	mov	r4, r2
 800c5ee:	b918      	cbnz	r0, 800c5f8 <GUI_MEMDEV_SetOrg+0x10>
 800c5f0:	4b12      	ldr	r3, [pc, #72]	; (800c63c <GUI_MEMDEV_SetOrg+0x54>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c5f6:	b1f8      	cbz	r0, 800c638 <GUI_MEMDEV_SetOrg+0x50>
 800c5f8:	f7f9 f8e8 	bl	80057cc <GUI_ALLOC_LockH>
 800c5fc:	b224      	sxth	r4, r4
 800c5fe:	b22d      	sxth	r5, r5
 800c600:	80c4      	strh	r4, [r0, #6]
 800c602:	8085      	strh	r5, [r0, #4]
 800c604:	9000      	str	r0, [sp, #0]
 800c606:	f7fc fa05 	bl	8008a14 <LCD_SetClipRectMax>
 800c60a:	9b00      	ldr	r3, [sp, #0]
 800c60c:	6958      	ldr	r0, [r3, #20]
 800c60e:	b180      	cbz	r0, 800c632 <GUI_MEMDEV_SetOrg+0x4a>
 800c610:	f7f9 f8dc 	bl	80057cc <GUI_ALLOC_LockH>
 800c614:	9b00      	ldr	r3, [sp, #0]
 800c616:	9001      	str	r0, [sp, #4]
 800c618:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800c61c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800c620:	8082      	strh	r2, [r0, #4]
 800c622:	80c3      	strh	r3, [r0, #6]
 800c624:	b112      	cbz	r2, 800c62c <GUI_MEMDEV_SetOrg+0x44>
 800c626:	b10b      	cbz	r3, 800c62c <GUI_MEMDEV_SetOrg+0x44>
 800c628:	8005      	strh	r5, [r0, #0]
 800c62a:	8044      	strh	r4, [r0, #2]
 800c62c:	a801      	add	r0, sp, #4
 800c62e:	f7f9 f8db 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c632:	4668      	mov	r0, sp
 800c634:	f7f9 f8d8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c638:	b003      	add	sp, #12
 800c63a:	bd30      	pop	{r4, r5, pc}
 800c63c:	200000d8 	.word	0x200000d8

0800c640 <_CreateStaticDevice>:
 800c640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c644:	b086      	sub	sp, #24
 800c646:	4607      	mov	r7, r0
 800c648:	f7f9 f8c0 	bl	80057cc <GUI_ALLOC_LockH>
 800c64c:	f10d 0818 	add.w	r8, sp, #24
 800c650:	f9b0 6000 	ldrsh.w	r6, [r0]
 800c654:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800c658:	f848 0d04 	str.w	r0, [r8, #-4]!
 800c65c:	f9b0 9002 	ldrsh.w	r9, [r0, #2]
 800c660:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800c664:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 800c668:	1bad      	subs	r5, r5, r6
 800c66a:	4640      	mov	r0, r8
 800c66c:	3501      	adds	r5, #1
 800c66e:	f7f9 f8bb 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c672:	eba4 0409 	sub.w	r4, r4, r9
 800c676:	2d00      	cmp	r5, #0
 800c678:	f104 0401 	add.w	r4, r4, #1
 800c67c:	dd4e      	ble.n	800c71c <_CreateStaticDevice+0xdc>
 800c67e:	2c00      	cmp	r4, #0
 800c680:	dd4c      	ble.n	800c71c <_CreateStaticDevice+0xdc>
 800c682:	f1ba 0f00 	cmp.w	sl, #0
 800c686:	d04b      	beq.n	800c720 <_CreateStaticDevice+0xe0>
 800c688:	4650      	mov	r0, sl
 800c68a:	f7f9 f89f 	bl	80057cc <GUI_ALLOC_LockH>
 800c68e:	ab06      	add	r3, sp, #24
 800c690:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 800c694:	f843 0d08 	str.w	r0, [r3, #-8]!
 800c698:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
 800c69c:	4618      	mov	r0, r3
 800c69e:	f7f9 f8a3 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c6a2:	42b5      	cmp	r5, r6
 800c6a4:	d101      	bne.n	800c6aa <_CreateStaticDevice+0x6a>
 800c6a6:	454c      	cmp	r4, r9
 800c6a8:	d004      	beq.n	800c6b4 <_CreateStaticDevice+0x74>
 800c6aa:	464a      	mov	r2, r9
 800c6ac:	4631      	mov	r1, r6
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	f7ff ff9a 	bl	800c5e8 <GUI_MEMDEV_SetOrg>
 800c6b4:	4638      	mov	r0, r7
 800c6b6:	f7f9 f87f 	bl	80057b8 <GUI_ALLOC_h2p>
 800c6ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6bc:	e061      	b.n	800c782 <_CreateStaticDevice+0x142>
 800c6be:	4655      	mov	r5, sl
 800c6c0:	e03b      	b.n	800c73a <_CreateStaticDevice+0xfa>
 800c6c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c6c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c6c8:	6283      	str	r3, [r0, #40]	; 0x28
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	f7f9 f88c 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	f7ff f96b 	bl	800b9ac <GUI_MEMDEV_Select>
 800c6d6:	4680      	mov	r8, r0
 800c6d8:	4650      	mov	r0, sl
 800c6da:	f001 f855 	bl	800d788 <GUI__AlphaPreserveTrans>
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f001 fd64 	bl	800e1ac <GUI_MEMDEV_GetDataPtr>
 800c6e4:	4b29      	ldr	r3, [pc, #164]	; (800c78c <_CreateStaticDevice+0x14c>)
 800c6e6:	492a      	ldr	r1, [pc, #168]	; (800c790 <_CreateStaticDevice+0x150>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	7809      	ldrb	r1, [r1, #0]
 800c6ec:	fb04 f205 	mul.w	r2, r4, r5
 800c6f0:	0092      	lsls	r2, r2, #2
 800c6f2:	4c28      	ldr	r4, [pc, #160]	; (800c794 <_CreateStaticDevice+0x154>)
 800c6f4:	4d28      	ldr	r5, [pc, #160]	; (800c798 <_CreateStaticDevice+0x158>)
 800c6f6:	4798      	blx	r3
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	6826      	ldr	r6, [r4, #0]
 800c6fc:	602f      	str	r7, [r5, #0]
 800c6fe:	f7fe f857 	bl	800a7b0 <WM_GetWindowOrgX>
 800c702:	6020      	str	r0, [r4, #0]
 800c704:	4638      	mov	r0, r7
 800c706:	f7fd fd05 	bl	800a114 <WM__Paint1>
 800c70a:	2000      	movs	r0, #0
 800c70c:	6026      	str	r6, [r4, #0]
 800c70e:	6028      	str	r0, [r5, #0]
 800c710:	f001 f83a 	bl	800d788 <GUI__AlphaPreserveTrans>
 800c714:	4640      	mov	r0, r8
 800c716:	f7ff f949 	bl	800b9ac <GUI_MEMDEV_Select>
 800c71a:	e7cb      	b.n	800c6b4 <_CreateStaticDevice+0x74>
 800c71c:	2600      	movs	r6, #0
 800c71e:	e030      	b.n	800c782 <_CreateStaticDevice+0x142>
 800c720:	f7fe f838 	bl	800a794 <WM_GetDesktopWindow>
 800c724:	4287      	cmp	r7, r0
 800c726:	d110      	bne.n	800c74a <_CreateStaticDevice+0x10a>
 800c728:	f7fc fb08 	bl	8008d3c <LCD_GetXSize>
 800c72c:	4682      	mov	sl, r0
 800c72e:	f7fc fb0d 	bl	8008d4c <LCD_GetYSize>
 800c732:	4555      	cmp	r5, sl
 800c734:	dcc3      	bgt.n	800c6be <_CreateStaticDevice+0x7e>
 800c736:	4284      	cmp	r4, r0
 800c738:	dd07      	ble.n	800c74a <_CreateStaticDevice+0x10a>
 800c73a:	4284      	cmp	r4, r0
 800c73c:	bfa8      	it	ge
 800c73e:	4604      	movge	r4, r0
 800c740:	4622      	mov	r2, r4
 800c742:	4629      	mov	r1, r5
 800c744:	4638      	mov	r0, r7
 800c746:	f7fe f977 	bl	800aa38 <WM_SetSize>
 800c74a:	4b14      	ldr	r3, [pc, #80]	; (800c79c <_CreateStaticDevice+0x15c>)
 800c74c:	9302      	str	r3, [sp, #8]
 800c74e:	f04f 0a01 	mov.w	sl, #1
 800c752:	4b13      	ldr	r3, [pc, #76]	; (800c7a0 <_CreateStaticDevice+0x160>)
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	462a      	mov	r2, r5
 800c758:	4623      	mov	r3, r4
 800c75a:	4649      	mov	r1, r9
 800c75c:	4630      	mov	r0, r6
 800c75e:	f8cd a000 	str.w	sl, [sp]
 800c762:	f7ff f81d 	bl	800b7a0 <GUI_MEMDEV__CreateFixed>
 800c766:	4606      	mov	r6, r0
 800c768:	4638      	mov	r0, r7
 800c76a:	f7f9 f82f 	bl	80057cc <GUI_ALLOC_LockH>
 800c76e:	9005      	str	r0, [sp, #20]
 800c770:	6246      	str	r6, [r0, #36]	; 0x24
 800c772:	2e00      	cmp	r6, #0
 800c774:	d1a5      	bne.n	800c6c2 <_CreateStaticDevice+0x82>
 800c776:	4640      	mov	r0, r8
 800c778:	f7f9 f836 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c77c:	4638      	mov	r0, r7
 800c77e:	f7fd fcc9 	bl	800a114 <WM__Paint1>
 800c782:	4630      	mov	r0, r6
 800c784:	b006      	add	sp, #24
 800c786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c78a:	bf00      	nop
 800c78c:	200000d4 	.word	0x200000d4
 800c790:	20000370 	.word	0x20000370
 800c794:	20008978 	.word	0x20008978
 800c798:	20008a00 	.word	0x20008a00
 800c79c:	08010d18 	.word	0x08010d18
 800c7a0:	08010d30 	.word	0x08010d30

0800c7a4 <GUI_MEMDEV_Paint1Static>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4605      	mov	r5, r0
 800c7a8:	2405      	movs	r4, #5
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	f7ff ff48 	bl	800c640 <_CreateStaticDevice>
 800c7b0:	b910      	cbnz	r0, 800c7b8 <GUI_MEMDEV_Paint1Static+0x14>
 800c7b2:	3c01      	subs	r4, #1
 800c7b4:	d1f9      	bne.n	800c7aa <GUI_MEMDEV_Paint1Static+0x6>
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7bc:	f000 b92a 	b.w	800ca14 <GUI_MEMDEV_Write>

0800c7c0 <GUI_USAGE_DecUseCnt>:
 800c7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	f7f9 f802 	bl	80057cc <GUI_ALLOC_LockH>
 800c7c8:	ab02      	add	r3, sp, #8
 800c7ca:	8984      	ldrh	r4, [r0, #12]
 800c7cc:	f843 0d04 	str.w	r0, [r3, #-4]!
 800c7d0:	3c01      	subs	r4, #1
 800c7d2:	b224      	sxth	r4, r4
 800c7d4:	8184      	strh	r4, [r0, #12]
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7f9 f806 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c7dc:	b914      	cbnz	r4, 800c7e4 <GUI_USAGE_DecUseCnt+0x24>
 800c7de:	4628      	mov	r0, r5
 800c7e0:	f7f9 f82e 	bl	8005840 <GUI_ALLOC_Free>
 800c7e4:	b003      	add	sp, #12
 800c7e6:	bd30      	pop	{r4, r5, pc}

0800c7e8 <GUI_USAGE_AddRect>:
 800c7e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7ec:	9c08      	ldr	r4, [sp, #32]
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	4688      	mov	r8, r1
 800c7f2:	4699      	mov	r9, r3
 800c7f4:	4414      	add	r4, r2
 800c7f6:	68ab      	ldr	r3, [r5, #8]
 800c7f8:	1c56      	adds	r6, r2, #1
 800c7fa:	685f      	ldr	r7, [r3, #4]
 800c7fc:	4641      	mov	r1, r8
 800c7fe:	464b      	mov	r3, r9
 800c800:	4628      	mov	r0, r5
 800c802:	47b8      	blx	r7
 800c804:	42b4      	cmp	r4, r6
 800c806:	4632      	mov	r2, r6
 800c808:	d1f5      	bne.n	800c7f6 <GUI_USAGE_AddRect+0xe>
 800c80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c80e <GUI_USAGE_BM_AddPixel>:
 800c80e:	f9b0 3000 	ldrsh.w	r3, [r0]
 800c812:	1ac9      	subs	r1, r1, r3
 800c814:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 800c818:	b510      	push	{r4, lr}
 800c81a:	6904      	ldr	r4, [r0, #16]
 800c81c:	1ad2      	subs	r2, r2, r3
 800c81e:	10cb      	asrs	r3, r1, #3
 800c820:	fb04 3202 	mla	r2, r4, r2, r3
 800c824:	3214      	adds	r2, #20
 800c826:	2380      	movs	r3, #128	; 0x80
 800c828:	f001 0107 	and.w	r1, r1, #7
 800c82c:	fa43 f101 	asr.w	r1, r3, r1
 800c830:	5c83      	ldrb	r3, [r0, r2]
 800c832:	4319      	orrs	r1, r3
 800c834:	5481      	strb	r1, [r0, r2]
 800c836:	bd10      	pop	{r4, pc}

0800c838 <GUI_USAGE_BM_GetNextDirty>:
 800c838:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c83c:	4293      	cmp	r3, r2
 800c83e:	b570      	push	{r4, r5, r6, lr}
 800c840:	dd43      	ble.n	800c8ca <GUI_USAGE_BM_GetNextDirty+0x92>
 800c842:	680d      	ldr	r5, [r1, #0]
 800c844:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800c848:	429d      	cmp	r5, r3
 800c84a:	da3e      	bge.n	800c8ca <GUI_USAGE_BM_GetNextDirty+0x92>
 800c84c:	6906      	ldr	r6, [r0, #16]
 800c84e:	10ec      	asrs	r4, r5, #3
 800c850:	fb06 4202 	mla	r2, r6, r2, r4
 800c854:	3214      	adds	r2, #20
 800c856:	3b01      	subs	r3, #1
 800c858:	ebc4 04e3 	rsb	r4, r4, r3, asr #3
 800c85c:	5c83      	ldrb	r3, [r0, r2]
 800c85e:	1886      	adds	r6, r0, r2
 800c860:	f005 0207 	and.w	r2, r5, #7
 800c864:	4093      	lsls	r3, r2
 800c866:	3601      	adds	r6, #1
 800c868:	b2db      	uxtb	r3, r3
 800c86a:	b193      	cbz	r3, 800c892 <GUI_USAGE_BM_GetNextDirty+0x5a>
 800c86c:	0618      	lsls	r0, r3, #24
 800c86e:	d518      	bpl.n	800c8a2 <GUI_USAGE_BM_GetNextDirty+0x6a>
 800c870:	2bff      	cmp	r3, #255	; 0xff
 800c872:	d01e      	beq.n	800c8b2 <GUI_USAGE_BM_GetNextDirty+0x7a>
 800c874:	4628      	mov	r0, r5
 800c876:	065a      	lsls	r2, r3, #25
 800c878:	d417      	bmi.n	800c8aa <GUI_USAGE_BM_GetNextDirty+0x72>
 800c87a:	f000 0307 	and.w	r3, r0, #7
 800c87e:	2b07      	cmp	r3, #7
 800c880:	d11e      	bne.n	800c8c0 <GUI_USAGE_BM_GetNextDirty+0x88>
 800c882:	3c01      	subs	r4, #1
 800c884:	d41c      	bmi.n	800c8c0 <GUI_USAGE_BM_GetNextDirty+0x88>
 800c886:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c88a:	2bff      	cmp	r3, #255	; 0xff
 800c88c:	d116      	bne.n	800c8bc <GUI_USAGE_BM_GetNextDirty+0x84>
 800c88e:	3008      	adds	r0, #8
 800c890:	e7f7      	b.n	800c882 <GUI_USAGE_BM_GetNextDirty+0x4a>
 800c892:	b1c4      	cbz	r4, 800c8c6 <GUI_USAGE_BM_GetNextDirty+0x8e>
 800c894:	3508      	adds	r5, #8
 800c896:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c89a:	3c01      	subs	r4, #1
 800c89c:	f025 0507 	bic.w	r5, r5, #7
 800c8a0:	e7e3      	b.n	800c86a <GUI_USAGE_BM_GetNextDirty+0x32>
 800c8a2:	005b      	lsls	r3, r3, #1
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	3501      	adds	r5, #1
 800c8a8:	e7e0      	b.n	800c86c <GUI_USAGE_BM_GetNextDirty+0x34>
 800c8aa:	005b      	lsls	r3, r3, #1
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	3001      	adds	r0, #1
 800c8b0:	e7e1      	b.n	800c876 <GUI_USAGE_BM_GetNextDirty+0x3e>
 800c8b2:	1de8      	adds	r0, r5, #7
 800c8b4:	e7e1      	b.n	800c87a <GUI_USAGE_BM_GetNextDirty+0x42>
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	061a      	lsls	r2, r3, #24
 800c8be:	d4fa      	bmi.n	800c8b6 <GUI_USAGE_BM_GetNextDirty+0x7e>
 800c8c0:	1b44      	subs	r4, r0, r5
 800c8c2:	600d      	str	r5, [r1, #0]
 800c8c4:	3401      	adds	r4, #1
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	bd70      	pop	{r4, r5, r6, pc}
 800c8ca:	2400      	movs	r4, #0
 800c8cc:	e7fb      	b.n	800c8c6 <GUI_USAGE_BM_GetNextDirty+0x8e>

0800c8ce <_GUI_USAGE_BM_Delete>:
 800c8ce:	f7f8 bfb7 	b.w	8005840 <GUI_ALLOC_Free>

0800c8d2 <GUI_USAGE_BM_Clear>:
 800c8d2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800c8d6:	6902      	ldr	r2, [r0, #16]
 800c8d8:	2100      	movs	r1, #0
 800c8da:	435a      	muls	r2, r3
 800c8dc:	3014      	adds	r0, #20
 800c8de:	f001 be4d 	b.w	800e57c <memset>

0800c8e2 <GUI_USAGE_BM_AddHLine>:
 800c8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e6:	f9b0 4000 	ldrsh.w	r4, [r0]
 800c8ea:	1b09      	subs	r1, r1, r4
 800c8ec:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 800c8f0:	42a1      	cmp	r1, r4
 800c8f2:	da32      	bge.n	800c95a <GUI_USAGE_BM_AddHLine+0x78>
 800c8f4:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
 800c8f8:	1b55      	subs	r5, r2, r5
 800c8fa:	6902      	ldr	r2, [r0, #16]
 800c8fc:	10ce      	asrs	r6, r1, #3
 800c8fe:	440b      	add	r3, r1
 800c900:	fb02 6505 	mla	r5, r2, r5, r6
 800c904:	1e5a      	subs	r2, r3, #1
 800c906:	425b      	negs	r3, r3
 800c908:	3514      	adds	r5, #20
 800c90a:	f001 0407 	and.w	r4, r1, #7
 800c90e:	f003 0307 	and.w	r3, r3, #7
 800c912:	21ff      	movs	r1, #255	; 0xff
 800c914:	fa41 f404 	asr.w	r4, r1, r4
 800c918:	fa01 f303 	lsl.w	r3, r1, r3
 800c91c:	ebd6 06e2 	rsbs	r6, r6, r2, asr #3
 800c920:	eb00 0705 	add.w	r7, r0, r5
 800c924:	b2e4      	uxtb	r4, r4
 800c926:	fa5f f883 	uxtb.w	r8, r3
 800c92a:	5d42      	ldrb	r2, [r0, r5]
 800c92c:	d105      	bne.n	800c93a <GUI_USAGE_BM_AddHLine+0x58>
 800c92e:	ea04 0408 	and.w	r4, r4, r8
 800c932:	4314      	orrs	r4, r2
 800c934:	5544      	strb	r4, [r0, r5]
 800c936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93a:	3e01      	subs	r6, #1
 800c93c:	4314      	orrs	r4, r2
 800c93e:	2e00      	cmp	r6, #0
 800c940:	f107 0701 	add.w	r7, r7, #1
 800c944:	5544      	strb	r4, [r0, r5]
 800c946:	dd04      	ble.n	800c952 <GUI_USAGE_BM_AddHLine+0x70>
 800c948:	4638      	mov	r0, r7
 800c94a:	4632      	mov	r2, r6
 800c94c:	f001 fe16 	bl	800e57c <memset>
 800c950:	4437      	add	r7, r6
 800c952:	783b      	ldrb	r3, [r7, #0]
 800c954:	ea48 0303 	orr.w	r3, r8, r3
 800c958:	703b      	strb	r3, [r7, #0]
 800c95a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800c960 <GUI_USAGE_BM_Create>:
 800c960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c964:	f102 040f 	add.w	r4, r2, #15
 800c968:	1124      	asrs	r4, r4, #4
 800c96a:	0064      	lsls	r4, r4, #1
 800c96c:	4680      	mov	r8, r0
 800c96e:	fb03 f004 	mul.w	r0, r3, r4
 800c972:	3014      	adds	r0, #20
 800c974:	460f      	mov	r7, r1
 800c976:	4616      	mov	r6, r2
 800c978:	461d      	mov	r5, r3
 800c97a:	f7f9 f90d 	bl	8005b98 <GUI_ALLOC_AllocZero>
 800c97e:	4681      	mov	r9, r0
 800c980:	b188      	cbz	r0, 800c9a6 <GUI_USAGE_BM_Create+0x46>
 800c982:	f7f8 ff23 	bl	80057cc <GUI_ALLOC_LockH>
 800c986:	4603      	mov	r3, r0
 800c988:	4a09      	ldr	r2, [pc, #36]	; (800c9b0 <GUI_USAGE_BM_Create+0x50>)
 800c98a:	609a      	str	r2, [r3, #8]
 800c98c:	a802      	add	r0, sp, #8
 800c98e:	2201      	movs	r2, #1
 800c990:	f840 3d04 	str.w	r3, [r0, #-4]!
 800c994:	809e      	strh	r6, [r3, #4]
 800c996:	f8a3 8000 	strh.w	r8, [r3]
 800c99a:	805f      	strh	r7, [r3, #2]
 800c99c:	80dd      	strh	r5, [r3, #6]
 800c99e:	819a      	strh	r2, [r3, #12]
 800c9a0:	611c      	str	r4, [r3, #16]
 800c9a2:	f7f8 ff21 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c9a6:	4648      	mov	r0, r9
 800c9a8:	b003      	add	sp, #12
 800c9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9ae:	bf00      	nop
 800c9b0:	08010d00 	.word	0x08010d00

0800c9b4 <GUI_MEMDEV_WriteAt>:
 800c9b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	4615      	mov	r5, r2
 800c9ba:	4606      	mov	r6, r0
 800c9bc:	b330      	cbz	r0, 800ca0c <GUI_MEMDEV_WriteAt+0x58>
 800c9be:	f7f8 ff05 	bl	80057cc <GUI_ALLOC_LockH>
 800c9c2:	4b13      	ldr	r3, [pc, #76]	; (800ca10 <GUI_MEMDEV_WriteAt+0x5c>)
 800c9c4:	9001      	str	r0, [sp, #4]
 800c9c6:	429c      	cmp	r4, r3
 800c9c8:	8903      	ldrh	r3, [r0, #8]
 800c9ca:	bf04      	itt	eq
 800c9cc:	f9b0 4004 	ldrsheq.w	r4, [r0, #4]
 800c9d0:	f9b0 5006 	ldrsheq.w	r5, [r0, #6]
 800c9d4:	f8ad 4008 	strh.w	r4, [sp, #8]
 800c9d8:	3b01      	subs	r3, #1
 800c9da:	4423      	add	r3, r4
 800c9dc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c9e0:	8943      	ldrh	r3, [r0, #10]
 800c9e2:	f8ad 500a 	strh.w	r5, [sp, #10]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	442b      	add	r3, r5
 800c9ea:	a801      	add	r0, sp, #4
 800c9ec:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c9f0:	f7f8 fefa 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800c9f4:	a802      	add	r0, sp, #8
 800c9f6:	f7fd fb03 	bl	800a000 <WM__InitIVRSearch>
 800c9fa:	b138      	cbz	r0, 800ca0c <GUI_MEMDEV_WriteAt+0x58>
 800c9fc:	462a      	mov	r2, r5
 800c9fe:	4621      	mov	r1, r4
 800ca00:	4630      	mov	r0, r6
 800ca02:	f7fe feb0 	bl	800b766 <GUI_MEMDEV__WriteToActiveAt>
 800ca06:	f7fd fa41 	bl	8009e8c <WM__GetNextIVR>
 800ca0a:	e7f6      	b.n	800c9fa <GUI_MEMDEV_WriteAt+0x46>
 800ca0c:	b004      	add	sp, #16
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	fffff001 	.word	0xfffff001

0800ca14 <GUI_MEMDEV_Write>:
 800ca14:	4a01      	ldr	r2, [pc, #4]	; (800ca1c <GUI_MEMDEV_Write+0x8>)
 800ca16:	4611      	mov	r1, r2
 800ca18:	f7ff bfcc 	b.w	800c9b4 <GUI_MEMDEV_WriteAt>
 800ca1c:	fffff001 	.word	0xfffff001

0800ca20 <_Convert16>:
 800ca20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca24:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ca28:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ca2c:	4681      	mov	r9, r0
 800ca2e:	460d      	mov	r5, r1
 800ca30:	4616      	mov	r6, r2
 800ca32:	461f      	mov	r7, r3
 800ca34:	4614      	mov	r4, r2
 800ca36:	4688      	mov	r8, r1
 800ca38:	f839 0b02 	ldrh.w	r0, [r9], #2
 800ca3c:	47d8      	blx	fp
 800ca3e:	47d0      	blx	sl
 800ca40:	3c01      	subs	r4, #1
 800ca42:	f848 0b04 	str.w	r0, [r8], #4
 800ca46:	d1f7      	bne.n	800ca38 <_Convert16+0x18>
 800ca48:	2f1f      	cmp	r7, #31
 800ca4a:	d806      	bhi.n	800ca5a <_Convert16+0x3a>
 800ca4c:	463a      	mov	r2, r7
 800ca4e:	4631      	mov	r1, r6
 800ca50:	4628      	mov	r0, r5
 800ca52:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca56:	f000 bcfd 	b.w	800d454 <GUI__CompactPixelIndices>
 800ca5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca5e <_Convert8>:
 800ca5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca62:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800ca66:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800ca6a:	4680      	mov	r8, r0
 800ca6c:	460d      	mov	r5, r1
 800ca6e:	4616      	mov	r6, r2
 800ca70:	461f      	mov	r7, r3
 800ca72:	4689      	mov	r9, r1
 800ca74:	4604      	mov	r4, r0
 800ca76:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ca7a:	47d8      	blx	fp
 800ca7c:	47d0      	blx	sl
 800ca7e:	1b33      	subs	r3, r6, r4
 800ca80:	eb18 0f03 	cmn.w	r8, r3
 800ca84:	f849 0b04 	str.w	r0, [r9], #4
 800ca88:	d1f5      	bne.n	800ca76 <_Convert8+0x18>
 800ca8a:	2f1f      	cmp	r7, #31
 800ca8c:	d806      	bhi.n	800ca9c <_Convert8+0x3e>
 800ca8e:	463a      	mov	r2, r7
 800ca90:	4631      	mov	r1, r6
 800ca92:	4628      	mov	r0, r5
 800ca94:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca98:	f000 bcdc 	b.w	800d454 <GUI__CompactPixelIndices>
 800ca9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800caa0 <GUI_MEMDEV__WriteToActiveOpaque>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	b09b      	sub	sp, #108	; 0x6c
 800caa6:	4605      	mov	r5, r0
 800caa8:	9108      	str	r1, [sp, #32]
 800caaa:	9209      	str	r2, [sp, #36]	; 0x24
 800caac:	2800      	cmp	r0, #0
 800caae:	f000 8144 	beq.w	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800cab2:	f7f8 fe8b 	bl	80057cc <GUI_ALLOC_LockH>
 800cab6:	ab1a      	add	r3, sp, #104	; 0x68
 800cab8:	6944      	ldr	r4, [r0, #20]
 800caba:	f843 0d1c 	str.w	r0, [r3, #-28]!
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f8 fe92 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cac4:	4628      	mov	r0, r5
 800cac6:	f7fe fefd 	bl	800b8c4 <GUI_MEMDEV_GetBitsPerPixel>
 800caca:	2808      	cmp	r0, #8
 800cacc:	4607      	mov	r7, r0
 800cace:	4e9c      	ldr	r6, [pc, #624]	; (800cd40 <GUI_MEMDEV__WriteToActiveOpaque+0x2a0>)
 800cad0:	dd02      	ble.n	800cad8 <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 800cad2:	2c00      	cmp	r4, #0
 800cad4:	f000 81cf 	beq.w	800ce76 <GUI_MEMDEV__WriteToActiveOpaque+0x3d6>
 800cad8:	2700      	movs	r7, #0
 800cada:	f04f 0a01 	mov.w	sl, #1
 800cade:	4628      	mov	r0, r5
 800cae0:	9718      	str	r7, [sp, #96]	; 0x60
 800cae2:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800cae6:	f7f8 fe71 	bl	80057cc <GUI_ALLOC_LockH>
 800caea:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 800caee:	930b      	str	r3, [sp, #44]	; 0x2c
 800caf0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 800caf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800caf6:	6803      	ldr	r3, [r0, #0]
 800caf8:	6904      	ldr	r4, [r0, #16]
 800cafa:	691b      	ldr	r3, [r3, #16]
 800cafc:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	930d      	str	r3, [sp, #52]	; 0x34
 800cb04:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 800cb08:	6833      	ldr	r3, [r6, #0]
 800cb0a:	f849 0d14 	str.w	r0, [r9, #-20]!
 800cb0e:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 800cb12:	7c58      	ldrb	r0, [r3, #17]
 800cb14:	f7fc f92a 	bl	8008d6c <GUI_GetBitsPerPixelEx>
 800cb18:	6833      	ldr	r3, [r6, #0]
 800cb1a:	900c      	str	r0, [sp, #48]	; 0x30
 800cb1c:	7c58      	ldrb	r0, [r3, #17]
 800cb1e:	f7fc f943 	bl	8008da8 <GUI_GetpfIndex2ColorEx>
 800cb22:	900a      	str	r0, [sp, #40]	; 0x28
 800cb24:	4648      	mov	r0, r9
 800cb26:	f7f8 fe5f 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cb2a:	2c08      	cmp	r4, #8
 800cb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb2e:	d906      	bls.n	800cb3e <GUI_MEMDEV__WriteToActiveOpaque+0x9e>
 800cb30:	2c10      	cmp	r4, #16
 800cb32:	bf8c      	ite	hi
 800cb34:	2204      	movhi	r2, #4
 800cb36:	2202      	movls	r2, #2
 800cb38:	920e      	str	r2, [sp, #56]	; 0x38
 800cb3a:	970a      	str	r7, [sp, #40]	; 0x28
 800cb3c:	e004      	b.n	800cb48 <GUI_MEMDEV__WriteToActiveOpaque+0xa8>
 800cb3e:	2c01      	cmp	r4, #1
 800cb40:	d134      	bne.n	800cbac <GUI_MEMDEV__WriteToActiveOpaque+0x10c>
 800cb42:	aa18      	add	r2, sp, #96	; 0x60
 800cb44:	940e      	str	r4, [sp, #56]	; 0x38
 800cb46:	920a      	str	r2, [sp, #40]	; 0x28
 800cb48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	f000 80e2 	beq.w	800cd14 <GUI_MEMDEV__WriteToActiveOpaque+0x274>
 800cb50:	6833      	ldr	r3, [r6, #0]
 800cb52:	7c58      	ldrb	r0, [r3, #17]
 800cb54:	f7fc f930 	bl	8008db8 <GUI_GetpfColor2IndexEx>
 800cb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb5a:	9010      	str	r0, [sp, #64]	; 0x40
 800cb5c:	0098      	lsls	r0, r3, #2
 800cb5e:	f7f9 f801 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 800cb62:	4682      	mov	sl, r0
 800cb64:	2800      	cmp	r0, #0
 800cb66:	f000 80e8 	beq.w	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f001 fb1e 	bl	800e1ac <GUI_MEMDEV_GetDataPtr>
 800cb70:	4605      	mov	r5, r0
 800cb72:	f1b8 0f00 	cmp.w	r8, #0
 800cb76:	f000 80bd 	beq.w	800ccf4 <GUI_MEMDEV__WriteToActiveOpaque+0x254>
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	f7f8 fe26 	bl	80057cc <GUI_ALLOC_LockH>
 800cb80:	eb05 030b 	add.w	r3, r5, fp
 800cb84:	9311      	str	r3, [sp, #68]	; 0x44
 800cb86:	2300      	movs	r3, #0
 800cb88:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cb8c:	9016      	str	r0, [sp, #88]	; 0x58
 800cb8e:	9309      	str	r3, [sp, #36]	; 0x24
 800cb90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb94:	eba3 070b 	sub.w	r7, r3, fp
 800cb98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	dc09      	bgt.n	800cbb2 <GUI_MEMDEV__WriteToActiveOpaque+0x112>
 800cb9e:	a816      	add	r0, sp, #88	; 0x58
 800cba0:	f7f8 fe22 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cba4:	4650      	mov	r0, sl
 800cba6:	f7f8 fe4b 	bl	8005840 <GUI_ALLOC_Free>
 800cbaa:	e0c6      	b.n	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800cbac:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cbb0:	e7c3      	b.n	800cb3a <GUI_MEMDEV__WriteToActiveOpaque+0x9a>
 800cbb2:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cbb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	9317      	str	r3, [sp, #92]	; 0x5c
 800cbba:	6883      	ldr	r3, [r0, #8]
 800cbbc:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	4641      	mov	r1, r8
 800cbc4:	4798      	blx	r3
 800cbc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbc8:	4283      	cmp	r3, r0
 800cbca:	4605      	mov	r5, r0
 800cbcc:	d130      	bne.n	800cc30 <GUI_MEMDEV__WriteToActiveOpaque+0x190>
 800cbce:	4650      	mov	r0, sl
 800cbd0:	f7f8 fdfc 	bl	80057cc <GUI_ALLOC_LockH>
 800cbd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	2c08      	cmp	r4, #8
 800cbda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbdc:	9014      	str	r0, [sp, #80]	; 0x50
 800cbde:	4601      	mov	r1, r0
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cbe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cbe6:	4638      	mov	r0, r7
 800cbe8:	d91f      	bls.n	800cc2a <GUI_MEMDEV__WriteToActiveOpaque+0x18a>
 800cbea:	f7ff ff19 	bl	800ca20 <_Convert16>
 800cbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf0:	9305      	str	r3, [sp, #20]
 800cbf2:	ad1a      	add	r5, sp, #104	; 0x68
 800cbf4:	9808      	ldr	r0, [sp, #32]
 800cbf6:	f855 3d18 	ldr.w	r3, [r5, #-24]!
 800cbfa:	9304      	str	r3, [sp, #16]
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9303      	str	r3, [sp, #12]
 800cc00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc02:	9302      	str	r3, [sp, #8]
 800cc04:	2301      	movs	r3, #1
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	9300      	str	r3, [sp, #0]
 800cc0a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	f7fb fdf3 	bl	80087f8 <LCD_DrawBitmap>
 800cc12:	4628      	mov	r0, r5
 800cc14:	f7f8 fde8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc20:	445b      	add	r3, fp
 800cc22:	9311      	str	r3, [sp, #68]	; 0x44
 800cc24:	f109 0901 	add.w	r9, r9, #1
 800cc28:	e7b2      	b.n	800cb90 <GUI_MEMDEV__WriteToActiveOpaque+0xf0>
 800cc2a:	f7ff ff18 	bl	800ca5e <_Convert8>
 800cc2e:	e7de      	b.n	800cbee <GUI_MEMDEV__WriteToActiveOpaque+0x14e>
 800cc30:	2c01      	cmp	r4, #1
 800cc32:	d059      	beq.n	800cce8 <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 800cc34:	f04f 0801 	mov.w	r8, #1
 800cc38:	2d00      	cmp	r5, #0
 800cc3a:	d0ed      	beq.n	800cc18 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800cc3c:	4650      	mov	r0, sl
 800cc3e:	f7f8 fdc5 	bl	80057cc <GUI_ALLOC_LockH>
 800cc42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc44:	9014      	str	r0, [sp, #80]	; 0x50
 800cc46:	4601      	mov	r1, r0
 800cc48:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800cc4a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc4c:	9301      	str	r3, [sp, #4]
 800cc4e:	2c08      	cmp	r4, #8
 800cc50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc52:	9300      	str	r3, [sp, #0]
 800cc54:	462a      	mov	r2, r5
 800cc56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc58:	fb00 7006 	mla	r0, r0, r6, r7
 800cc5c:	d947      	bls.n	800ccee <GUI_MEMDEV__WriteToActiveOpaque+0x24e>
 800cc5e:	f7ff fedf 	bl	800ca20 <_Convert16>
 800cc62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc64:	9305      	str	r3, [sp, #20]
 800cc66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc68:	9304      	str	r3, [sp, #16]
 800cc6a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cc6c:	9e08      	ldr	r6, [sp, #32]
 800cc6e:	f8cd 8004 	str.w	r8, [sp, #4]
 800cc72:	2300      	movs	r3, #0
 800cc74:	9303      	str	r3, [sp, #12]
 800cc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc78:	9302      	str	r3, [sp, #8]
 800cc7a:	462a      	mov	r2, r5
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	4649      	mov	r1, r9
 800cc80:	4430      	add	r0, r6
 800cc82:	f8cd 8000 	str.w	r8, [sp]
 800cc86:	f7fb fdb7 	bl	80087f8 <LCD_DrawBitmap>
 800cc8a:	a814      	add	r0, sp, #80	; 0x50
 800cc8c:	f7f8 fdac 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cc90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc92:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cc94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc96:	441d      	add	r5, r3
 800cc98:	6883      	ldr	r3, [r0, #8]
 800cc9a:	9517      	str	r5, [sp, #92]	; 0x5c
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	a917      	add	r1, sp, #92	; 0x5c
 800cca0:	4798      	blx	r3
 800cca2:	4605      	mov	r5, r0
 800cca4:	e7c8      	b.n	800cc38 <GUI_MEMDEV__WriteToActiveOpaque+0x198>
 800cca6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cca8:	9e08      	ldr	r6, [sp, #32]
 800ccaa:	f8cd b00c 	str.w	fp, [sp, #12]
 800ccae:	f000 0307 	and.w	r3, r0, #7
 800ccb2:	9306      	str	r3, [sp, #24]
 800ccb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb6:	9305      	str	r3, [sp, #20]
 800ccb8:	2308      	movs	r3, #8
 800ccba:	fb90 f3f3 	sdiv	r3, r0, r3
 800ccbe:	443b      	add	r3, r7
 800ccc0:	9304      	str	r3, [sp, #16]
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	462a      	mov	r2, r5
 800ccc6:	9302      	str	r3, [sp, #8]
 800ccc8:	9301      	str	r3, [sp, #4]
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	4649      	mov	r1, r9
 800ccce:	4430      	add	r0, r6
 800ccd0:	f7fb fcaa 	bl	8008628 <LCD__DrawBitmap_1bpp>
 800ccd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ccd6:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ccd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccda:	441d      	add	r5, r3
 800ccdc:	6883      	ldr	r3, [r0, #8]
 800ccde:	9517      	str	r5, [sp, #92]	; 0x5c
 800cce0:	695b      	ldr	r3, [r3, #20]
 800cce2:	4641      	mov	r1, r8
 800cce4:	4798      	blx	r3
 800cce6:	4605      	mov	r5, r0
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	d1dc      	bne.n	800cca6 <GUI_MEMDEV__WriteToActiveOpaque+0x206>
 800ccec:	e794      	b.n	800cc18 <GUI_MEMDEV__WriteToActiveOpaque+0x178>
 800ccee:	f7ff feb6 	bl	800ca5e <_Convert8>
 800ccf2:	e7b6      	b.n	800cc62 <GUI_MEMDEV__WriteToActiveOpaque+0x1c2>
 800ccf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf6:	9305      	str	r3, [sp, #20]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	9004      	str	r0, [sp, #16]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	f8cd b00c 	str.w	fp, [sp, #12]
 800cd04:	9402      	str	r4, [sp, #8]
 800cd06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd0c:	9808      	ldr	r0, [sp, #32]
 800cd0e:	f7fb fd73 	bl	80087f8 <LCD_DrawBitmap>
 800cd12:	e747      	b.n	800cba4 <GUI_MEMDEV__WriteToActiveOpaque+0x104>
 800cd14:	4628      	mov	r0, r5
 800cd16:	f001 fa49 	bl	800e1ac <GUI_MEMDEV_GetDataPtr>
 800cd1a:	4607      	mov	r7, r0
 800cd1c:	f1b8 0f00 	cmp.w	r8, #0
 800cd20:	f000 8099 	beq.w	800ce56 <GUI_MEMDEV__WriteToActiveOpaque+0x3b6>
 800cd24:	4640      	mov	r0, r8
 800cd26:	f7f8 fd51 	bl	80057cc <GUI_ALLOC_LockH>
 800cd2a:	2500      	movs	r5, #0
 800cd2c:	9016      	str	r0, [sp, #88]	; 0x58
 800cd2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd30:	42ab      	cmp	r3, r5
 800cd32:	dc07      	bgt.n	800cd44 <GUI_MEMDEV__WriteToActiveOpaque+0x2a4>
 800cd34:	a816      	add	r0, sp, #88	; 0x58
 800cd36:	f7f8 fd57 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cd3a:	b01b      	add	sp, #108	; 0x6c
 800cd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd40:	200000d8 	.word	0x200000d8
 800cd44:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cd46:	2300      	movs	r3, #0
 800cd48:	9317      	str	r3, [sp, #92]	; 0x5c
 800cd4a:	6883      	ldr	r3, [r0, #8]
 800cd4c:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	462a      	mov	r2, r5
 800cd54:	4641      	mov	r1, r8
 800cd56:	4798      	blx	r3
 800cd58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5a:	4283      	cmp	r3, r0
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	d124      	bne.n	800cdaa <GUI_MEMDEV__WriteToActiveOpaque+0x30a>
 800cd60:	46a9      	mov	r9, r5
 800cd62:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cd64:	6883      	ldr	r3, [r0, #8]
 800cd66:	f109 0a01 	add.w	sl, r9, #1
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	4652      	mov	r2, sl
 800cd6e:	4641      	mov	r1, r8
 800cd70:	4798      	blx	r3
 800cd72:	4286      	cmp	r6, r0
 800cd74:	d017      	beq.n	800cda6 <GUI_MEMDEV__WriteToActiveOpaque+0x306>
 800cd76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd7a:	9305      	str	r3, [sp, #20]
 800cd7c:	eba9 0605 	sub.w	r6, r9, r5
 800cd80:	2301      	movs	r3, #1
 800cd82:	3601      	adds	r6, #1
 800cd84:	9704      	str	r7, [sp, #16]
 800cd86:	9301      	str	r3, [sp, #4]
 800cd88:	9300      	str	r3, [sp, #0]
 800cd8a:	f8cd b00c 	str.w	fp, [sp, #12]
 800cd8e:	9402      	str	r4, [sp, #8]
 800cd90:	4633      	mov	r3, r6
 800cd92:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd94:	9808      	ldr	r0, [sp, #32]
 800cd96:	4429      	add	r1, r5
 800cd98:	f7fb fd2e 	bl	80087f8 <LCD_DrawBitmap>
 800cd9c:	fb0b 7706 	mla	r7, fp, r6, r7
 800cda0:	f109 0501 	add.w	r5, r9, #1
 800cda4:	e7c3      	b.n	800cd2e <GUI_MEMDEV__WriteToActiveOpaque+0x28e>
 800cda6:	46d1      	mov	r9, sl
 800cda8:	e7db      	b.n	800cd62 <GUI_MEMDEV__WriteToActiveOpaque+0x2c2>
 800cdaa:	2c01      	cmp	r4, #1
 800cdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdae:	d025      	beq.n	800cdfc <GUI_MEMDEV__WriteToActiveOpaque+0x35c>
 800cdb0:	eb03 0a05 	add.w	sl, r3, r5
 800cdb4:	f04f 0901 	mov.w	r9, #1
 800cdb8:	b326      	cbz	r6, 800ce04 <GUI_MEMDEV__WriteToActiveOpaque+0x364>
 800cdba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdbc:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800cdc0:	9305      	str	r3, [sp, #20]
 800cdc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cdc4:	9808      	ldr	r0, [sp, #32]
 800cdc6:	f8cd b00c 	str.w	fp, [sp, #12]
 800cdca:	fb03 730e 	mla	r3, r3, lr, r7
 800cdce:	4632      	mov	r2, r6
 800cdd0:	4470      	add	r0, lr
 800cdd2:	9304      	str	r3, [sp, #16]
 800cdd4:	4651      	mov	r1, sl
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	9402      	str	r4, [sp, #8]
 800cdda:	f8cd 9004 	str.w	r9, [sp, #4]
 800cdde:	f8cd 9000 	str.w	r9, [sp]
 800cde2:	f7fb fd09 	bl	80087f8 <LCD_DrawBitmap>
 800cde6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cde8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800cdea:	441e      	add	r6, r3
 800cdec:	6883      	ldr	r3, [r0, #8]
 800cdee:	9617      	str	r6, [sp, #92]	; 0x5c
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	462a      	mov	r2, r5
 800cdf4:	4641      	mov	r1, r8
 800cdf6:	4798      	blx	r3
 800cdf8:	4606      	mov	r6, r0
 800cdfa:	e7dd      	b.n	800cdb8 <GUI_MEMDEV__WriteToActiveOpaque+0x318>
 800cdfc:	eb03 0905 	add.w	r9, r3, r5
 800ce00:	46a0      	mov	r8, r4
 800ce02:	b916      	cbnz	r6, 800ce0a <GUI_MEMDEV__WriteToActiveOpaque+0x36a>
 800ce04:	445f      	add	r7, fp
 800ce06:	46a9      	mov	r9, r5
 800ce08:	e7ca      	b.n	800cda0 <GUI_MEMDEV__WriteToActiveOpaque+0x300>
 800ce0a:	f8dd e05c 	ldr.w	lr, [sp, #92]	; 0x5c
 800ce0e:	9808      	ldr	r0, [sp, #32]
 800ce10:	f8cd b00c 	str.w	fp, [sp, #12]
 800ce14:	f00e 0307 	and.w	r3, lr, #7
 800ce18:	9306      	str	r3, [sp, #24]
 800ce1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1c:	9305      	str	r3, [sp, #20]
 800ce1e:	2308      	movs	r3, #8
 800ce20:	fb9e f3f3 	sdiv	r3, lr, r3
 800ce24:	443b      	add	r3, r7
 800ce26:	4632      	mov	r2, r6
 800ce28:	4470      	add	r0, lr
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	4649      	mov	r1, r9
 800ce2e:	2301      	movs	r3, #1
 800ce30:	f8cd 8008 	str.w	r8, [sp, #8]
 800ce34:	f8cd 8004 	str.w	r8, [sp, #4]
 800ce38:	f8cd 8000 	str.w	r8, [sp]
 800ce3c:	f7fb fbf4 	bl	8008628 <LCD__DrawBitmap_1bpp>
 800ce40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce42:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ce44:	441e      	add	r6, r3
 800ce46:	6883      	ldr	r3, [r0, #8]
 800ce48:	9617      	str	r6, [sp, #92]	; 0x5c
 800ce4a:	695b      	ldr	r3, [r3, #20]
 800ce4c:	462a      	mov	r2, r5
 800ce4e:	a917      	add	r1, sp, #92	; 0x5c
 800ce50:	4798      	blx	r3
 800ce52:	4606      	mov	r6, r0
 800ce54:	e7d5      	b.n	800ce02 <GUI_MEMDEV__WriteToActiveOpaque+0x362>
 800ce56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce58:	9305      	str	r3, [sp, #20]
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	9301      	str	r3, [sp, #4]
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce64:	9004      	str	r0, [sp, #16]
 800ce66:	f8cd b00c 	str.w	fp, [sp, #12]
 800ce6a:	9402      	str	r4, [sp, #8]
 800ce6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce6e:	9808      	ldr	r0, [sp, #32]
 800ce70:	f7fb fcc2 	bl	80087f8 <LCD_DrawBitmap>
 800ce74:	e761      	b.n	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7f8 fca8 	bl	80057cc <GUI_ALLOC_LockH>
 800ce7c:	4683      	mov	fp, r0
 800ce7e:	a81a      	add	r0, sp, #104	; 0x68
 800ce80:	f8db 2000 	ldr.w	r2, [fp]
 800ce84:	f8db 100c 	ldr.w	r1, [fp, #12]
 800ce88:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 800ce8c:	f840 bd10 	str.w	fp, [r0, #-16]!
 800ce90:	910c      	str	r1, [sp, #48]	; 0x30
 800ce92:	f8d2 8010 	ldr.w	r8, [r2, #16]
 800ce96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce98:	f9bb 4008 	ldrsh.w	r4, [fp, #8]
 800ce9c:	f7f8 fca4 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cea0:	6832      	ldr	r2, [r6, #0]
 800cea2:	f8d8 9004 	ldr.w	r9, [r8, #4]
 800cea6:	7c50      	ldrb	r0, [r2, #17]
 800cea8:	4a94      	ldr	r2, [pc, #592]	; (800d0fc <GUI_MEMDEV__WriteToActiveOpaque+0x65c>)
 800ceaa:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800ceae:	6916      	ldr	r6, [r2, #16]
 800ceb0:	6833      	ldr	r3, [r6, #0]
 800ceb2:	930a      	str	r3, [sp, #40]	; 0x28
 800ceb4:	f7fb ff5a 	bl	8008d6c <GUI_GetBitsPerPixelEx>
 800ceb8:	2808      	cmp	r0, #8
 800ceba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cebc:	d914      	bls.n	800cee8 <GUI_MEMDEV__WriteToActiveOpaque+0x448>
 800cebe:	2810      	cmp	r0, #16
 800cec0:	bf8c      	ite	hi
 800cec2:	f04f 0a04 	movhi.w	sl, #4
 800cec6:	f04f 0a02 	movls.w	sl, #2
 800ceca:	45b0      	cmp	r8, r6
 800cecc:	d10f      	bne.n	800ceee <GUI_MEMDEV__WriteToActiveOpaque+0x44e>
 800cece:	f10b 0318 	add.w	r3, fp, #24
 800ced2:	2200      	movs	r2, #0
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	2301      	movs	r3, #1
 800ced8:	9205      	str	r2, [sp, #20]
 800ceda:	9301      	str	r3, [sp, #4]
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	9103      	str	r1, [sp, #12]
 800cee0:	9702      	str	r7, [sp, #8]
 800cee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cee4:	4622      	mov	r2, r4
 800cee6:	e7c1      	b.n	800ce6c <GUI_MEMDEV__WriteToActiveOpaque+0x3cc>
 800cee8:	f04f 0a01 	mov.w	sl, #1
 800ceec:	e7ed      	b.n	800ceca <GUI_MEMDEV__WriteToActiveOpaque+0x42a>
 800ceee:	2f20      	cmp	r7, #32
 800cef0:	f040 80a9 	bne.w	800d046 <GUI_MEMDEV__WriteToActiveOpaque+0x5a6>
 800cef4:	fb0a f004 	mul.w	r0, sl, r4
 800cef8:	f7f8 fe34 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 800cefc:	900d      	str	r0, [sp, #52]	; 0x34
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f43f af1b 	beq.w	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800cf04:	f7f8 fc62 	bl	80057cc <GUI_ALLOC_LockH>
 800cf08:	9018      	str	r0, [sp, #96]	; 0x60
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f7f8 fc5e 	bl	80057cc <GUI_ALLOC_LockH>
 800cf10:	6933      	ldr	r3, [r6, #16]
 800cf12:	9016      	str	r0, [sp, #88]	; 0x58
 800cf14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf18:	f100 0518 	add.w	r5, r0, #24
 800cf1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf20:	920c      	str	r2, [sp, #48]	; 0x30
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d035      	beq.n	800cf92 <GUI_MEMDEV__WriteToActiveOpaque+0x4f2>
 800cf26:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800cf2a:	f04f 0901 	mov.w	r9, #1
 800cf2e:	f1ba 0f02 	cmp.w	sl, #2
 800cf32:	d005      	beq.n	800cf40 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 800cf34:	f1ba 0f04 	cmp.w	sl, #4
 800cf38:	d002      	beq.n	800cf40 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 800cf3a:	f1ba 0f01 	cmp.w	sl, #1
 800cf3e:	d106      	bne.n	800cf4e <GUI_MEMDEV__WriteToActiveOpaque+0x4ae>
 800cf40:	4628      	mov	r0, r5
 800cf42:	6937      	ldr	r7, [r6, #16]
 800cf44:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cf46:	4653      	mov	r3, sl
 800cf48:	4622      	mov	r2, r4
 800cf4a:	47b8      	blx	r7
 800cf4c:	445d      	add	r5, fp
 800cf4e:	2300      	movs	r3, #0
 800cf50:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf52:	9305      	str	r3, [sp, #20]
 800cf54:	9303      	str	r3, [sp, #12]
 800cf56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf58:	9204      	str	r2, [sp, #16]
 800cf5a:	9302      	str	r3, [sp, #8]
 800cf5c:	4622      	mov	r2, r4
 800cf5e:	2301      	movs	r3, #1
 800cf60:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf64:	f8cd 9000 	str.w	r9, [sp]
 800cf68:	4641      	mov	r1, r8
 800cf6a:	9808      	ldr	r0, [sp, #32]
 800cf6c:	f7fb fc44 	bl	80087f8 <LCD_DrawBitmap>
 800cf70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf74:	f108 0701 	add.w	r7, r8, #1
 800cf78:	4413      	add	r3, r2
 800cf7a:	429f      	cmp	r7, r3
 800cf7c:	d107      	bne.n	800cf8e <GUI_MEMDEV__WriteToActiveOpaque+0x4ee>
 800cf7e:	a816      	add	r0, sp, #88	; 0x58
 800cf80:	f7f8 fc32 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cf84:	a818      	add	r0, sp, #96	; 0x60
 800cf86:	f7f8 fc2f 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800cf8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cf8c:	e60b      	b.n	800cba6 <GUI_MEMDEV__WriteToActiveOpaque+0x106>
 800cf8e:	46b8      	mov	r8, r7
 800cf90:	e7cd      	b.n	800cf2e <GUI_MEMDEV__WriteToActiveOpaque+0x48e>
 800cf92:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cf94:	461e      	mov	r6, r3
 800cf96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf98:	443b      	add	r3, r7
 800cf9a:	f04f 0901 	mov.w	r9, #1
 800cf9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cfa0:	f1ba 0f02 	cmp.w	sl, #2
 800cfa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cfa8:	d02d      	beq.n	800d006 <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 800cfaa:	f1ba 0f04 	cmp.w	sl, #4
 800cfae:	d03b      	beq.n	800d028 <GUI_MEMDEV__WriteToActiveOpaque+0x588>
 800cfb0:	f1ba 0f01 	cmp.w	sl, #1
 800cfb4:	d110      	bne.n	800cfd8 <GUI_MEMDEV__WriteToActiveOpaque+0x538>
 800cfb6:	4643      	mov	r3, r8
 800cfb8:	462a      	mov	r2, r5
 800cfba:	f852 0b04 	ldr.w	r0, [r2], #4
 800cfbe:	930e      	str	r3, [sp, #56]	; 0x38
 800cfc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfc2:	920b      	str	r2, [sp, #44]	; 0x2c
 800cfc4:	4798      	blx	r3
 800cfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfca:	f803 0b01 	strb.w	r0, [r3], #1
 800cfce:	1ae1      	subs	r1, r4, r3
 800cfd0:	eb18 0f01 	cmn.w	r8, r1
 800cfd4:	d1f1      	bne.n	800cfba <GUI_MEMDEV__WriteToActiveOpaque+0x51a>
 800cfd6:	445d      	add	r5, fp
 800cfd8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfde:	9302      	str	r3, [sp, #8]
 800cfe0:	9605      	str	r6, [sp, #20]
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	9603      	str	r6, [sp, #12]
 800cfe6:	f8cd 9004 	str.w	r9, [sp, #4]
 800cfea:	f8cd 9000 	str.w	r9, [sp]
 800cfee:	4622      	mov	r2, r4
 800cff0:	4639      	mov	r1, r7
 800cff2:	9808      	ldr	r0, [sp, #32]
 800cff4:	f7fb fc00 	bl	80087f8 <LCD_DrawBitmap>
 800cff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffa:	f107 0801 	add.w	r8, r7, #1
 800cffe:	4598      	cmp	r8, r3
 800d000:	d0bd      	beq.n	800cf7e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800d002:	4647      	mov	r7, r8
 800d004:	e7cc      	b.n	800cfa0 <GUI_MEMDEV__WriteToActiveOpaque+0x500>
 800d006:	4643      	mov	r3, r8
 800d008:	462a      	mov	r2, r5
 800d00a:	46a0      	mov	r8, r4
 800d00c:	f852 0b04 	ldr.w	r0, [r2], #4
 800d010:	930e      	str	r3, [sp, #56]	; 0x38
 800d012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d014:	920b      	str	r2, [sp, #44]	; 0x2c
 800d016:	4798      	blx	r3
 800d018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d01a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d01c:	f823 0b02 	strh.w	r0, [r3], #2
 800d020:	f1b8 0801 	subs.w	r8, r8, #1
 800d024:	d1f2      	bne.n	800d00c <GUI_MEMDEV__WriteToActiveOpaque+0x56c>
 800d026:	e7d6      	b.n	800cfd6 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800d028:	462a      	mov	r2, r5
 800d02a:	4623      	mov	r3, r4
 800d02c:	f852 0b04 	ldr.w	r0, [r2], #4
 800d030:	930e      	str	r3, [sp, #56]	; 0x38
 800d032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d034:	920b      	str	r2, [sp, #44]	; 0x2c
 800d036:	4798      	blx	r3
 800d038:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d03a:	f848 0b04 	str.w	r0, [r8], #4
 800d03e:	3b01      	subs	r3, #1
 800d040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d042:	d1f3      	bne.n	800d02c <GUI_MEMDEV__WriteToActiveOpaque+0x58c>
 800d044:	e7c7      	b.n	800cfd6 <GUI_MEMDEV__WriteToActiveOpaque+0x536>
 800d046:	2f10      	cmp	r7, #16
 800d048:	f47f ae77 	bne.w	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800d04c:	fb04 f00a 	mul.w	r0, r4, sl
 800d050:	f7f8 fd88 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 800d054:	900d      	str	r0, [sp, #52]	; 0x34
 800d056:	2800      	cmp	r0, #0
 800d058:	f43f ae6f 	beq.w	800cd3a <GUI_MEMDEV__WriteToActiveOpaque+0x29a>
 800d05c:	f7f8 fbb6 	bl	80057cc <GUI_ALLOC_LockH>
 800d060:	9018      	str	r0, [sp, #96]	; 0x60
 800d062:	4628      	mov	r0, r5
 800d064:	f7f8 fbb2 	bl	80057cc <GUI_ALLOC_LockH>
 800d068:	6933      	ldr	r3, [r6, #16]
 800d06a:	9016      	str	r0, [sp, #88]	; 0x58
 800d06c:	f100 0718 	add.w	r7, r0, #24
 800d070:	b11b      	cbz	r3, 800d07a <GUI_MEMDEV__WriteToActiveOpaque+0x5da>
 800d072:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d142      	bne.n	800d100 <GUI_MEMDEV__WriteToActiveOpaque+0x660>
 800d07a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d07e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d080:	930c      	str	r3, [sp, #48]	; 0x30
 800d082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d084:	442b      	add	r3, r5
 800d086:	0066      	lsls	r6, r4, #1
 800d088:	f04f 0b00 	mov.w	fp, #0
 800d08c:	9309      	str	r3, [sp, #36]	; 0x24
 800d08e:	f1ba 0f02 	cmp.w	sl, #2
 800d092:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d096:	f000 8085 	beq.w	800d1a4 <GUI_MEMDEV__WriteToActiveOpaque+0x704>
 800d09a:	f1ba 0f04 	cmp.w	sl, #4
 800d09e:	f000 8093 	beq.w	800d1c8 <GUI_MEMDEV__WriteToActiveOpaque+0x728>
 800d0a2:	f1ba 0f01 	cmp.w	sl, #1
 800d0a6:	d111      	bne.n	800d0cc <GUI_MEMDEV__WriteToActiveOpaque+0x62c>
 800d0a8:	4643      	mov	r3, r8
 800d0aa:	463a      	mov	r2, r7
 800d0ac:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d0b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d0b2:	930e      	str	r3, [sp, #56]	; 0x38
 800d0b4:	47c8      	blx	r9
 800d0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0b8:	4798      	blx	r3
 800d0ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d0be:	f803 0b01 	strb.w	r0, [r3], #1
 800d0c2:	1ae1      	subs	r1, r4, r3
 800d0c4:	eb18 0f01 	cmn.w	r8, r1
 800d0c8:	d1f0      	bne.n	800d0ac <GUI_MEMDEV__WriteToActiveOpaque+0x60c>
 800d0ca:	4437      	add	r7, r6
 800d0cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d0ce:	9304      	str	r3, [sp, #16]
 800d0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0d2:	9302      	str	r3, [sp, #8]
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	9301      	str	r3, [sp, #4]
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	f8cd b014 	str.w	fp, [sp, #20]
 800d0de:	f8cd b00c 	str.w	fp, [sp, #12]
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4629      	mov	r1, r5
 800d0e6:	9808      	ldr	r0, [sp, #32]
 800d0e8:	f7fb fb86 	bl	80087f8 <LCD_DrawBitmap>
 800d0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ee:	f105 0801 	add.w	r8, r5, #1
 800d0f2:	4598      	cmp	r8, r3
 800d0f4:	f43f af43 	beq.w	800cf7e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800d0f8:	4645      	mov	r5, r8
 800d0fa:	e7c8      	b.n	800d08e <GUI_MEMDEV__WriteToActiveOpaque+0x5ee>
 800d0fc:	200089b8 	.word	0x200089b8
 800d100:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 800d104:	0080      	lsls	r0, r0, #2
 800d106:	f7f8 fd2d 	bl	8005b64 <GUI_ALLOC_AllocNoInit>
 800d10a:	900c      	str	r0, [sp, #48]	; 0x30
 800d10c:	2800      	cmp	r0, #0
 800d10e:	d044      	beq.n	800d19a <GUI_MEMDEV__WriteToActiveOpaque+0x6fa>
 800d110:	f7f8 fb5c 	bl	80057cc <GUI_ALLOC_LockH>
 800d114:	9017      	str	r0, [sp, #92]	; 0x5c
 800d116:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f43f af30 	beq.w	800cf7e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800d11e:	0063      	lsls	r3, r4, #1
 800d120:	930a      	str	r3, [sp, #40]	; 0x28
 800d122:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800d126:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d12a:	930e      	str	r3, [sp, #56]	; 0x38
 800d12c:	f1ba 0f02 	cmp.w	sl, #2
 800d130:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 800d134:	d005      	beq.n	800d142 <GUI_MEMDEV__WriteToActiveOpaque+0x6a2>
 800d136:	f1ba 0f04 	cmp.w	sl, #4
 800d13a:	d002      	beq.n	800d142 <GUI_MEMDEV__WriteToActiveOpaque+0x6a2>
 800d13c:	f1ba 0f01 	cmp.w	sl, #1
 800d140:	d10e      	bne.n	800d160 <GUI_MEMDEV__WriteToActiveOpaque+0x6c0>
 800d142:	4638      	mov	r0, r7
 800d144:	2302      	movs	r3, #2
 800d146:	4622      	mov	r2, r4
 800d148:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d14a:	f8d8 5014 	ldr.w	r5, [r8, #20]
 800d14e:	47a8      	blx	r5
 800d150:	4653      	mov	r3, sl
 800d152:	4622      	mov	r2, r4
 800d154:	4649      	mov	r1, r9
 800d156:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d158:	6935      	ldr	r5, [r6, #16]
 800d15a:	47a8      	blx	r5
 800d15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d15e:	441f      	add	r7, r3
 800d160:	2300      	movs	r3, #0
 800d162:	9305      	str	r3, [sp, #20]
 800d164:	9303      	str	r3, [sp, #12]
 800d166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d168:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d16a:	9302      	str	r3, [sp, #8]
 800d16c:	2301      	movs	r3, #1
 800d16e:	9204      	str	r2, [sp, #16]
 800d170:	9301      	str	r3, [sp, #4]
 800d172:	9300      	str	r3, [sp, #0]
 800d174:	4622      	mov	r2, r4
 800d176:	4659      	mov	r1, fp
 800d178:	9808      	ldr	r0, [sp, #32]
 800d17a:	f7fb fb3d 	bl	80087f8 <LCD_DrawBitmap>
 800d17e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d182:	f10b 0901 	add.w	r9, fp, #1
 800d186:	4413      	add	r3, r2
 800d188:	454b      	cmp	r3, r9
 800d18a:	d109      	bne.n	800d1a0 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 800d18c:	a817      	add	r0, sp, #92	; 0x5c
 800d18e:	f7f8 fb2b 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d192:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d194:	f7f8 fb54 	bl	8005840 <GUI_ALLOC_Free>
 800d198:	e6f1      	b.n	800cf7e <GUI_MEMDEV__WriteToActiveOpaque+0x4de>
 800d19a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d19c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d19e:	e7ba      	b.n	800d116 <GUI_MEMDEV__WriteToActiveOpaque+0x676>
 800d1a0:	46cb      	mov	fp, r9
 800d1a2:	e7c3      	b.n	800d12c <GUI_MEMDEV__WriteToActiveOpaque+0x68c>
 800d1a4:	4643      	mov	r3, r8
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	46a0      	mov	r8, r4
 800d1aa:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d1ae:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800d1b2:	47c8      	blx	r9
 800d1b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1b6:	4798      	blx	r3
 800d1b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1bc:	f823 0b02 	strh.w	r0, [r3], #2
 800d1c0:	f1b8 0801 	subs.w	r8, r8, #1
 800d1c4:	d1f1      	bne.n	800d1aa <GUI_MEMDEV__WriteToActiveOpaque+0x70a>
 800d1c6:	e780      	b.n	800d0ca <GUI_MEMDEV__WriteToActiveOpaque+0x62a>
 800d1c8:	463a      	mov	r2, r7
 800d1ca:	4623      	mov	r3, r4
 800d1cc:	f832 0b02 	ldrh.w	r0, [r2], #2
 800d1d0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1d2:	930e      	str	r3, [sp, #56]	; 0x38
 800d1d4:	47c8      	blx	r9
 800d1d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1d8:	4798      	blx	r3
 800d1da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1dc:	f848 0b04 	str.w	r0, [r8], #4
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1e4:	d1f2      	bne.n	800d1cc <GUI_MEMDEV__WriteToActiveOpaque+0x72c>
 800d1e6:	e770      	b.n	800d0ca <GUI_MEMDEV__WriteToActiveOpaque+0x62a>

0800d1e8 <LCD_AA_MixColors16>:
 800d1e8:	0e0b      	lsrs	r3, r1, #24
 800d1ea:	b510      	push	{r4, lr}
 800d1ec:	4c0c      	ldr	r4, [pc, #48]	; (800d220 <LCD_AA_MixColors16+0x38>)
 800d1ee:	d10f      	bne.n	800d210 <LCD_AA_MixColors16+0x28>
 800d1f0:	0e03      	lsrs	r3, r0, #24
 800d1f2:	2bff      	cmp	r3, #255	; 0xff
 800d1f4:	d108      	bne.n	800d208 <LCD_AA_MixColors16+0x20>
 800d1f6:	6861      	ldr	r1, [r4, #4]
 800d1f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800d1fc:	4308      	orrs	r0, r1
 800d1fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800d202:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 800d206:	bd10      	pop	{r4, pc}
 800d208:	b913      	cbnz	r3, 800d210 <LCD_AA_MixColors16+0x28>
 800d20a:	6860      	ldr	r0, [r4, #4]
 800d20c:	4308      	orrs	r0, r1
 800d20e:	bd10      	pop	{r4, pc}
 800d210:	4b04      	ldr	r3, [pc, #16]	; (800d224 <LCD_AA_MixColors16+0x3c>)
 800d212:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	b2d2      	uxtb	r2, r2
 800d21a:	4798      	blx	r3
 800d21c:	6861      	ldr	r1, [r4, #4]
 800d21e:	e7f5      	b.n	800d20c <LCD_AA_MixColors16+0x24>
 800d220:	20000114 	.word	0x20000114
 800d224:	20000108 	.word	0x20000108

0800d228 <LCD_AA_SetOrMask>:
 800d228:	4b02      	ldr	r3, [pc, #8]	; (800d234 <LCD_AA_SetOrMask+0xc>)
 800d22a:	685a      	ldr	r2, [r3, #4]
 800d22c:	6058      	str	r0, [r3, #4]
 800d22e:	4610      	mov	r0, r2
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop
 800d234:	20000114 	.word	0x20000114

0800d238 <LCD_ReadRectEx>:
 800d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d23c:	b087      	sub	sp, #28
 800d23e:	4690      	mov	r8, r2
 800d240:	9303      	str	r3, [sp, #12]
 800d242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d244:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d246:	68da      	ldr	r2, [r3, #12]
 800d248:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800d24a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800d24e:	4607      	mov	r7, r0
 800d250:	460e      	mov	r6, r1
 800d252:	b9ab      	cbnz	r3, 800d280 <LCD_ReadRectEx+0x48>
 800d254:	4b5b      	ldr	r3, [pc, #364]	; (800d3c4 <LCD_ReadRectEx+0x18c>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	7c58      	ldrb	r0, [r3, #17]
 800d25a:	f7fb fd87 	bl	8008d6c <GUI_GetBitsPerPixelEx>
 800d25e:	2808      	cmp	r0, #8
 800d260:	dd1d      	ble.n	800d29e <LCD_ReadRectEx+0x66>
 800d262:	2811      	cmp	r0, #17
 800d264:	bfb4      	ite	lt
 800d266:	f04f 0a02 	movlt.w	sl, #2
 800d26a:	f04f 0a04 	movge.w	sl, #4
 800d26e:	1e43      	subs	r3, r0, #1
 800d270:	2500      	movs	r5, #0
 800d272:	9304      	str	r3, [sp, #16]
 800d274:	9b03      	ldr	r3, [sp, #12]
 800d276:	429e      	cmp	r6, r3
 800d278:	dd14      	ble.n	800d2a4 <LCD_ReadRectEx+0x6c>
 800d27a:	b007      	add	sp, #28
 800d27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d280:	2101      	movs	r1, #1
 800d282:	a811      	add	r0, sp, #68	; 0x44
 800d284:	4798      	blx	r3
 800d286:	4605      	mov	r5, r0
 800d288:	2800      	cmp	r0, #0
 800d28a:	d0e3      	beq.n	800d254 <LCD_ReadRectEx+0x1c>
 800d28c:	9b03      	ldr	r3, [sp, #12]
 800d28e:	9300      	str	r3, [sp, #0]
 800d290:	9401      	str	r4, [sp, #4]
 800d292:	4643      	mov	r3, r8
 800d294:	4632      	mov	r2, r6
 800d296:	4639      	mov	r1, r7
 800d298:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d29a:	47a8      	blx	r5
 800d29c:	e7ed      	b.n	800d27a <LCD_ReadRectEx+0x42>
 800d29e:	f04f 0a01 	mov.w	sl, #1
 800d2a2:	e7e4      	b.n	800d26e <LCD_ReadRectEx+0x36>
 800d2a4:	f1ba 0f02 	cmp.w	sl, #2
 800d2a8:	d01a      	beq.n	800d2e0 <LCD_ReadRectEx+0xa8>
 800d2aa:	f1ba 0f04 	cmp.w	sl, #4
 800d2ae:	d00b      	beq.n	800d2c8 <LCD_ReadRectEx+0x90>
 800d2b0:	f1ba 0f01 	cmp.w	sl, #1
 800d2b4:	d16b      	bne.n	800d38e <LCD_ReadRectEx+0x156>
 800d2b6:	9b04      	ldr	r3, [sp, #16]
 800d2b8:	2b07      	cmp	r3, #7
 800d2ba:	d868      	bhi.n	800d38e <LCD_ReadRectEx+0x156>
 800d2bc:	e8df f003 	tbb	[pc, r3]
 800d2c0:	28284464 	.word	0x28284464
 800d2c4:	1c1c1c1c 	.word	0x1c1c1c1c
 800d2c8:	46bb      	mov	fp, r7
 800d2ca:	45c3      	cmp	fp, r8
 800d2cc:	dc5f      	bgt.n	800d38e <LCD_ReadRectEx+0x156>
 800d2ce:	4659      	mov	r1, fp
 800d2d0:	4632      	mov	r2, r6
 800d2d2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d2d4:	47c8      	blx	r9
 800d2d6:	f10b 0b01 	add.w	fp, fp, #1
 800d2da:	f844 0b04 	str.w	r0, [r4], #4
 800d2de:	e7f4      	b.n	800d2ca <LCD_ReadRectEx+0x92>
 800d2e0:	46bb      	mov	fp, r7
 800d2e2:	45c3      	cmp	fp, r8
 800d2e4:	dc53      	bgt.n	800d38e <LCD_ReadRectEx+0x156>
 800d2e6:	4659      	mov	r1, fp
 800d2e8:	4632      	mov	r2, r6
 800d2ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d2ec:	47c8      	blx	r9
 800d2ee:	f10b 0b01 	add.w	fp, fp, #1
 800d2f2:	f824 0b02 	strh.w	r0, [r4], #2
 800d2f6:	e7f4      	b.n	800d2e2 <LCD_ReadRectEx+0xaa>
 800d2f8:	eba7 0b04 	sub.w	fp, r7, r4
 800d2fc:	eb04 010b 	add.w	r1, r4, fp
 800d300:	4541      	cmp	r1, r8
 800d302:	dc44      	bgt.n	800d38e <LCD_ReadRectEx+0x156>
 800d304:	4632      	mov	r2, r6
 800d306:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d308:	47c8      	blx	r9
 800d30a:	f804 0b01 	strb.w	r0, [r4], #1
 800d30e:	e7f5      	b.n	800d2fc <LCD_ReadRectEx+0xc4>
 800d310:	46bb      	mov	fp, r7
 800d312:	230f      	movs	r3, #15
 800d314:	45c3      	cmp	fp, r8
 800d316:	dc3a      	bgt.n	800d38e <LCD_ReadRectEx+0x156>
 800d318:	4659      	mov	r1, fp
 800d31a:	4632      	mov	r2, r6
 800d31c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d31e:	9305      	str	r3, [sp, #20]
 800d320:	47c8      	blx	r9
 800d322:	9b05      	ldr	r3, [sp, #20]
 800d324:	7821      	ldrb	r1, [r4, #0]
 800d326:	00aa      	lsls	r2, r5, #2
 800d328:	fa03 fe02 	lsl.w	lr, r3, r2
 800d32c:	f1c2 0204 	rsb	r2, r2, #4
 800d330:	ea01 010e 	and.w	r1, r1, lr
 800d334:	fa00 f202 	lsl.w	r2, r0, r2
 800d338:	430a      	orrs	r2, r1
 800d33a:	7022      	strb	r2, [r4, #0]
 800d33c:	f10b 0b01 	add.w	fp, fp, #1
 800d340:	442c      	add	r4, r5
 800d342:	f085 0501 	eor.w	r5, r5, #1
 800d346:	e7e5      	b.n	800d314 <LCD_ReadRectEx+0xdc>
 800d348:	46bb      	mov	fp, r7
 800d34a:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d34e:	45c3      	cmp	fp, r8
 800d350:	dc1d      	bgt.n	800d38e <LCD_ReadRectEx+0x156>
 800d352:	4659      	mov	r1, fp
 800d354:	4632      	mov	r2, r6
 800d356:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d358:	9305      	str	r3, [sp, #20]
 800d35a:	47c8      	blx	r9
 800d35c:	9b05      	ldr	r3, [sp, #20]
 800d35e:	7821      	ldrb	r1, [r4, #0]
 800d360:	006a      	lsls	r2, r5, #1
 800d362:	fa43 fe02 	asr.w	lr, r3, r2
 800d366:	f1c2 0206 	rsb	r2, r2, #6
 800d36a:	ea01 010e 	and.w	r1, r1, lr
 800d36e:	fa00 f202 	lsl.w	r2, r0, r2
 800d372:	3501      	adds	r5, #1
 800d374:	430a      	orrs	r2, r1
 800d376:	7022      	strb	r2, [r4, #0]
 800d378:	f025 0203 	bic.w	r2, r5, #3
 800d37c:	eb04 04a5 	add.w	r4, r4, r5, asr #2
 800d380:	f10b 0b01 	add.w	fp, fp, #1
 800d384:	4115      	asrs	r5, r2
 800d386:	e7e2      	b.n	800d34e <LCD_ReadRectEx+0x116>
 800d388:	46bb      	mov	fp, r7
 800d38a:	45c3      	cmp	fp, r8
 800d38c:	dd01      	ble.n	800d392 <LCD_ReadRectEx+0x15a>
 800d38e:	3601      	adds	r6, #1
 800d390:	e770      	b.n	800d274 <LCD_ReadRectEx+0x3c>
 800d392:	4632      	mov	r2, r6
 800d394:	4659      	mov	r1, fp
 800d396:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d398:	47c8      	blx	r9
 800d39a:	f64f 737f 	movw	r3, #65407	; 0xff7f
 800d39e:	fa43 f205 	asr.w	r2, r3, r5
 800d3a2:	7823      	ldrb	r3, [r4, #0]
 800d3a4:	4013      	ands	r3, r2
 800d3a6:	f1c5 0207 	rsb	r2, r5, #7
 800d3aa:	4090      	lsls	r0, r2
 800d3ac:	3501      	adds	r5, #1
 800d3ae:	4303      	orrs	r3, r0
 800d3b0:	7023      	strb	r3, [r4, #0]
 800d3b2:	f025 0307 	bic.w	r3, r5, #7
 800d3b6:	eb04 04e5 	add.w	r4, r4, r5, asr #3
 800d3ba:	f10b 0b01 	add.w	fp, fp, #1
 800d3be:	411d      	asrs	r5, r3
 800d3c0:	e7e3      	b.n	800d38a <LCD_ReadRectEx+0x152>
 800d3c2:	bf00      	nop
 800d3c4:	200000d8 	.word	0x200000d8

0800d3c8 <GUI_ReadRectEx>:
 800d3c8:	b4f0      	push	{r4, r5, r6, r7}
 800d3ca:	4c15      	ldr	r4, [pc, #84]	; (800d420 <GUI_ReadRectEx+0x58>)
 800d3cc:	9f04      	ldr	r7, [sp, #16]
 800d3ce:	6826      	ldr	r6, [r4, #0]
 800d3d0:	9d05      	ldr	r5, [sp, #20]
 800d3d2:	f9b6 4008 	ldrsh.w	r4, [r6, #8]
 800d3d6:	42a0      	cmp	r0, r4
 800d3d8:	bfb8      	it	lt
 800d3da:	4620      	movlt	r0, r4
 800d3dc:	f9b6 400c 	ldrsh.w	r4, [r6, #12]
 800d3e0:	42a2      	cmp	r2, r4
 800d3e2:	bfa8      	it	ge
 800d3e4:	4622      	movge	r2, r4
 800d3e6:	4290      	cmp	r0, r2
 800d3e8:	dc0b      	bgt.n	800d402 <GUI_ReadRectEx+0x3a>
 800d3ea:	f9b6 400a 	ldrsh.w	r4, [r6, #10]
 800d3ee:	42a1      	cmp	r1, r4
 800d3f0:	bfb8      	it	lt
 800d3f2:	4621      	movlt	r1, r4
 800d3f4:	f9b6 400e 	ldrsh.w	r4, [r6, #14]
 800d3f8:	42a3      	cmp	r3, r4
 800d3fa:	bfa8      	it	ge
 800d3fc:	4623      	movge	r3, r4
 800d3fe:	428b      	cmp	r3, r1
 800d400:	da04      	bge.n	800d40c <GUI_ReadRectEx+0x44>
 800d402:	bcf0      	pop	{r4, r5, r6, r7}
 800d404:	4770      	bx	lr
 800d406:	682c      	ldr	r4, [r5, #0]
 800d408:	b12c      	cbz	r4, 800d416 <GUI_ReadRectEx+0x4e>
 800d40a:	4625      	mov	r5, r4
 800d40c:	68ec      	ldr	r4, [r5, #12]
 800d40e:	6824      	ldr	r4, [r4, #0]
 800d410:	f034 0404 	bics.w	r4, r4, #4
 800d414:	d1f7      	bne.n	800d406 <GUI_ReadRectEx+0x3e>
 800d416:	9505      	str	r5, [sp, #20]
 800d418:	9704      	str	r7, [sp, #16]
 800d41a:	bcf0      	pop	{r4, r5, r6, r7}
 800d41c:	f7ff bf0c 	b.w	800d238 <LCD_ReadRectEx>
 800d420:	200000d8 	.word	0x200000d8

0800d424 <LCD_SetClipRectEx>:
 800d424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d426:	4c09      	ldr	r4, [pc, #36]	; (800d44c <LCD_SetClipRectEx+0x28>)
 800d428:	6823      	ldr	r3, [r4, #0]
 800d42a:	7c5a      	ldrb	r2, [r3, #17]
 800d42c:	4b08      	ldr	r3, [pc, #32]	; (800d450 <LCD_SetClipRectEx+0x2c>)
 800d42e:	4605      	mov	r5, r0
 800d430:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d434:	68c3      	ldr	r3, [r0, #12]
 800d436:	4669      	mov	r1, sp
 800d438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d43a:	4798      	blx	r3
 800d43c:	6820      	ldr	r0, [r4, #0]
 800d43e:	466a      	mov	r2, sp
 800d440:	4629      	mov	r1, r5
 800d442:	3008      	adds	r0, #8
 800d444:	f7f8 f829 	bl	800549a <GUI__IntersectRects>
 800d448:	b003      	add	sp, #12
 800d44a:	bd30      	pop	{r4, r5, pc}
 800d44c:	200000d8 	.word	0x200000d8
 800d450:	200089b8 	.word	0x200089b8

0800d454 <GUI__CompactPixelIndices>:
 800d454:	2a08      	cmp	r2, #8
 800d456:	b510      	push	{r4, lr}
 800d458:	f340 809f 	ble.w	800d59a <GUI__CompactPixelIndices+0x146>
 800d45c:	2a10      	cmp	r2, #16
 800d45e:	f300 809a 	bgt.w	800d596 <GUI__CompactPixelIndices+0x142>
 800d462:	4603      	mov	r3, r0
 800d464:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800d468:	f850 2b04 	ldr.w	r2, [r0], #4
 800d46c:	f823 2b02 	strh.w	r2, [r3], #2
 800d470:	428b      	cmp	r3, r1
 800d472:	d1f9      	bne.n	800d468 <GUI__CompactPixelIndices+0x14>
 800d474:	2001      	movs	r0, #1
 800d476:	bd10      	pop	{r4, pc}
 800d478:	4604      	mov	r4, r0
 800d47a:	6803      	ldr	r3, [r0, #0]
 800d47c:	2901      	cmp	r1, #1
 800d47e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 800d482:	b2db      	uxtb	r3, r3
 800d484:	d106      	bne.n	800d494 <GUI__CompactPixelIndices+0x40>
 800d486:	3004      	adds	r0, #4
 800d488:	2100      	movs	r1, #0
 800d48a:	f804 3b01 	strb.w	r3, [r4], #1
 800d48e:	2900      	cmp	r1, #0
 800d490:	d1f3      	bne.n	800d47a <GUI__CompactPixelIndices+0x26>
 800d492:	e7ef      	b.n	800d474 <GUI__CompactPixelIndices+0x20>
 800d494:	6842      	ldr	r2, [r0, #4]
 800d496:	0192      	lsls	r2, r2, #6
 800d498:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800d49c:	2902      	cmp	r1, #2
 800d49e:	ea43 0302 	orr.w	r3, r3, r2
 800d4a2:	d101      	bne.n	800d4a8 <GUI__CompactPixelIndices+0x54>
 800d4a4:	3008      	adds	r0, #8
 800d4a6:	e7ef      	b.n	800d488 <GUI__CompactPixelIndices+0x34>
 800d4a8:	6882      	ldr	r2, [r0, #8]
 800d4aa:	0152      	lsls	r2, r2, #5
 800d4ac:	f002 0220 	and.w	r2, r2, #32
 800d4b0:	2903      	cmp	r1, #3
 800d4b2:	ea43 0302 	orr.w	r3, r3, r2
 800d4b6:	d101      	bne.n	800d4bc <GUI__CompactPixelIndices+0x68>
 800d4b8:	300c      	adds	r0, #12
 800d4ba:	e7e5      	b.n	800d488 <GUI__CompactPixelIndices+0x34>
 800d4bc:	68c2      	ldr	r2, [r0, #12]
 800d4be:	0112      	lsls	r2, r2, #4
 800d4c0:	f002 0210 	and.w	r2, r2, #16
 800d4c4:	2904      	cmp	r1, #4
 800d4c6:	ea43 0302 	orr.w	r3, r3, r2
 800d4ca:	d101      	bne.n	800d4d0 <GUI__CompactPixelIndices+0x7c>
 800d4cc:	3010      	adds	r0, #16
 800d4ce:	e7db      	b.n	800d488 <GUI__CompactPixelIndices+0x34>
 800d4d0:	6902      	ldr	r2, [r0, #16]
 800d4d2:	00d2      	lsls	r2, r2, #3
 800d4d4:	f002 0208 	and.w	r2, r2, #8
 800d4d8:	2905      	cmp	r1, #5
 800d4da:	ea43 0302 	orr.w	r3, r3, r2
 800d4de:	d101      	bne.n	800d4e4 <GUI__CompactPixelIndices+0x90>
 800d4e0:	3014      	adds	r0, #20
 800d4e2:	e7d1      	b.n	800d488 <GUI__CompactPixelIndices+0x34>
 800d4e4:	6942      	ldr	r2, [r0, #20]
 800d4e6:	0092      	lsls	r2, r2, #2
 800d4e8:	f002 0204 	and.w	r2, r2, #4
 800d4ec:	2906      	cmp	r1, #6
 800d4ee:	ea43 0302 	orr.w	r3, r3, r2
 800d4f2:	d101      	bne.n	800d4f8 <GUI__CompactPixelIndices+0xa4>
 800d4f4:	3018      	adds	r0, #24
 800d4f6:	e7c7      	b.n	800d488 <GUI__CompactPixelIndices+0x34>
 800d4f8:	6982      	ldr	r2, [r0, #24]
 800d4fa:	0052      	lsls	r2, r2, #1
 800d4fc:	3907      	subs	r1, #7
 800d4fe:	f002 0202 	and.w	r2, r2, #2
 800d502:	ea43 0302 	orr.w	r3, r3, r2
 800d506:	bf1b      	ittet	ne
 800d508:	69c2      	ldrne	r2, [r0, #28]
 800d50a:	f002 0201 	andne.w	r2, r2, #1
 800d50e:	301c      	addeq	r0, #28
 800d510:	4313      	orrne	r3, r2
 800d512:	bf18      	it	ne
 800d514:	3020      	addne	r0, #32
 800d516:	e7b8      	b.n	800d48a <GUI__CompactPixelIndices+0x36>
 800d518:	4604      	mov	r4, r0
 800d51a:	6803      	ldr	r3, [r0, #0]
 800d51c:	2901      	cmp	r1, #1
 800d51e:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800d522:	b2db      	uxtb	r3, r3
 800d524:	d106      	bne.n	800d534 <GUI__CompactPixelIndices+0xe0>
 800d526:	3004      	adds	r0, #4
 800d528:	2100      	movs	r1, #0
 800d52a:	f804 3b01 	strb.w	r3, [r4], #1
 800d52e:	2900      	cmp	r1, #0
 800d530:	d1f3      	bne.n	800d51a <GUI__CompactPixelIndices+0xc6>
 800d532:	e79f      	b.n	800d474 <GUI__CompactPixelIndices+0x20>
 800d534:	6842      	ldr	r2, [r0, #4]
 800d536:	0112      	lsls	r2, r2, #4
 800d538:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800d53c:	2902      	cmp	r1, #2
 800d53e:	ea43 0302 	orr.w	r3, r3, r2
 800d542:	d101      	bne.n	800d548 <GUI__CompactPixelIndices+0xf4>
 800d544:	3008      	adds	r0, #8
 800d546:	e7ef      	b.n	800d528 <GUI__CompactPixelIndices+0xd4>
 800d548:	6882      	ldr	r2, [r0, #8]
 800d54a:	0092      	lsls	r2, r2, #2
 800d54c:	f002 020c 	and.w	r2, r2, #12
 800d550:	2903      	cmp	r1, #3
 800d552:	ea43 0302 	orr.w	r3, r3, r2
 800d556:	d101      	bne.n	800d55c <GUI__CompactPixelIndices+0x108>
 800d558:	300c      	adds	r0, #12
 800d55a:	e7e5      	b.n	800d528 <GUI__CompactPixelIndices+0xd4>
 800d55c:	68c2      	ldr	r2, [r0, #12]
 800d55e:	f002 0203 	and.w	r2, r2, #3
 800d562:	4313      	orrs	r3, r2
 800d564:	3904      	subs	r1, #4
 800d566:	3010      	adds	r0, #16
 800d568:	e7df      	b.n	800d52a <GUI__CompactPixelIndices+0xd6>
 800d56a:	4604      	mov	r4, r0
 800d56c:	2901      	cmp	r1, #1
 800d56e:	6803      	ldr	r3, [r0, #0]
 800d570:	bf18      	it	ne
 800d572:	6842      	ldrne	r2, [r0, #4]
 800d574:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	bf1b      	ittet	ne
 800d57c:	f002 020f 	andne.w	r2, r2, #15
 800d580:	4313      	orrne	r3, r2
 800d582:	2100      	moveq	r1, #0
 800d584:	3902      	subne	r1, #2
 800d586:	bf0c      	ite	eq
 800d588:	3004      	addeq	r0, #4
 800d58a:	3008      	addne	r0, #8
 800d58c:	f804 3b01 	strb.w	r3, [r4], #1
 800d590:	2900      	cmp	r1, #0
 800d592:	d1eb      	bne.n	800d56c <GUI__CompactPixelIndices+0x118>
 800d594:	e76e      	b.n	800d474 <GUI__CompactPixelIndices+0x20>
 800d596:	2000      	movs	r0, #0
 800d598:	bd10      	pop	{r4, pc}
 800d59a:	2a02      	cmp	r2, #2
 800d59c:	d0bc      	beq.n	800d518 <GUI__CompactPixelIndices+0xc4>
 800d59e:	2a04      	cmp	r2, #4
 800d5a0:	d0e3      	beq.n	800d56a <GUI__CompactPixelIndices+0x116>
 800d5a2:	2a01      	cmp	r2, #1
 800d5a4:	f43f af68 	beq.w	800d478 <GUI__CompactPixelIndices+0x24>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	4401      	add	r1, r0
 800d5ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800d5b0:	f803 2b01 	strb.w	r2, [r3], #1
 800d5b4:	4299      	cmp	r1, r3
 800d5b6:	d1f9      	bne.n	800d5ac <GUI__CompactPixelIndices+0x158>
 800d5b8:	e75c      	b.n	800d474 <GUI__CompactPixelIndices+0x20>
	...

0800d5bc <GUI__ConvertColor2Index>:
 800d5bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c0:	9f08      	ldr	r7, [sp, #32]
 800d5c2:	f8d3 8000 	ldr.w	r8, [r3]
 800d5c6:	2f00      	cmp	r7, #0
 800d5c8:	bf08      	it	eq
 800d5ca:	4607      	moveq	r7, r0
 800d5cc:	2a08      	cmp	r2, #8
 800d5ce:	4604      	mov	r4, r0
 800d5d0:	460d      	mov	r5, r1
 800d5d2:	f340 80aa 	ble.w	800d72a <GUI__ConvertColor2Index+0x16e>
 800d5d6:	2a10      	cmp	r2, #16
 800d5d8:	f340 80be 	ble.w	800d758 <GUI__ConvertColor2Index+0x19c>
 800d5dc:	2000      	movs	r0, #0
 800d5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5e2:	2302      	movs	r3, #2
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	4639      	mov	r1, r7
 800d5e8:	47b0      	blx	r6
 800d5ea:	e0c1      	b.n	800d770 <GUI__ConvertColor2Index+0x1b4>
 800d5ec:	6820      	ldr	r0, [r4, #0]
 800d5ee:	47c0      	blx	r8
 800d5f0:	2d01      	cmp	r5, #1
 800d5f2:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 800d5f6:	b2c6      	uxtb	r6, r0
 800d5f8:	d106      	bne.n	800d608 <GUI__ConvertColor2Index+0x4c>
 800d5fa:	3404      	adds	r4, #4
 800d5fc:	2500      	movs	r5, #0
 800d5fe:	f807 6b01 	strb.w	r6, [r7], #1
 800d602:	2d00      	cmp	r5, #0
 800d604:	d1f2      	bne.n	800d5ec <GUI__ConvertColor2Index+0x30>
 800d606:	e0b3      	b.n	800d770 <GUI__ConvertColor2Index+0x1b4>
 800d608:	6860      	ldr	r0, [r4, #4]
 800d60a:	47c0      	blx	r8
 800d60c:	2d02      	cmp	r5, #2
 800d60e:	ea46 1680 	orr.w	r6, r6, r0, lsl #6
 800d612:	b2f6      	uxtb	r6, r6
 800d614:	d101      	bne.n	800d61a <GUI__ConvertColor2Index+0x5e>
 800d616:	3408      	adds	r4, #8
 800d618:	e7f0      	b.n	800d5fc <GUI__ConvertColor2Index+0x40>
 800d61a:	68a0      	ldr	r0, [r4, #8]
 800d61c:	47c0      	blx	r8
 800d61e:	2d03      	cmp	r5, #3
 800d620:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
 800d624:	b2f6      	uxtb	r6, r6
 800d626:	d101      	bne.n	800d62c <GUI__ConvertColor2Index+0x70>
 800d628:	340c      	adds	r4, #12
 800d62a:	e7e7      	b.n	800d5fc <GUI__ConvertColor2Index+0x40>
 800d62c:	68e0      	ldr	r0, [r4, #12]
 800d62e:	47c0      	blx	r8
 800d630:	2d04      	cmp	r5, #4
 800d632:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
 800d636:	b2f6      	uxtb	r6, r6
 800d638:	d101      	bne.n	800d63e <GUI__ConvertColor2Index+0x82>
 800d63a:	3410      	adds	r4, #16
 800d63c:	e7de      	b.n	800d5fc <GUI__ConvertColor2Index+0x40>
 800d63e:	6920      	ldr	r0, [r4, #16]
 800d640:	47c0      	blx	r8
 800d642:	2d05      	cmp	r5, #5
 800d644:	ea46 06c0 	orr.w	r6, r6, r0, lsl #3
 800d648:	b2f6      	uxtb	r6, r6
 800d64a:	d101      	bne.n	800d650 <GUI__ConvertColor2Index+0x94>
 800d64c:	3414      	adds	r4, #20
 800d64e:	e7d5      	b.n	800d5fc <GUI__ConvertColor2Index+0x40>
 800d650:	6960      	ldr	r0, [r4, #20]
 800d652:	47c0      	blx	r8
 800d654:	2d06      	cmp	r5, #6
 800d656:	ea46 0680 	orr.w	r6, r6, r0, lsl #2
 800d65a:	b2f6      	uxtb	r6, r6
 800d65c:	d101      	bne.n	800d662 <GUI__ConvertColor2Index+0xa6>
 800d65e:	3418      	adds	r4, #24
 800d660:	e7cc      	b.n	800d5fc <GUI__ConvertColor2Index+0x40>
 800d662:	69a0      	ldr	r0, [r4, #24]
 800d664:	47c0      	blx	r8
 800d666:	2d07      	cmp	r5, #7
 800d668:	ea46 0640 	orr.w	r6, r6, r0, lsl #1
 800d66c:	b2f6      	uxtb	r6, r6
 800d66e:	d101      	bne.n	800d674 <GUI__ConvertColor2Index+0xb8>
 800d670:	341c      	adds	r4, #28
 800d672:	e7c3      	b.n	800d5fc <GUI__ConvertColor2Index+0x40>
 800d674:	69e0      	ldr	r0, [r4, #28]
 800d676:	47c0      	blx	r8
 800d678:	f104 0920 	add.w	r9, r4, #32
 800d67c:	4306      	orrs	r6, r0
 800d67e:	b2f6      	uxtb	r6, r6
 800d680:	3d08      	subs	r5, #8
 800d682:	464c      	mov	r4, r9
 800d684:	e7bb      	b.n	800d5fe <GUI__ConvertColor2Index+0x42>
 800d686:	6820      	ldr	r0, [r4, #0]
 800d688:	47c0      	blx	r8
 800d68a:	2d01      	cmp	r5, #1
 800d68c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 800d690:	b2c6      	uxtb	r6, r0
 800d692:	d106      	bne.n	800d6a2 <GUI__ConvertColor2Index+0xe6>
 800d694:	3404      	adds	r4, #4
 800d696:	2500      	movs	r5, #0
 800d698:	f807 6b01 	strb.w	r6, [r7], #1
 800d69c:	2d00      	cmp	r5, #0
 800d69e:	d1f2      	bne.n	800d686 <GUI__ConvertColor2Index+0xca>
 800d6a0:	e066      	b.n	800d770 <GUI__ConvertColor2Index+0x1b4>
 800d6a2:	6860      	ldr	r0, [r4, #4]
 800d6a4:	47c0      	blx	r8
 800d6a6:	2d02      	cmp	r5, #2
 800d6a8:	ea46 1600 	orr.w	r6, r6, r0, lsl #4
 800d6ac:	b2f6      	uxtb	r6, r6
 800d6ae:	d101      	bne.n	800d6b4 <GUI__ConvertColor2Index+0xf8>
 800d6b0:	3408      	adds	r4, #8
 800d6b2:	e7f0      	b.n	800d696 <GUI__ConvertColor2Index+0xda>
 800d6b4:	68a0      	ldr	r0, [r4, #8]
 800d6b6:	47c0      	blx	r8
 800d6b8:	2d03      	cmp	r5, #3
 800d6ba:	ea46 0680 	orr.w	r6, r6, r0, lsl #2
 800d6be:	b2f6      	uxtb	r6, r6
 800d6c0:	d101      	bne.n	800d6c6 <GUI__ConvertColor2Index+0x10a>
 800d6c2:	340c      	adds	r4, #12
 800d6c4:	e7e7      	b.n	800d696 <GUI__ConvertColor2Index+0xda>
 800d6c6:	68e0      	ldr	r0, [r4, #12]
 800d6c8:	47c0      	blx	r8
 800d6ca:	f104 0910 	add.w	r9, r4, #16
 800d6ce:	4306      	orrs	r6, r0
 800d6d0:	b2f6      	uxtb	r6, r6
 800d6d2:	3d04      	subs	r5, #4
 800d6d4:	464c      	mov	r4, r9
 800d6d6:	e7df      	b.n	800d698 <GUI__ConvertColor2Index+0xdc>
 800d6d8:	6820      	ldr	r0, [r4, #0]
 800d6da:	47c0      	blx	r8
 800d6dc:	2d01      	cmp	r5, #1
 800d6de:	ea4f 1000 	mov.w	r0, r0, lsl #4
 800d6e2:	b2c6      	uxtb	r6, r0
 800d6e4:	d106      	bne.n	800d6f4 <GUI__ConvertColor2Index+0x138>
 800d6e6:	3404      	adds	r4, #4
 800d6e8:	2500      	movs	r5, #0
 800d6ea:	f807 6b01 	strb.w	r6, [r7], #1
 800d6ee:	2d00      	cmp	r5, #0
 800d6f0:	d1f2      	bne.n	800d6d8 <GUI__ConvertColor2Index+0x11c>
 800d6f2:	e03d      	b.n	800d770 <GUI__ConvertColor2Index+0x1b4>
 800d6f4:	6860      	ldr	r0, [r4, #4]
 800d6f6:	47c0      	blx	r8
 800d6f8:	f104 0908 	add.w	r9, r4, #8
 800d6fc:	4306      	orrs	r6, r0
 800d6fe:	b2f6      	uxtb	r6, r6
 800d700:	3d02      	subs	r5, #2
 800d702:	464c      	mov	r4, r9
 800d704:	e7f1      	b.n	800d6ea <GUI__ConvertColor2Index+0x12e>
 800d706:	691e      	ldr	r6, [r3, #16]
 800d708:	b126      	cbz	r6, 800d714 <GUI__ConvertColor2Index+0x158>
 800d70a:	2301      	movs	r3, #1
 800d70c:	462a      	mov	r2, r5
 800d70e:	4639      	mov	r1, r7
 800d710:	4620      	mov	r0, r4
 800d712:	e769      	b.n	800d5e8 <GUI__ConvertColor2Index+0x2c>
 800d714:	1e7e      	subs	r6, r7, #1
 800d716:	f854 0b04 	ldr.w	r0, [r4], #4
 800d71a:	47c0      	blx	r8
 800d71c:	f806 0f01 	strb.w	r0, [r6, #1]!
 800d720:	43f3      	mvns	r3, r6
 800d722:	442b      	add	r3, r5
 800d724:	42df      	cmn	r7, r3
 800d726:	d1f6      	bne.n	800d716 <GUI__ConvertColor2Index+0x15a>
 800d728:	e022      	b.n	800d770 <GUI__ConvertColor2Index+0x1b4>
 800d72a:	3a01      	subs	r2, #1
 800d72c:	2a07      	cmp	r2, #7
 800d72e:	d81f      	bhi.n	800d770 <GUI__ConvertColor2Index+0x1b4>
 800d730:	a101      	add	r1, pc, #4	; (adr r1, 800d738 <GUI__ConvertColor2Index+0x17c>)
 800d732:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d736:	bf00      	nop
 800d738:	0800d5ed 	.word	0x0800d5ed
 800d73c:	0800d687 	.word	0x0800d687
 800d740:	0800d771 	.word	0x0800d771
 800d744:	0800d6d9 	.word	0x0800d6d9
 800d748:	0800d771 	.word	0x0800d771
 800d74c:	0800d771 	.word	0x0800d771
 800d750:	0800d771 	.word	0x0800d771
 800d754:	0800d707 	.word	0x0800d707
 800d758:	691e      	ldr	r6, [r3, #16]
 800d75a:	2e00      	cmp	r6, #0
 800d75c:	f47f af41 	bne.w	800d5e2 <GUI__ConvertColor2Index+0x26>
 800d760:	3f02      	subs	r7, #2
 800d762:	f854 0b04 	ldr.w	r0, [r4], #4
 800d766:	47c0      	blx	r8
 800d768:	3d01      	subs	r5, #1
 800d76a:	f827 0f02 	strh.w	r0, [r7, #2]!
 800d76e:	d1f8      	bne.n	800d762 <GUI__ConvertColor2Index+0x1a6>
 800d770:	2001      	movs	r0, #1
 800d772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d776:	bf00      	nop

0800d778 <GUI__CompactPixelIndicesEx>:
 800d778:	b513      	push	{r0, r1, r4, lr}
 800d77a:	2400      	movs	r4, #0
 800d77c:	9400      	str	r4, [sp, #0]
 800d77e:	f7ff ff1d 	bl	800d5bc <GUI__ConvertColor2Index>
 800d782:	b002      	add	sp, #8
 800d784:	bd10      	pop	{r4, pc}
	...

0800d788 <GUI__AlphaPreserveTrans>:
 800d788:	b510      	push	{r4, lr}
 800d78a:	4b07      	ldr	r3, [pc, #28]	; (800d7a8 <GUI__AlphaPreserveTrans+0x20>)
 800d78c:	781c      	ldrb	r4, [r3, #0]
 800d78e:	b130      	cbz	r0, 800d79e <GUI__AlphaPreserveTrans+0x16>
 800d790:	2201      	movs	r2, #1
 800d792:	701a      	strb	r2, [r3, #0]
 800d794:	2000      	movs	r0, #0
 800d796:	f7ff fd47 	bl	800d228 <LCD_AA_SetOrMask>
 800d79a:	4620      	mov	r0, r4
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	7018      	strb	r0, [r3, #0]
 800d7a0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800d7a4:	e7f7      	b.n	800d796 <GUI__AlphaPreserveTrans+0xe>
 800d7a6:	bf00      	nop
 800d7a8:	200089a0 	.word	0x200089a0

0800d7ac <_Color2Index_M8888I>:
 800d7ac:	4770      	bx	lr

0800d7ae <_GetIndexMask_M8888I>:
 800d7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7b2:	4770      	bx	lr

0800d7b4 <_Color2IndexBulk_M8888I>:
 800d7b4:	b510      	push	{r4, lr}
 800d7b6:	f850 4b04 	ldr.w	r4, [r0], #4
 800d7ba:	600c      	str	r4, [r1, #0]
 800d7bc:	3a01      	subs	r2, #1
 800d7be:	4419      	add	r1, r3
 800d7c0:	d1f9      	bne.n	800d7b6 <_Color2IndexBulk_M8888I+0x2>
 800d7c2:	bd10      	pop	{r4, pc}

0800d7c4 <_Index2ColorBulk_M8888I>:
 800d7c4:	b510      	push	{r4, lr}
 800d7c6:	6804      	ldr	r4, [r0, #0]
 800d7c8:	f841 4b04 	str.w	r4, [r1], #4
 800d7cc:	3a01      	subs	r2, #1
 800d7ce:	4418      	add	r0, r3
 800d7d0:	d1f9      	bne.n	800d7c6 <_Index2ColorBulk_M8888I+0x2>
 800d7d2:	bd10      	pop	{r4, pc}

0800d7d4 <_GetDevData>:
 800d7d4:	2901      	cmp	r1, #1
 800d7d6:	4802      	ldr	r0, [pc, #8]	; (800d7e0 <_GetDevData+0xc>)
 800d7d8:	bf18      	it	ne
 800d7da:	2000      	movne	r0, #0
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	08010d30 	.word	0x08010d30

0800d7e4 <_GetDevFunc>:
 800d7e4:	2916      	cmp	r1, #22
 800d7e6:	4802      	ldr	r0, [pc, #8]	; (800d7f0 <_GetDevFunc+0xc>)
 800d7e8:	bf18      	it	ne
 800d7ea:	2000      	movne	r0, #0
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	0800e399 	.word	0x0800e399

0800d7f4 <_GetDevProp>:
 800d7f4:	2908      	cmp	r1, #8
 800d7f6:	bf0c      	ite	eq
 800d7f8:	2020      	moveq	r0, #32
 800d7fa:	2000      	movne	r0, #0
 800d7fc:	4770      	bx	lr

0800d7fe <_SetOrg>:
 800d7fe:	6800      	ldr	r0, [r0, #0]
 800d800:	68c3      	ldr	r3, [r0, #12]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	4718      	bx	r3

0800d806 <_GetRect>:
 800d806:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d808:	6880      	ldr	r0, [r0, #8]
 800d80a:	460c      	mov	r4, r1
 800d80c:	f7f7 ffde 	bl	80057cc <GUI_ALLOC_LockH>
 800d810:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800d814:	8905      	ldrh	r5, [r0, #8]
 800d816:	8022      	strh	r2, [r4, #0]
 800d818:	442a      	add	r2, r5
 800d81a:	3a01      	subs	r2, #1
 800d81c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 800d820:	80a2      	strh	r2, [r4, #4]
 800d822:	a902      	add	r1, sp, #8
 800d824:	8942      	ldrh	r2, [r0, #10]
 800d826:	f841 0d04 	str.w	r0, [r1, #-4]!
 800d82a:	8063      	strh	r3, [r4, #2]
 800d82c:	4413      	add	r3, r2
 800d82e:	3b01      	subs	r3, #1
 800d830:	80e3      	strh	r3, [r4, #6]
 800d832:	4608      	mov	r0, r1
 800d834:	f7f7 ffd8 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d838:	b003      	add	sp, #12
 800d83a:	bd30      	pop	{r4, r5, pc}

0800d83c <_XY2PTR>:
 800d83c:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <_XY2PTR+0x3c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d842:	4605      	mov	r5, r0
 800d844:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d846:	460c      	mov	r4, r1
 800d848:	f7f7 ffc0 	bl	80057cc <GUI_ALLOC_LockH>
 800d84c:	4603      	mov	r3, r0
 800d84e:	a802      	add	r0, sp, #8
 800d850:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800d854:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800d858:	f840 3d04 	str.w	r3, [r0, #-4]!
 800d85c:	1aad      	subs	r5, r5, r2
 800d85e:	1a64      	subs	r4, r4, r1
 800d860:	68d9      	ldr	r1, [r3, #12]
 800d862:	00ad      	lsls	r5, r5, #2
 800d864:	fb01 5404 	mla	r4, r1, r4, r5
 800d868:	3418      	adds	r4, #24
 800d86a:	441c      	add	r4, r3
 800d86c:	f7f7 ffbc 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d870:	4620      	mov	r0, r4
 800d872:	b003      	add	sp, #12
 800d874:	bd30      	pop	{r4, r5, pc}
 800d876:	bf00      	nop
 800d878:	200000d8 	.word	0x200000d8

0800d87c <_GetPixelIndex>:
 800d87c:	b508      	push	{r3, lr}
 800d87e:	4608      	mov	r0, r1
 800d880:	4611      	mov	r1, r2
 800d882:	f7ff ffdb 	bl	800d83c <_XY2PTR>
 800d886:	6800      	ldr	r0, [r0, #0]
 800d888:	bd08      	pop	{r3, pc}
	...

0800d88c <_XorPixel>:
 800d88c:	4b15      	ldr	r3, [pc, #84]	; (800d8e4 <_XorPixel+0x58>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d892:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d894:	4616      	mov	r6, r2
 800d896:	460d      	mov	r5, r1
 800d898:	f7f7 ff98 	bl	80057cc <GUI_ALLOC_LockH>
 800d89c:	4631      	mov	r1, r6
 800d89e:	9000      	str	r0, [sp, #0]
 800d8a0:	4628      	mov	r0, r5
 800d8a2:	f7ff ffcb 	bl	800d83c <_XY2PTR>
 800d8a6:	9b00      	ldr	r3, [sp, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	4798      	blx	r3
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	4058      	eors	r0, r3
 800d8b6:	9b00      	ldr	r3, [sp, #0]
 800d8b8:	6020      	str	r0, [r4, #0]
 800d8ba:	6958      	ldr	r0, [r3, #20]
 800d8bc:	b160      	cbz	r0, 800d8d8 <_XorPixel+0x4c>
 800d8be:	f7f7 ff85 	bl	80057cc <GUI_ALLOC_LockH>
 800d8c2:	ac02      	add	r4, sp, #8
 800d8c4:	6883      	ldr	r3, [r0, #8]
 800d8c6:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4632      	mov	r2, r6
 800d8ce:	4629      	mov	r1, r5
 800d8d0:	4798      	blx	r3
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f7f7 ff88 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d8d8:	4668      	mov	r0, sp
 800d8da:	f7f7 ff85 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d8de:	b002      	add	sp, #8
 800d8e0:	bd70      	pop	{r4, r5, r6, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200000d8 	.word	0x200000d8

0800d8e8 <_SetPixelIndex>:
 800d8e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8ea:	461c      	mov	r4, r3
 800d8ec:	4b10      	ldr	r3, [pc, #64]	; (800d930 <_SetPixelIndex+0x48>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d8f2:	460d      	mov	r5, r1
 800d8f4:	4616      	mov	r6, r2
 800d8f6:	f7f7 ff69 	bl	80057cc <GUI_ALLOC_LockH>
 800d8fa:	4631      	mov	r1, r6
 800d8fc:	9000      	str	r0, [sp, #0]
 800d8fe:	4628      	mov	r0, r5
 800d900:	f7ff ff9c 	bl	800d83c <_XY2PTR>
 800d904:	9b00      	ldr	r3, [sp, #0]
 800d906:	6004      	str	r4, [r0, #0]
 800d908:	6958      	ldr	r0, [r3, #20]
 800d90a:	b160      	cbz	r0, 800d926 <_SetPixelIndex+0x3e>
 800d90c:	f7f7 ff5e 	bl	80057cc <GUI_ALLOC_LockH>
 800d910:	ac02      	add	r4, sp, #8
 800d912:	6883      	ldr	r3, [r0, #8]
 800d914:	f844 0d04 	str.w	r0, [r4, #-4]!
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4632      	mov	r2, r6
 800d91c:	4629      	mov	r1, r5
 800d91e:	4798      	blx	r3
 800d920:	4620      	mov	r0, r4
 800d922:	f7f7 ff61 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d926:	4668      	mov	r0, sp
 800d928:	f7f7 ff5e 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d92c:	b002      	add	sp, #8
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	200000d8 	.word	0x200000d8

0800d934 <_DrawVLine>:
 800d934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d938:	4f29      	ldr	r7, [pc, #164]	; (800d9e0 <_DrawVLine+0xac>)
 800d93a:	461e      	mov	r6, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d940:	4688      	mov	r8, r1
 800d942:	4615      	mov	r5, r2
 800d944:	f7f7 ff42 	bl	80057cc <GUI_ALLOC_LockH>
 800d948:	9000      	str	r0, [sp, #0]
 800d94a:	6940      	ldr	r0, [r0, #20]
 800d94c:	b108      	cbz	r0, 800d952 <_DrawVLine+0x1e>
 800d94e:	f7f7 ff3d 	bl	80057cc <GUI_ALLOC_LockH>
 800d952:	9001      	str	r0, [sp, #4]
 800d954:	4629      	mov	r1, r5
 800d956:	4640      	mov	r0, r8
 800d958:	f7ff ff70 	bl	800d83c <_XY2PTR>
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	9a00      	ldr	r2, [sp, #0]
 800d960:	7c19      	ldrb	r1, [r3, #16]
 800d962:	07c9      	lsls	r1, r1, #31
 800d964:	4604      	mov	r4, r0
 800d966:	d51c      	bpl.n	800d9a2 <_DrawVLine+0x6e>
 800d968:	6813      	ldr	r3, [r2, #0]
 800d96a:	691b      	ldr	r3, [r3, #16]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	4798      	blx	r3
 800d970:	4607      	mov	r7, r0
 800d972:	9801      	ldr	r0, [sp, #4]
 800d974:	b120      	cbz	r0, 800d980 <_DrawVLine+0x4c>
 800d976:	6883      	ldr	r3, [r0, #8]
 800d978:	462a      	mov	r2, r5
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4641      	mov	r1, r8
 800d97e:	4798      	blx	r3
 800d980:	6823      	ldr	r3, [r4, #0]
 800d982:	407b      	eors	r3, r7
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	9b00      	ldr	r3, [sp, #0]
 800d988:	3501      	adds	r5, #1
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	42b5      	cmp	r5, r6
 800d98e:	441c      	add	r4, r3
 800d990:	ddef      	ble.n	800d972 <_DrawVLine+0x3e>
 800d992:	4668      	mov	r0, sp
 800d994:	f7f7 ff28 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d998:	9b01      	ldr	r3, [sp, #4]
 800d99a:	b9eb      	cbnz	r3, 800d9d8 <_DrawVLine+0xa4>
 800d99c:	b003      	add	sp, #12
 800d99e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a4:	68d7      	ldr	r7, [r2, #12]
 800d9a6:	f8d3 9000 	ldr.w	r9, [r3]
 800d9aa:	9b01      	ldr	r3, [sp, #4]
 800d9ac:	b163      	cbz	r3, 800d9c8 <_DrawVLine+0x94>
 800d9ae:	9801      	ldr	r0, [sp, #4]
 800d9b0:	6883      	ldr	r3, [r0, #8]
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4641      	mov	r1, r8
 800d9b8:	3501      	adds	r5, #1
 800d9ba:	4798      	blx	r3
 800d9bc:	42ae      	cmp	r6, r5
 800d9be:	f8c4 9000 	str.w	r9, [r4]
 800d9c2:	443c      	add	r4, r7
 800d9c4:	daf3      	bge.n	800d9ae <_DrawVLine+0x7a>
 800d9c6:	e7e4      	b.n	800d992 <_DrawVLine+0x5e>
 800d9c8:	1b75      	subs	r5, r6, r5
 800d9ca:	3501      	adds	r5, #1
 800d9cc:	3d01      	subs	r5, #1
 800d9ce:	f8c4 9000 	str.w	r9, [r4]
 800d9d2:	443c      	add	r4, r7
 800d9d4:	d1fa      	bne.n	800d9cc <_DrawVLine+0x98>
 800d9d6:	e7dc      	b.n	800d992 <_DrawVLine+0x5e>
 800d9d8:	a801      	add	r0, sp, #4
 800d9da:	f7f7 ff05 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800d9de:	e7dd      	b.n	800d99c <_DrawVLine+0x68>
 800d9e0:	200000d8 	.word	0x200000d8

0800d9e4 <_FillRect>:
 800d9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9e8:	4e29      	ldr	r6, [pc, #164]	; (800da90 <_FillRect+0xac>)
 800d9ea:	461c      	mov	r4, r3
 800d9ec:	6833      	ldr	r3, [r6, #0]
 800d9ee:	b085      	sub	sp, #20
 800d9f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800d9f2:	4689      	mov	r9, r1
 800d9f4:	4615      	mov	r5, r2
 800d9f6:	f7f7 fee9 	bl	80057cc <GUI_ALLOC_LockH>
 800d9fa:	4629      	mov	r1, r5
 800d9fc:	9002      	str	r0, [sp, #8]
 800d9fe:	4648      	mov	r0, r9
 800da00:	f7ff ff1c 	bl	800d83c <_XY2PTR>
 800da04:	9b02      	ldr	r3, [sp, #8]
 800da06:	6832      	ldr	r2, [r6, #0]
 800da08:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 800da0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800da0e:	4607      	mov	r7, r0
 800da10:	6958      	ldr	r0, [r3, #20]
 800da12:	f8d2 b000 	ldr.w	fp, [r2]
 800da16:	eba4 0409 	sub.w	r4, r4, r9
 800da1a:	3401      	adds	r4, #1
 800da1c:	b188      	cbz	r0, 800da42 <_FillRect+0x5e>
 800da1e:	f7f7 fed5 	bl	80057cc <GUI_ALLOC_LockH>
 800da22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da24:	f10d 0810 	add.w	r8, sp, #16
 800da28:	1b5b      	subs	r3, r3, r5
 800da2a:	f848 0d04 	str.w	r0, [r8, #-4]!
 800da2e:	3301      	adds	r3, #1
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	462a      	mov	r2, r5
 800da34:	4623      	mov	r3, r4
 800da36:	4649      	mov	r1, r9
 800da38:	f7fe fed6 	bl	800c7e8 <GUI_USAGE_AddRect>
 800da3c:	4640      	mov	r0, r8
 800da3e:	f7f7 fed3 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800da42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da44:	429d      	cmp	r5, r3
 800da46:	dd05      	ble.n	800da54 <_FillRect+0x70>
 800da48:	a802      	add	r0, sp, #8
 800da4a:	f7f7 fecd 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800da4e:	b005      	add	sp, #20
 800da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da54:	6833      	ldr	r3, [r6, #0]
 800da56:	7c1b      	ldrb	r3, [r3, #16]
 800da58:	07db      	lsls	r3, r3, #31
 800da5a:	d510      	bpl.n	800da7e <_FillRect+0x9a>
 800da5c:	9b02      	ldr	r3, [sp, #8]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	691b      	ldr	r3, [r3, #16]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	4798      	blx	r3
 800da66:	463a      	mov	r2, r7
 800da68:	4623      	mov	r3, r4
 800da6a:	6811      	ldr	r1, [r2, #0]
 800da6c:	3b01      	subs	r3, #1
 800da6e:	ea81 0100 	eor.w	r1, r1, r0
 800da72:	f842 1b04 	str.w	r1, [r2], #4
 800da76:	d1f8      	bne.n	800da6a <_FillRect+0x86>
 800da78:	4457      	add	r7, sl
 800da7a:	3501      	adds	r5, #1
 800da7c:	e7e1      	b.n	800da42 <_FillRect+0x5e>
 800da7e:	2c00      	cmp	r4, #0
 800da80:	ddfa      	ble.n	800da78 <_FillRect+0x94>
 800da82:	4623      	mov	r3, r4
 800da84:	463a      	mov	r2, r7
 800da86:	3b01      	subs	r3, #1
 800da88:	f842 bb04 	str.w	fp, [r2], #4
 800da8c:	d1fb      	bne.n	800da86 <_FillRect+0xa2>
 800da8e:	e7f3      	b.n	800da78 <_FillRect+0x94>
 800da90:	200000d8 	.word	0x200000d8

0800da94 <_DrawHLine>:
 800da94:	b507      	push	{r0, r1, r2, lr}
 800da96:	9200      	str	r2, [sp, #0]
 800da98:	f7ff ffa4 	bl	800d9e4 <_FillRect>
 800da9c:	b003      	add	sp, #12
 800da9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800daa4 <_DrawBitmap>:
 800daa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daa8:	4d97      	ldr	r5, [pc, #604]	; (800dd08 <_DrawBitmap+0x264>)
 800daaa:	b091      	sub	sp, #68	; 0x44
 800daac:	460e      	mov	r6, r1
 800daae:	9302      	str	r3, [sp, #8]
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	9005      	str	r0, [sp, #20]
 800dab4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800dab6:	9206      	str	r2, [sp, #24]
 800dab8:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800daba:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 800dabe:	2800      	cmp	r0, #0
 800dac0:	d035      	beq.n	800db2e <_DrawBitmap+0x8a>
 800dac2:	f7f7 fe83 	bl	80057cc <GUI_ALLOC_LockH>
 800dac6:	900e      	str	r0, [sp, #56]	; 0x38
 800dac8:	6940      	ldr	r0, [r0, #20]
 800daca:	b108      	cbz	r0, 800dad0 <_DrawBitmap+0x2c>
 800dacc:	f7f7 fe7e 	bl	80057cc <GUI_ALLOC_LockH>
 800dad0:	900f      	str	r0, [sp, #60]	; 0x3c
 800dad2:	a810      	add	r0, sp, #64	; 0x40
 800dad4:	f850 3d08 	ldr.w	r3, [r0, #-8]!
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	9308      	str	r3, [sp, #32]
 800dadc:	f7f7 fe84 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800dae0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dae2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800dae4:	18f3      	adds	r3, r6, r3
 800dae6:	9303      	str	r3, [sp, #12]
 800dae8:	b150      	cbz	r0, 800db00 <_DrawBitmap+0x5c>
 800daea:	682b      	ldr	r3, [r5, #0]
 800daec:	7c1b      	ldrb	r3, [r3, #16]
 800daee:	079d      	lsls	r5, r3, #30
 800daf0:	d406      	bmi.n	800db00 <_DrawBitmap+0x5c>
 800daf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	9a06      	ldr	r2, [sp, #24]
 800daf8:	9b02      	ldr	r3, [sp, #8]
 800dafa:	9903      	ldr	r1, [sp, #12]
 800dafc:	f7fe fe74 	bl	800c7e8 <GUI_USAGE_AddRect>
 800db00:	9906      	ldr	r1, [sp, #24]
 800db02:	9803      	ldr	r0, [sp, #12]
 800db04:	f7ff fe9a 	bl	800d83c <_XY2PTR>
 800db08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db0a:	2b17      	cmp	r3, #23
 800db0c:	4605      	mov	r5, r0
 800db0e:	dd6a      	ble.n	800dbe6 <_DrawBitmap+0x142>
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 800dd10 <_DrawBitmap+0x26c>
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	9307      	str	r3, [sp, #28]
 800db1a:	f04f 0b00 	mov.w	fp, #0
 800db1e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800db20:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800db22:	459b      	cmp	fp, r3
 800db24:	db06      	blt.n	800db34 <_DrawBitmap+0x90>
 800db26:	b110      	cbz	r0, 800db2e <_DrawBitmap+0x8a>
 800db28:	a80f      	add	r0, sp, #60	; 0x3c
 800db2a:	f7f7 fe5d 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800db2e:	b011      	add	sp, #68	; 0x44
 800db30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db34:	b130      	cbz	r0, 800db44 <_DrawBitmap+0xa0>
 800db36:	6883      	ldr	r3, [r0, #8]
 800db38:	9a06      	ldr	r2, [sp, #24]
 800db3a:	685e      	ldr	r6, [r3, #4]
 800db3c:	9903      	ldr	r1, [sp, #12]
 800db3e:	9b02      	ldr	r3, [sp, #8]
 800db40:	445a      	add	r2, fp
 800db42:	47b0      	blx	r6
 800db44:	9b05      	ldr	r3, [sp, #20]
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	b162      	cbz	r2, 800db66 <_DrawBitmap+0xc2>
 800db4c:	f8d9 3000 	ldr.w	r3, [r9]
 800db50:	9a07      	ldr	r2, [sp, #28]
 800db52:	4621      	mov	r1, r4
 800db54:	4628      	mov	r0, r5
 800db56:	4798      	blx	r3
 800db58:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800db5a:	441c      	add	r4, r3
 800db5c:	9b08      	ldr	r3, [sp, #32]
 800db5e:	f10b 0b01 	add.w	fp, fp, #1
 800db62:	441d      	add	r5, r3
 800db64:	e7db      	b.n	800db1e <_DrawBitmap+0x7a>
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800db6c:	4798      	blx	r3
 800db6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800db72:	0e03      	lsrs	r3, r0, #24
 800db74:	9304      	str	r3, [sp, #16]
 800db76:	462f      	mov	r7, r5
 800db78:	4626      	mov	r6, r4
 800db7a:	4642      	mov	r2, r8
 800db7c:	4631      	mov	r1, r6
 800db7e:	f04f 0a00 	mov.w	sl, #0
 800db82:	f851 3b04 	ldr.w	r3, [r1], #4
 800db86:	9804      	ldr	r0, [sp, #16]
 800db88:	0e1b      	lsrs	r3, r3, #24
 800db8a:	4298      	cmp	r0, r3
 800db8c:	9804      	ldr	r0, [sp, #16]
 800db8e:	bf08      	it	eq
 800db90:	f10a 0a01 	addeq.w	sl, sl, #1
 800db94:	4298      	cmp	r0, r3
 800db96:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800db9a:	d014      	beq.n	800dbc6 <_DrawBitmap+0x122>
 800db9c:	f1ba 0f00 	cmp.w	sl, #0
 800dba0:	d014      	beq.n	800dbcc <_DrawBitmap+0x128>
 800dba2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800dba6:	461a      	mov	r2, r3
 800dba8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbaa:	4631      	mov	r1, r6
 800dbac:	4638      	mov	r0, r7
 800dbae:	f8d9 3000 	ldr.w	r3, [r9]
 800dbb2:	4798      	blx	r3
 800dbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbb6:	eba8 080a 	sub.w	r8, r8, sl
 800dbba:	441f      	add	r7, r3
 800dbbc:	441e      	add	r6, r3
 800dbbe:	f1b8 0f00 	cmp.w	r8, #0
 800dbc2:	d1da      	bne.n	800db7a <_DrawBitmap+0xd6>
 800dbc4:	e7c8      	b.n	800db58 <_DrawBitmap+0xb4>
 800dbc6:	2a00      	cmp	r2, #0
 800dbc8:	d1db      	bne.n	800db82 <_DrawBitmap+0xde>
 800dbca:	e7e7      	b.n	800db9c <_DrawBitmap+0xf8>
 800dbcc:	6830      	ldr	r0, [r6, #0]
 800dbce:	0e02      	lsrs	r2, r0, #24
 800dbd0:	d004      	beq.n	800dbdc <_DrawBitmap+0x138>
 800dbd2:	4b4e      	ldr	r3, [pc, #312]	; (800dd0c <_DrawBitmap+0x268>)
 800dbd4:	6839      	ldr	r1, [r7, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4798      	blx	r3
 800dbda:	6038      	str	r0, [r7, #0]
 800dbdc:	3704      	adds	r7, #4
 800dbde:	3604      	adds	r6, #4
 800dbe0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800dbe4:	e7eb      	b.n	800dbbe <_DrawBitmap+0x11a>
 800dbe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dbe8:	2b10      	cmp	r3, #16
 800dbea:	d136      	bne.n	800dc5a <_DrawBitmap+0x1b6>
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	9a03      	ldr	r2, [sp, #12]
 800dbf0:	eba4 0443 	sub.w	r4, r4, r3, lsl #1
 800dbf4:	eba0 0583 	sub.w	r5, r0, r3, lsl #2
 800dbf8:	9b02      	ldr	r3, [sp, #8]
 800dbfa:	f04f 0800 	mov.w	r8, #0
 800dbfe:	eb03 0a02 	add.w	sl, r3, r2
 800dc02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800dc04:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800dc06:	4598      	cmp	r8, r3
 800dc08:	db02      	blt.n	800dc10 <_DrawBitmap+0x16c>
 800dc0a:	2e00      	cmp	r6, #0
 800dc0c:	d18c      	bne.n	800db28 <_DrawBitmap+0x84>
 800dc0e:	e78e      	b.n	800db2e <_DrawBitmap+0x8a>
 800dc10:	9b06      	ldr	r3, [sp, #24]
 800dc12:	eb08 0903 	add.w	r9, r8, r3
 800dc16:	b136      	cbz	r6, 800dc26 <_DrawBitmap+0x182>
 800dc18:	68b3      	ldr	r3, [r6, #8]
 800dc1a:	9903      	ldr	r1, [sp, #12]
 800dc1c:	685f      	ldr	r7, [r3, #4]
 800dc1e:	9b02      	ldr	r3, [sp, #8]
 800dc20:	464a      	mov	r2, r9
 800dc22:	4630      	mov	r0, r6
 800dc24:	47b8      	blx	r7
 800dc26:	9f03      	ldr	r7, [sp, #12]
 800dc28:	9b05      	ldr	r3, [sp, #20]
 800dc2a:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
 800dc2e:	691b      	ldr	r3, [r3, #16]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	4798      	blx	r3
 800dc34:	f845 0027 	str.w	r0, [r5, r7, lsl #2]
 800dc38:	b12e      	cbz	r6, 800dc46 <_DrawBitmap+0x1a2>
 800dc3a:	68b3      	ldr	r3, [r6, #8]
 800dc3c:	464a      	mov	r2, r9
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4639      	mov	r1, r7
 800dc42:	4630      	mov	r0, r6
 800dc44:	4798      	blx	r3
 800dc46:	3701      	adds	r7, #1
 800dc48:	4557      	cmp	r7, sl
 800dc4a:	d1ed      	bne.n	800dc28 <_DrawBitmap+0x184>
 800dc4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dc4e:	441c      	add	r4, r3
 800dc50:	9b08      	ldr	r3, [sp, #32]
 800dc52:	f108 0801 	add.w	r8, r8, #1
 800dc56:	441d      	add	r5, r3
 800dc58:	e7d3      	b.n	800dc02 <_DrawBitmap+0x15e>
 800dc5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dc5c:	2b08      	cmp	r3, #8
 800dc5e:	f040 8082 	bne.w	800dd66 <_DrawBitmap+0x2c2>
 800dc62:	9a03      	ldr	r2, [sp, #12]
 800dc64:	9e06      	ldr	r6, [sp, #24]
 800dc66:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 800dd08 <_DrawBitmap+0x264>
 800dc6a:	f06f 0303 	mvn.w	r3, #3
 800dc6e:	4353      	muls	r3, r2
 800dc70:	9304      	str	r3, [sp, #16]
 800dc72:	9b02      	ldr	r3, [sp, #8]
 800dc74:	4413      	add	r3, r2
 800dc76:	9305      	str	r3, [sp, #20]
 800dc78:	9b06      	ldr	r3, [sp, #24]
 800dc7a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dc7c:	1af3      	subs	r3, r6, r3
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	dc04      	bgt.n	800dc8c <_DrawBitmap+0x1e8>
 800dc82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f47f af4f 	bne.w	800db28 <_DrawBitmap+0x84>
 800dc8a:	e750      	b.n	800db2e <_DrawBitmap+0x8a>
 800dc8c:	f8d9 3000 	ldr.w	r3, [r9]
 800dc90:	7c1b      	ldrb	r3, [r3, #16]
 800dc92:	f1bb 0f00 	cmp.w	fp, #0
 800dc96:	d03d      	beq.n	800dd14 <_DrawBitmap+0x270>
 800dc98:	f013 0303 	ands.w	r3, r3, #3
 800dc9c:	d007      	beq.n	800dcae <_DrawBitmap+0x20a>
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	d012      	beq.n	800dcc8 <_DrawBitmap+0x224>
 800dca2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800dca4:	441c      	add	r4, r3
 800dca6:	9b08      	ldr	r3, [sp, #32]
 800dca8:	3601      	adds	r6, #1
 800dcaa:	441d      	add	r5, r3
 800dcac:	e7e4      	b.n	800dc78 <_DrawBitmap+0x1d4>
 800dcae:	9a02      	ldr	r2, [sp, #8]
 800dcb0:	4623      	mov	r3, r4
 800dcb2:	18a1      	adds	r1, r4, r2
 800dcb4:	462a      	mov	r2, r5
 800dcb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dcba:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800dcbe:	f842 0b04 	str.w	r0, [r2], #4
 800dcc2:	428b      	cmp	r3, r1
 800dcc4:	d1f7      	bne.n	800dcb6 <_DrawBitmap+0x212>
 800dcc6:	e7ec      	b.n	800dca2 <_DrawBitmap+0x1fe>
 800dcc8:	9b04      	ldr	r3, [sp, #16]
 800dcca:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800dcce:	9f03      	ldr	r7, [sp, #12]
 800dcd0:	18eb      	adds	r3, r5, r3
 800dcd2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800dcd6:	9307      	str	r3, [sp, #28]
 800dcd8:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800dcdc:	b173      	cbz	r3, 800dcfc <_DrawBitmap+0x258>
 800dcde:	9a07      	ldr	r2, [sp, #28]
 800dce0:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800dce4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800dce8:	f1b8 0f00 	cmp.w	r8, #0
 800dcec:	d006      	beq.n	800dcfc <_DrawBitmap+0x258>
 800dcee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcf2:	4632      	mov	r2, r6
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	4798      	blx	r3
 800dcfc:	9b05      	ldr	r3, [sp, #20]
 800dcfe:	3701      	adds	r7, #1
 800dd00:	42bb      	cmp	r3, r7
 800dd02:	d1e9      	bne.n	800dcd8 <_DrawBitmap+0x234>
 800dd04:	e7cd      	b.n	800dca2 <_DrawBitmap+0x1fe>
 800dd06:	bf00      	nop
 800dd08:	200000d8 	.word	0x200000d8
 800dd0c:	20000108 	.word	0x20000108
 800dd10:	200000cc 	.word	0x200000cc
 800dd14:	f013 0303 	ands.w	r3, r3, #3
 800dd18:	d01e      	beq.n	800dd58 <_DrawBitmap+0x2b4>
 800dd1a:	2b02      	cmp	r3, #2
 800dd1c:	d1c1      	bne.n	800dca2 <_DrawBitmap+0x1fe>
 800dd1e:	9b04      	ldr	r3, [sp, #16]
 800dd20:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800dd24:	9f03      	ldr	r7, [sp, #12]
 800dd26:	18eb      	adds	r3, r5, r3
 800dd28:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800dd2c:	9307      	str	r3, [sp, #28]
 800dd2e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800dd32:	b163      	cbz	r3, 800dd4e <_DrawBitmap+0x2aa>
 800dd34:	9a07      	ldr	r2, [sp, #28]
 800dd36:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
 800dd3a:	f1b8 0f00 	cmp.w	r8, #0
 800dd3e:	d006      	beq.n	800dd4e <_DrawBitmap+0x2aa>
 800dd40:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dd44:	4632      	mov	r2, r6
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4639      	mov	r1, r7
 800dd4a:	4640      	mov	r0, r8
 800dd4c:	4798      	blx	r3
 800dd4e:	9b05      	ldr	r3, [sp, #20]
 800dd50:	3701      	adds	r7, #1
 800dd52:	42bb      	cmp	r3, r7
 800dd54:	d1eb      	bne.n	800dd2e <_DrawBitmap+0x28a>
 800dd56:	e7a4      	b.n	800dca2 <_DrawBitmap+0x1fe>
 800dd58:	4bad      	ldr	r3, [pc, #692]	; (800e010 <_DrawBitmap+0x56c>)
 800dd5a:	9a02      	ldr	r2, [sp, #8]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4621      	mov	r1, r4
 800dd60:	4628      	mov	r0, r5
 800dd62:	4798      	blx	r3
 800dd64:	e79d      	b.n	800dca2 <_DrawBitmap+0x1fe>
 800dd66:	4bab      	ldr	r3, [pc, #684]	; (800e014 <_DrawBitmap+0x570>)
 800dd68:	f1bb 0f00 	cmp.w	fp, #0
 800dd6c:	bf08      	it	eq
 800dd6e:	469b      	moveq	fp, r3
 800dd70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dd78:	005b      	lsls	r3, r3, #1
 800dd7a:	930a      	str	r3, [sp, #40]	; 0x28
 800dd7c:	1c63      	adds	r3, r4, #1
 800dd7e:	9304      	str	r3, [sp, #16]
 800dd80:	1d03      	adds	r3, r0, #4
 800dd82:	9307      	str	r3, [sp, #28]
 800dd84:	9b06      	ldr	r3, [sp, #24]
 800dd86:	9305      	str	r3, [sp, #20]
 800dd88:	9b07      	ldr	r3, [sp, #28]
 800dd8a:	9a06      	ldr	r2, [sp, #24]
 800dd8c:	1f1c      	subs	r4, r3, #4
 800dd8e:	9b04      	ldr	r3, [sp, #16]
 800dd90:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800dd94:	9b05      	ldr	r3, [sp, #20]
 800dd96:	1a9b      	subs	r3, r3, r2
 800dd98:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	f77f af71 	ble.w	800dc82 <_DrawBitmap+0x1de>
 800dda0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	f000 80a4 	beq.w	800def0 <_DrawBitmap+0x44c>
 800dda8:	2b04      	cmp	r3, #4
 800ddaa:	f000 8139 	beq.w	800e020 <_DrawBitmap+0x57c>
 800ddae:	2b01      	cmp	r3, #1
 800ddb0:	f040 8092 	bne.w	800ded8 <_DrawBitmap+0x434>
 800ddb4:	4b98      	ldr	r3, [pc, #608]	; (800e018 <_DrawBitmap+0x574>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800ddba:	f7f7 fd07 	bl	80057cc <GUI_ALLOC_LockH>
 800ddbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddc0:	4a96      	ldr	r2, [pc, #600]	; (800e01c <_DrawBitmap+0x578>)
 800ddc2:	900e      	str	r0, [sp, #56]	; 0x38
 800ddc4:	f1c3 0508 	rsb	r5, r3, #8
 800ddc8:	9b04      	ldr	r3, [sp, #16]
 800ddca:	9f02      	ldr	r7, [sp, #8]
 800ddcc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ddd0:	5cd6      	ldrb	r6, [r2, r3]
 800ddd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ddd4:	411e      	asrs	r6, r3
 800ddd6:	4b90      	ldr	r3, [pc, #576]	; (800e018 <_DrawBitmap+0x574>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	7c1b      	ldrb	r3, [r3, #16]
 800dddc:	f003 0303 	and.w	r3, r3, #3
 800dde0:	2b02      	cmp	r3, #2
 800dde2:	d01d      	beq.n	800de20 <_DrawBitmap+0x37c>
 800dde4:	2b03      	cmp	r3, #3
 800dde6:	d056      	beq.n	800de96 <_DrawBitmap+0x3f2>
 800dde8:	2b01      	cmp	r3, #1
 800ddea:	d054      	beq.n	800de96 <_DrawBitmap+0x3f2>
 800ddec:	42bd      	cmp	r5, r7
 800ddee:	bf28      	it	cs
 800ddf0:	463d      	movcs	r5, r7
 800ddf2:	1b7f      	subs	r7, r7, r5
 800ddf4:	462b      	mov	r3, r5
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	f006 0101 	and.w	r1, r6, #1
 800ddfc:	3b01      	subs	r3, #1
 800ddfe:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800de02:	f842 1b04 	str.w	r1, [r2], #4
 800de06:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800de0a:	d1f5      	bne.n	800ddf8 <_DrawBitmap+0x354>
 800de0c:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800de10:	2f00      	cmp	r7, #0
 800de12:	d05e      	beq.n	800ded2 <_DrawBitmap+0x42e>
 800de14:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800de18:	4a80      	ldr	r2, [pc, #512]	; (800e01c <_DrawBitmap+0x578>)
 800de1a:	2508      	movs	r5, #8
 800de1c:	5cd6      	ldrb	r6, [r2, r3]
 800de1e:	e7e5      	b.n	800ddec <_DrawBitmap+0x348>
 800de20:	f8db 3004 	ldr.w	r3, [fp, #4]
 800de24:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800de28:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800de2c:	9309      	str	r3, [sp, #36]	; 0x24
 800de2e:	42bd      	cmp	r5, r7
 800de30:	bf28      	it	cs
 800de32:	463d      	movcs	r5, r7
 800de34:	1b7f      	subs	r7, r7, r5
 800de36:	f1b9 0f00 	cmp.w	r9, #0
 800de3a:	d027      	beq.n	800de8c <_DrawBitmap+0x3e8>
 800de3c:	b956      	cbnz	r6, 800de54 <_DrawBitmap+0x3b0>
 800de3e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800de42:	44a8      	add	r8, r5
 800de44:	2f00      	cmp	r7, #0
 800de46:	d044      	beq.n	800ded2 <_DrawBitmap+0x42e>
 800de48:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800de4c:	4a73      	ldr	r2, [pc, #460]	; (800e01c <_DrawBitmap+0x578>)
 800de4e:	2508      	movs	r5, #8
 800de50:	5cd6      	ldrb	r6, [r2, r3]
 800de52:	e7ec      	b.n	800de2e <_DrawBitmap+0x38a>
 800de54:	07f0      	lsls	r0, r6, #31
 800de56:	d508      	bpl.n	800de6a <_DrawBitmap+0x3c6>
 800de58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800de5c:	9a05      	ldr	r2, [sp, #20]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4641      	mov	r1, r8
 800de62:	4648      	mov	r0, r9
 800de64:	4798      	blx	r3
 800de66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de68:	6023      	str	r3, [r4, #0]
 800de6a:	3d01      	subs	r5, #1
 800de6c:	f108 0801 	add.w	r8, r8, #1
 800de70:	f104 0404 	add.w	r4, r4, #4
 800de74:	d0e6      	beq.n	800de44 <_DrawBitmap+0x3a0>
 800de76:	0876      	lsrs	r6, r6, #1
 800de78:	e7e0      	b.n	800de3c <_DrawBitmap+0x398>
 800de7a:	07f1      	lsls	r1, r6, #31
 800de7c:	bf44      	itt	mi
 800de7e:	9b09      	ldrmi	r3, [sp, #36]	; 0x24
 800de80:	6023      	strmi	r3, [r4, #0]
 800de82:	3d01      	subs	r5, #1
 800de84:	f104 0404 	add.w	r4, r4, #4
 800de88:	d0dc      	beq.n	800de44 <_DrawBitmap+0x3a0>
 800de8a:	0876      	lsrs	r6, r6, #1
 800de8c:	2e00      	cmp	r6, #0
 800de8e:	d1f4      	bne.n	800de7a <_DrawBitmap+0x3d6>
 800de90:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800de94:	e7d6      	b.n	800de44 <_DrawBitmap+0x3a0>
 800de96:	6803      	ldr	r3, [r0, #0]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	4798      	blx	r3
 800de9e:	42bd      	cmp	r5, r7
 800dea0:	bf28      	it	cs
 800dea2:	463d      	movcs	r5, r7
 800dea4:	1b7f      	subs	r7, r7, r5
 800dea6:	4629      	mov	r1, r5
 800dea8:	4623      	mov	r3, r4
 800deaa:	07f2      	lsls	r2, r6, #31
 800deac:	bf42      	ittt	mi
 800deae:	681a      	ldrmi	r2, [r3, #0]
 800deb0:	4042      	eormi	r2, r0
 800deb2:	601a      	strmi	r2, [r3, #0]
 800deb4:	3901      	subs	r1, #1
 800deb6:	f103 0304 	add.w	r3, r3, #4
 800deba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800debe:	d1f4      	bne.n	800deaa <_DrawBitmap+0x406>
 800dec0:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800dec4:	b12f      	cbz	r7, 800ded2 <_DrawBitmap+0x42e>
 800dec6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 800deca:	4a54      	ldr	r2, [pc, #336]	; (800e01c <_DrawBitmap+0x578>)
 800decc:	2508      	movs	r5, #8
 800dece:	5cd6      	ldrb	r6, [r2, r3]
 800ded0:	e7e5      	b.n	800de9e <_DrawBitmap+0x3fa>
 800ded2:	a80e      	add	r0, sp, #56	; 0x38
 800ded4:	f7f7 fc88 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800ded8:	9b05      	ldr	r3, [sp, #20]
 800deda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800dedc:	3301      	adds	r3, #1
 800dede:	9305      	str	r3, [sp, #20]
 800dee0:	9b04      	ldr	r3, [sp, #16]
 800dee2:	4413      	add	r3, r2
 800dee4:	9304      	str	r3, [sp, #16]
 800dee6:	9a08      	ldr	r2, [sp, #32]
 800dee8:	9b07      	ldr	r3, [sp, #28]
 800deea:	4413      	add	r3, r2
 800deec:	9307      	str	r3, [sp, #28]
 800deee:	e74b      	b.n	800dd88 <_DrawBitmap+0x2e4>
 800def0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800def2:	f1c3 0504 	rsb	r5, r3, #4
 800def6:	9b04      	ldr	r3, [sp, #16]
 800def8:	f813 6c01 	ldrb.w	r6, [r3, #-1]
 800defc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800defe:	409e      	lsls	r6, r3
 800df00:	4b45      	ldr	r3, [pc, #276]	; (800e018 <_DrawBitmap+0x574>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	7c1b      	ldrb	r3, [r3, #16]
 800df06:	f003 0303 	and.w	r3, r3, #3
 800df0a:	2b01      	cmp	r3, #1
 800df0c:	b2ed      	uxtb	r5, r5
 800df0e:	b2f6      	uxtb	r6, r6
 800df10:	d03c      	beq.n	800df8c <_DrawBitmap+0x4e8>
 800df12:	d35e      	bcc.n	800dfd2 <_DrawBitmap+0x52e>
 800df14:	2b02      	cmp	r3, #2
 800df16:	d1df      	bne.n	800ded8 <_DrawBitmap+0x434>
 800df18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df1a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800df1e:	9f03      	ldr	r7, [sp, #12]
 800df20:	9309      	str	r3, [sp, #36]	; 0x24
 800df22:	4545      	cmp	r5, r8
 800df24:	bfc8      	it	gt
 800df26:	fa5f f588 	uxtbgt.w	r5, r8
 800df2a:	eba8 0805 	sub.w	r8, r8, r5
 800df2e:	3d01      	subs	r5, #1
 800df30:	b2ed      	uxtb	r5, r5
 800df32:	1c7b      	adds	r3, r7, #1
 800df34:	442b      	add	r3, r5
 800df36:	930d      	str	r3, [sp, #52]	; 0x34
 800df38:	f06f 0303 	mvn.w	r3, #3
 800df3c:	fb03 4307 	mla	r3, r3, r7, r4
 800df40:	930c      	str	r3, [sp, #48]	; 0x30
 800df42:	46b9      	mov	r9, r7
 800df44:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800df48:	d00d      	beq.n	800df66 <_DrawBitmap+0x4c2>
 800df4a:	09b3      	lsrs	r3, r6, #6
 800df4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df4e:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800df52:	f842 3029 	str.w	r3, [r2, r9, lsl #2]
 800df56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df58:	b12b      	cbz	r3, 800df66 <_DrawBitmap+0x4c2>
 800df5a:	689b      	ldr	r3, [r3, #8]
 800df5c:	9a05      	ldr	r2, [sp, #20]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df62:	4649      	mov	r1, r9
 800df64:	4798      	blx	r3
 800df66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df68:	f109 0901 	add.w	r9, r9, #1
 800df6c:	00b6      	lsls	r6, r6, #2
 800df6e:	4599      	cmp	r9, r3
 800df70:	b2f6      	uxtb	r6, r6
 800df72:	d1e7      	bne.n	800df44 <_DrawBitmap+0x4a0>
 800df74:	1c6b      	adds	r3, r5, #1
 800df76:	3701      	adds	r7, #1
 800df78:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800df7c:	442f      	add	r7, r5
 800df7e:	f1b8 0f00 	cmp.w	r8, #0
 800df82:	d0a9      	beq.n	800ded8 <_DrawBitmap+0x434>
 800df84:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800df88:	2504      	movs	r5, #4
 800df8a:	e7ca      	b.n	800df22 <_DrawBitmap+0x47e>
 800df8c:	9b02      	ldr	r3, [sp, #8]
 800df8e:	429d      	cmp	r5, r3
 800df90:	bfc8      	it	gt
 800df92:	b2dd      	uxtbgt	r5, r3
 800df94:	1b5b      	subs	r3, r3, r5
 800df96:	462a      	mov	r2, r5
 800df98:	4620      	mov	r0, r4
 800df9a:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 800df9e:	bf18      	it	ne
 800dfa0:	6801      	ldrne	r1, [r0, #0]
 800dfa2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800dfa6:	bf1c      	itt	ne
 800dfa8:	f081 01ff 	eorne.w	r1, r1, #255	; 0xff
 800dfac:	6001      	strne	r1, [r0, #0]
 800dfae:	00b6      	lsls	r6, r6, #2
 800dfb0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800dfb4:	f100 0004 	add.w	r0, r0, #4
 800dfb8:	b2f6      	uxtb	r6, r6
 800dfba:	d1ee      	bne.n	800df9a <_DrawBitmap+0x4f6>
 800dfbc:	3d01      	subs	r5, #1
 800dfbe:	b2ed      	uxtb	r5, r5
 800dfc0:	3501      	adds	r5, #1
 800dfc2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d086      	beq.n	800ded8 <_DrawBitmap+0x434>
 800dfca:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800dfce:	2504      	movs	r5, #4
 800dfd0:	e7dd      	b.n	800df8e <_DrawBitmap+0x4ea>
 800dfd2:	9b02      	ldr	r3, [sp, #8]
 800dfd4:	429d      	cmp	r5, r3
 800dfd6:	bfc8      	it	gt
 800dfd8:	b2dd      	uxtbgt	r5, r3
 800dfda:	1b5b      	subs	r3, r3, r5
 800dfdc:	462a      	mov	r2, r5
 800dfde:	4621      	mov	r1, r4
 800dfe0:	09b0      	lsrs	r0, r6, #6
 800dfe2:	3a01      	subs	r2, #1
 800dfe4:	f85b 0020 	ldr.w	r0, [fp, r0, lsl #2]
 800dfe8:	f841 0b04 	str.w	r0, [r1], #4
 800dfec:	00b6      	lsls	r6, r6, #2
 800dfee:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 800dff2:	b2f6      	uxtb	r6, r6
 800dff4:	d1f4      	bne.n	800dfe0 <_DrawBitmap+0x53c>
 800dff6:	3d01      	subs	r5, #1
 800dff8:	b2ed      	uxtb	r5, r5
 800dffa:	3501      	adds	r5, #1
 800dffc:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800e000:	2b00      	cmp	r3, #0
 800e002:	f43f af69 	beq.w	800ded8 <_DrawBitmap+0x434>
 800e006:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
 800e00a:	2504      	movs	r5, #4
 800e00c:	e7e2      	b.n	800dfd4 <_DrawBitmap+0x530>
 800e00e:	bf00      	nop
 800e010:	200000cc 	.word	0x200000cc
 800e014:	08010d64 	.word	0x08010d64
 800e018:	200000d8 	.word	0x200000d8
 800e01c:	08010da4 	.word	0x08010da4
 800e020:	9b04      	ldr	r3, [sp, #16]
 800e022:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e024:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e028:	4093      	lsls	r3, r2
 800e02a:	4a5f      	ldr	r2, [pc, #380]	; (800e1a8 <_DrawBitmap+0x704>)
 800e02c:	6812      	ldr	r2, [r2, #0]
 800e02e:	7c12      	ldrb	r2, [r2, #16]
 800e030:	f002 0203 	and.w	r2, r2, #3
 800e034:	2a01      	cmp	r2, #1
 800e036:	b2dd      	uxtb	r5, r3
 800e038:	f000 808e 	beq.w	800e158 <_DrawBitmap+0x6b4>
 800e03c:	d334      	bcc.n	800e0a8 <_DrawBitmap+0x604>
 800e03e:	2a02      	cmp	r2, #2
 800e040:	f47f af4a 	bne.w	800ded8 <_DrawBitmap+0x434>
 800e044:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e046:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d05f      	beq.n	800e10c <_DrawBitmap+0x668>
 800e04c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 800e050:	d00a      	beq.n	800e068 <_DrawBitmap+0x5c4>
 800e052:	092d      	lsrs	r5, r5, #4
 800e054:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800e058:	6023      	str	r3, [r4, #0]
 800e05a:	b12e      	cbz	r6, 800e068 <_DrawBitmap+0x5c4>
 800e05c:	68b3      	ldr	r3, [r6, #8]
 800e05e:	9a05      	ldr	r2, [sp, #20]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	9903      	ldr	r1, [sp, #12]
 800e064:	4630      	mov	r0, r6
 800e066:	4798      	blx	r3
 800e068:	9b03      	ldr	r3, [sp, #12]
 800e06a:	9c07      	ldr	r4, [sp, #28]
 800e06c:	1c5f      	adds	r7, r3, #1
 800e06e:	9b02      	ldr	r3, [sp, #8]
 800e070:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800e074:	9b04      	ldr	r3, [sp, #16]
 800e076:	781d      	ldrb	r5, [r3, #0]
 800e078:	469a      	mov	sl, r3
 800e07a:	f1b8 0f01 	cmp.w	r8, #1
 800e07e:	dc49      	bgt.n	800e114 <_DrawBitmap+0x670>
 800e080:	f1b8 0f00 	cmp.w	r8, #0
 800e084:	f43f af28 	beq.w	800ded8 <_DrawBitmap+0x434>
 800e088:	092d      	lsrs	r5, r5, #4
 800e08a:	f43f af25 	beq.w	800ded8 <_DrawBitmap+0x434>
 800e08e:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800e092:	6023      	str	r3, [r4, #0]
 800e094:	2e00      	cmp	r6, #0
 800e096:	f43f af1f 	beq.w	800ded8 <_DrawBitmap+0x434>
 800e09a:	68b3      	ldr	r3, [r6, #8]
 800e09c:	9a05      	ldr	r2, [sp, #20]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4639      	mov	r1, r7
 800e0a2:	4630      	mov	r0, r6
 800e0a4:	4798      	blx	r3
 800e0a6:	e717      	b.n	800ded8 <_DrawBitmap+0x434>
 800e0a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e0aa:	b36b      	cbz	r3, 800e108 <_DrawBitmap+0x664>
 800e0ac:	092d      	lsrs	r5, r5, #4
 800e0ae:	9a04      	ldr	r2, [sp, #16]
 800e0b0:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800e0b4:	6023      	str	r3, [r4, #0]
 800e0b6:	9b02      	ldr	r3, [sp, #8]
 800e0b8:	9c07      	ldr	r4, [sp, #28]
 800e0ba:	7815      	ldrb	r5, [r2, #0]
 800e0bc:	3b01      	subs	r3, #1
 800e0be:	4692      	mov	sl, r2
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	dd19      	ble.n	800e0f8 <_DrawBitmap+0x654>
 800e0c4:	1058      	asrs	r0, r3, #1
 800e0c6:	f104 0208 	add.w	r2, r4, #8
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	eb0a 0600 	add.w	r6, sl, r0
 800e0d2:	0929      	lsrs	r1, r5, #4
 800e0d4:	f005 050f 	and.w	r5, r5, #15
 800e0d8:	f85b 1021 	ldr.w	r1, [fp, r1, lsl #2]
 800e0dc:	f842 1c08 	str.w	r1, [r2, #-8]
 800e0e0:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 800e0e4:	f842 1c04 	str.w	r1, [r2, #-4]
 800e0e8:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800e0ec:	45b2      	cmp	sl, r6
 800e0ee:	f102 0208 	add.w	r2, r2, #8
 800e0f2:	d1ee      	bne.n	800e0d2 <_DrawBitmap+0x62e>
 800e0f4:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f43f aeed 	beq.w	800ded8 <_DrawBitmap+0x434>
 800e0fe:	092d      	lsrs	r5, r5, #4
 800e100:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800e104:	6023      	str	r3, [r4, #0]
 800e106:	e6e7      	b.n	800ded8 <_DrawBitmap+0x434>
 800e108:	9b02      	ldr	r3, [sp, #8]
 800e10a:	e7d9      	b.n	800e0c0 <_DrawBitmap+0x61c>
 800e10c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e110:	9f03      	ldr	r7, [sp, #12]
 800e112:	e7b2      	b.n	800e07a <_DrawBitmap+0x5d6>
 800e114:	f015 0ff0 	tst.w	r5, #240	; 0xf0
 800e118:	d00a      	beq.n	800e130 <_DrawBitmap+0x68c>
 800e11a:	092b      	lsrs	r3, r5, #4
 800e11c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800e120:	6023      	str	r3, [r4, #0]
 800e122:	b12e      	cbz	r6, 800e130 <_DrawBitmap+0x68c>
 800e124:	68b3      	ldr	r3, [r6, #8]
 800e126:	9a05      	ldr	r2, [sp, #20]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4639      	mov	r1, r7
 800e12c:	4630      	mov	r0, r6
 800e12e:	4798      	blx	r3
 800e130:	f015 050f 	ands.w	r5, r5, #15
 800e134:	d009      	beq.n	800e14a <_DrawBitmap+0x6a6>
 800e136:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 800e13a:	6063      	str	r3, [r4, #4]
 800e13c:	b12e      	cbz	r6, 800e14a <_DrawBitmap+0x6a6>
 800e13e:	68b3      	ldr	r3, [r6, #8]
 800e140:	9a05      	ldr	r2, [sp, #20]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	1c79      	adds	r1, r7, #1
 800e146:	4630      	mov	r0, r6
 800e148:	4798      	blx	r3
 800e14a:	3408      	adds	r4, #8
 800e14c:	3702      	adds	r7, #2
 800e14e:	f1a8 0802 	sub.w	r8, r8, #2
 800e152:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800e156:	e790      	b.n	800e07a <_DrawBitmap+0x5d6>
 800e158:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e15a:	9a02      	ldr	r2, [sp, #8]
 800e15c:	f1c3 0302 	rsb	r3, r3, #2
 800e160:	b2db      	uxtb	r3, r3
 800e162:	4293      	cmp	r3, r2
 800e164:	bfc8      	it	gt
 800e166:	b2d3      	uxtbgt	r3, r2
 800e168:	1ad2      	subs	r2, r2, r3
 800e16a:	4619      	mov	r1, r3
 800e16c:	4626      	mov	r6, r4
 800e16e:	f015 0fc0 	tst.w	r5, #192	; 0xc0
 800e172:	bf18      	it	ne
 800e174:	6830      	ldrne	r0, [r6, #0]
 800e176:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 800e17a:	bf1c      	itt	ne
 800e17c:	f080 00ff 	eorne.w	r0, r0, #255	; 0xff
 800e180:	6030      	strne	r0, [r6, #0]
 800e182:	012d      	lsls	r5, r5, #4
 800e184:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800e188:	f106 0604 	add.w	r6, r6, #4
 800e18c:	b2ed      	uxtb	r5, r5
 800e18e:	d1ee      	bne.n	800e16e <_DrawBitmap+0x6ca>
 800e190:	3b01      	subs	r3, #1
 800e192:	b2db      	uxtb	r3, r3
 800e194:	3301      	adds	r3, #1
 800e196:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e19a:	2a00      	cmp	r2, #0
 800e19c:	f43f ae9c 	beq.w	800ded8 <_DrawBitmap+0x434>
 800e1a0:	f81a 5f01 	ldrb.w	r5, [sl, #1]!
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	e7dc      	b.n	800e162 <_DrawBitmap+0x6be>
 800e1a8:	200000d8 	.word	0x200000d8

0800e1ac <GUI_MEMDEV_GetDataPtr>:
 800e1ac:	b513      	push	{r0, r1, r4, lr}
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	b140      	cbz	r0, 800e1c4 <GUI_MEMDEV_GetDataPtr+0x18>
 800e1b2:	f7f7 fb0b 	bl	80057cc <GUI_ALLOC_LockH>
 800e1b6:	4604      	mov	r4, r0
 800e1b8:	a802      	add	r0, sp, #8
 800e1ba:	f840 4d04 	str.w	r4, [r0, #-4]!
 800e1be:	3418      	adds	r4, #24
 800e1c0:	f7f7 fb12 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	b002      	add	sp, #8
 800e1c8:	bd10      	pop	{r4, pc}
	...

0800e1cc <_ClipX>:
 800e1cc:	b570      	push	{r4, r5, r6, lr}
 800e1ce:	4c0f      	ldr	r4, [pc, #60]	; (800e20c <_ClipX+0x40>)
 800e1d0:	680d      	ldr	r5, [r1, #0]
 800e1d2:	6826      	ldr	r6, [r4, #0]
 800e1d4:	1944      	adds	r4, r0, r5
 800e1d6:	f9b6 500c 	ldrsh.w	r5, [r6, #12]
 800e1da:	3c01      	subs	r4, #1
 800e1dc:	1b64      	subs	r4, r4, r5
 800e1de:	2c00      	cmp	r4, #0
 800e1e0:	bfc8      	it	gt
 800e1e2:	1b00      	subgt	r0, r0, r4
 800e1e4:	6010      	str	r0, [r2, #0]
 800e1e6:	680c      	ldr	r4, [r1, #0]
 800e1e8:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 800e1ec:	42a0      	cmp	r0, r4
 800e1ee:	dd09      	ble.n	800e204 <_ClipX+0x38>
 800e1f0:	1b00      	subs	r0, r0, r4
 800e1f2:	6018      	str	r0, [r3, #0]
 800e1f4:	680c      	ldr	r4, [r1, #0]
 800e1f6:	4420      	add	r0, r4
 800e1f8:	6008      	str	r0, [r1, #0]
 800e1fa:	6811      	ldr	r1, [r2, #0]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	1ac9      	subs	r1, r1, r3
 800e200:	6011      	str	r1, [r2, #0]
 800e202:	bd70      	pop	{r4, r5, r6, pc}
 800e204:	2200      	movs	r2, #0
 800e206:	601a      	str	r2, [r3, #0]
 800e208:	bd70      	pop	{r4, r5, r6, pc}
 800e20a:	bf00      	nop
 800e20c:	200000d8 	.word	0x200000d8

0800e210 <_ClipY>:
 800e210:	b570      	push	{r4, r5, r6, lr}
 800e212:	4c0f      	ldr	r4, [pc, #60]	; (800e250 <_ClipY+0x40>)
 800e214:	680d      	ldr	r5, [r1, #0]
 800e216:	6826      	ldr	r6, [r4, #0]
 800e218:	1944      	adds	r4, r0, r5
 800e21a:	f9b6 500e 	ldrsh.w	r5, [r6, #14]
 800e21e:	3c01      	subs	r4, #1
 800e220:	1b64      	subs	r4, r4, r5
 800e222:	2c00      	cmp	r4, #0
 800e224:	bfc8      	it	gt
 800e226:	1b00      	subgt	r0, r0, r4
 800e228:	6010      	str	r0, [r2, #0]
 800e22a:	680c      	ldr	r4, [r1, #0]
 800e22c:	f9b6 000a 	ldrsh.w	r0, [r6, #10]
 800e230:	4284      	cmp	r4, r0
 800e232:	da09      	bge.n	800e248 <_ClipY+0x38>
 800e234:	1b00      	subs	r0, r0, r4
 800e236:	6018      	str	r0, [r3, #0]
 800e238:	680c      	ldr	r4, [r1, #0]
 800e23a:	4420      	add	r0, r4
 800e23c:	6008      	str	r0, [r1, #0]
 800e23e:	6811      	ldr	r1, [r2, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	1ac9      	subs	r1, r1, r3
 800e244:	6011      	str	r1, [r2, #0]
 800e246:	bd70      	pop	{r4, r5, r6, pc}
 800e248:	2200      	movs	r2, #0
 800e24a:	601a      	str	r2, [r3, #0]
 800e24c:	bd70      	pop	{r4, r5, r6, pc}
 800e24e:	bf00      	nop
 800e250:	200000d8 	.word	0x200000d8

0800e254 <_WriteToActiveAlpha>:
 800e254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e258:	b095      	sub	sp, #84	; 0x54
 800e25a:	461f      	mov	r7, r3
 800e25c:	910d      	str	r1, [sp, #52]	; 0x34
 800e25e:	920c      	str	r2, [sp, #48]	; 0x30
 800e260:	4680      	mov	r8, r0
 800e262:	f7f7 fab3 	bl	80057cc <GUI_ALLOC_LockH>
 800e266:	4603      	mov	r3, r0
 800e268:	a814      	add	r0, sp, #80	; 0x50
 800e26a:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 800e26e:	f840 3d18 	str.w	r3, [r0, #-24]!
 800e272:	f9b3 500a 	ldrsh.w	r5, [r3, #10]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	9307      	str	r3, [sp, #28]
 800e27e:	f7f7 fab3 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800e282:	4b42      	ldr	r3, [pc, #264]	; (800e38c <_WriteToActiveAlpha+0x138>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	7c5a      	ldrb	r2, [r3, #17]
 800e288:	4b41      	ldr	r3, [pc, #260]	; (800e390 <_WriteToActiveAlpha+0x13c>)
 800e28a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e28e:	68c3      	ldr	r3, [r0, #12]
 800e290:	2108      	movs	r1, #8
 800e292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e294:	4798      	blx	r3
 800e296:	2817      	cmp	r0, #23
 800e298:	4604      	mov	r4, r0
 800e29a:	d869      	bhi.n	800e370 <_WriteToActiveAlpha+0x11c>
 800e29c:	2803      	cmp	r0, #3
 800e29e:	bf14      	ite	ne
 800e2a0:	4604      	movne	r4, r0
 800e2a2:	2408      	moveq	r4, #8
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	9308      	str	r3, [sp, #32]
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e2ae:	f7fc fe97 	bl	800afe0 <GUI__AllocAlphaBuffer>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d159      	bne.n	800e36a <_WriteToActiveAlpha+0x116>
 800e2b6:	ab0f      	add	r3, sp, #60	; 0x3c
 800e2b8:	aa11      	add	r2, sp, #68	; 0x44
 800e2ba:	a90d      	add	r1, sp, #52	; 0x34
 800e2bc:	4630      	mov	r0, r6
 800e2be:	f7ff ff85 	bl	800e1cc <_ClipX>
 800e2c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dd50      	ble.n	800e36a <_WriteToActiveAlpha+0x116>
 800e2c8:	ab10      	add	r3, sp, #64	; 0x40
 800e2ca:	aa12      	add	r2, sp, #72	; 0x48
 800e2cc:	a90c      	add	r1, sp, #48	; 0x30
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7ff ff9e 	bl	800e210 <_ClipY>
 800e2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	dd47      	ble.n	800e36a <_WriteToActiveAlpha+0x116>
 800e2da:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800e394 <_WriteToActiveAlpha+0x140>
 800e2de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e2e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e2e4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800e2e8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800e2ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	930a      	str	r3, [sp, #40]	; 0x28
 800e2f2:	f7ff ff5b 	bl	800e1ac <GUI_MEMDEV_GetDataPtr>
 800e2f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e2f8:	ab13      	add	r3, sp, #76	; 0x4c
 800e2fa:	fb05 2206 	mla	r2, r5, r6, r2
 800e2fe:	9301      	str	r3, [sp, #4]
 800e300:	9b07      	ldr	r3, [sp, #28]
 800e302:	9300      	str	r3, [sp, #0]
 800e304:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e30a:	4649      	mov	r1, r9
 800e30c:	4658      	mov	r0, fp
 800e30e:	f7fc fd93 	bl	800ae38 <GUI__DoAlphaBlending>
 800e312:	4605      	mov	r5, r0
 800e314:	b348      	cbz	r0, 800e36a <_WriteToActiveAlpha+0x116>
 800e316:	9b08      	ldr	r3, [sp, #32]
 800e318:	4553      	cmp	r3, sl
 800e31a:	d00f      	beq.n	800e33c <_WriteToActiveAlpha+0xe8>
 800e31c:	463b      	mov	r3, r7
 800e31e:	4622      	mov	r2, r4
 800e320:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e322:	f7ff fa29 	bl	800d778 <GUI__CompactPixelIndicesEx>
 800e326:	b948      	cbnz	r0, 800e33c <_WriteToActiveAlpha+0xe8>
 800e328:	f8d7 b010 	ldr.w	fp, [r7, #16]
 800e32c:	f1bb 0f00 	cmp.w	fp, #0
 800e330:	d020      	beq.n	800e374 <_WriteToActiveAlpha+0x120>
 800e332:	2304      	movs	r3, #4
 800e334:	4632      	mov	r2, r6
 800e336:	4629      	mov	r1, r5
 800e338:	4628      	mov	r0, r5
 800e33a:	47d8      	blx	fp
 800e33c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e33e:	9504      	str	r5, [sp, #16]
 800e340:	1c4b      	adds	r3, r1, #1
 800e342:	930c      	str	r3, [sp, #48]	; 0x30
 800e344:	2300      	movs	r3, #0
 800e346:	9305      	str	r3, [sp, #20]
 800e348:	9303      	str	r3, [sp, #12]
 800e34a:	2301      	movs	r3, #1
 800e34c:	9301      	str	r3, [sp, #4]
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	9402      	str	r4, [sp, #8]
 800e352:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e354:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e356:	f7fa fa4f 	bl	80087f8 <LCD_DrawBitmap>
 800e35a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e35c:	3301      	adds	r3, #1
 800e35e:	9310      	str	r3, [sp, #64]	; 0x40
 800e360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e362:	3b01      	subs	r3, #1
 800e364:	9312      	str	r3, [sp, #72]	; 0x48
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1b9      	bne.n	800e2de <_WriteToActiveAlpha+0x8a>
 800e36a:	b015      	add	sp, #84	; 0x54
 800e36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e370:	2420      	movs	r4, #32
 800e372:	e797      	b.n	800e2a4 <_WriteToActiveAlpha+0x50>
 800e374:	46a9      	mov	r9, r5
 800e376:	46b3      	mov	fp, r6
 800e378:	f8d9 0000 	ldr.w	r0, [r9]
 800e37c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e37e:	4798      	blx	r3
 800e380:	f1bb 0b01 	subs.w	fp, fp, #1
 800e384:	f849 0b04 	str.w	r0, [r9], #4
 800e388:	d1f6      	bne.n	800e378 <_WriteToActiveAlpha+0x124>
 800e38a:	e7d7      	b.n	800e33c <_WriteToActiveAlpha+0xe8>
 800e38c:	200000d8 	.word	0x200000d8
 800e390:	200089b8 	.word	0x200089b8
 800e394:	0800b765 	.word	0x0800b765

0800e398 <GUI_MEMDEV__WriteToActiveAlpha>:
 800e398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e39c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800e4c4 <GUI_MEMDEV__WriteToActiveAlpha+0x12c>
 800e3a0:	4b44      	ldr	r3, [pc, #272]	; (800e4b4 <GUI_MEMDEV__WriteToActiveAlpha+0x11c>)
 800e3a2:	f8d8 6000 	ldr.w	r6, [r8]
 800e3a6:	4d44      	ldr	r5, [pc, #272]	; (800e4b8 <GUI_MEMDEV__WriteToActiveAlpha+0x120>)
 800e3a8:	7c74      	ldrb	r4, [r6, #17]
 800e3aa:	f8d5 e000 	ldr.w	lr, [r5]
 800e3ae:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800e3b2:	b08d      	sub	sp, #52	; 0x34
 800e3b4:	4607      	mov	r7, r0
 800e3b6:	9105      	str	r1, [sp, #20]
 800e3b8:	9204      	str	r2, [sp, #16]
 800e3ba:	6923      	ldr	r3, [r4, #16]
 800e3bc:	f1be 0f00 	cmp.w	lr, #0
 800e3c0:	d104      	bne.n	800e3cc <GUI_MEMDEV__WriteToActiveAlpha+0x34>
 800e3c2:	f7ff ff47 	bl	800e254 <_WriteToActiveAlpha>
 800e3c6:	b00d      	add	sp, #52	; 0x34
 800e3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3cc:	68e2      	ldr	r2, [r4, #12]
 800e3ce:	6db1      	ldr	r1, [r6, #88]	; 0x58
 800e3d0:	6812      	ldr	r2, [r2, #0]
 800e3d2:	b939      	cbnz	r1, 800e3e4 <GUI_MEMDEV__WriteToActiveAlpha+0x4c>
 800e3d4:	fab2 f282 	clz	r2, r2
 800e3d8:	0952      	lsrs	r2, r2, #5
 800e3da:	b952      	cbnz	r2, 800e3f2 <GUI_MEMDEV__WriteToActiveAlpha+0x5a>
 800e3dc:	9a04      	ldr	r2, [sp, #16]
 800e3de:	9905      	ldr	r1, [sp, #20]
 800e3e0:	4638      	mov	r0, r7
 800e3e2:	e7ee      	b.n	800e3c2 <GUI_MEMDEV__WriteToActiveAlpha+0x2a>
 800e3e4:	2a07      	cmp	r2, #7
 800e3e6:	d0f9      	beq.n	800e3dc <GUI_MEMDEV__WriteToActiveAlpha+0x44>
 800e3e8:	4a34      	ldr	r2, [pc, #208]	; (800e4bc <GUI_MEMDEV__WriteToActiveAlpha+0x124>)
 800e3ea:	1a99      	subs	r1, r3, r2
 800e3ec:	424a      	negs	r2, r1
 800e3ee:	414a      	adcs	r2, r1
 800e3f0:	e7f3      	b.n	800e3da <GUI_MEMDEV__WriteToActiveAlpha+0x42>
 800e3f2:	4638      	mov	r0, r7
 800e3f4:	f7f7 f9ea 	bl	80057cc <GUI_ALLOC_LockH>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	a80c      	add	r0, sp, #48	; 0x30
 800e3fc:	f9b3 4008 	ldrsh.w	r4, [r3, #8]
 800e400:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e404:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
 800e408:	68de      	ldr	r6, [r3, #12]
 800e40a:	f7f7 f9ed 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800e40e:	ab08      	add	r3, sp, #32
 800e410:	aa06      	add	r2, sp, #24
 800e412:	a905      	add	r1, sp, #20
 800e414:	4620      	mov	r0, r4
 800e416:	f7ff fed9 	bl	800e1cc <_ClipX>
 800e41a:	9b06      	ldr	r3, [sp, #24]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	ddd2      	ble.n	800e3c6 <GUI_MEMDEV__WriteToActiveAlpha+0x2e>
 800e420:	ab09      	add	r3, sp, #36	; 0x24
 800e422:	aa07      	add	r2, sp, #28
 800e424:	a904      	add	r1, sp, #16
 800e426:	4648      	mov	r0, r9
 800e428:	f7ff fef2 	bl	800e210 <_ClipY>
 800e42c:	9b07      	ldr	r3, [sp, #28]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	ddc9      	ble.n	800e3c6 <GUI_MEMDEV__WriteToActiveAlpha+0x2e>
 800e432:	4638      	mov	r0, r7
 800e434:	f7ff feba 	bl	800e1ac <GUI_MEMDEV_GetDataPtr>
 800e438:	9908      	ldr	r1, [sp, #32]
 800e43a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e43c:	f8d8 3000 	ldr.w	r3, [r8]
 800e440:	fb07 1704 	mla	r7, r7, r4, r1
 800e444:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800e448:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800e44a:	b328      	cbz	r0, 800e498 <GUI_MEMDEV__WriteToActiveAlpha+0x100>
 800e44c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e450:	9c04      	ldr	r4, [sp, #16]
 800e452:	f7f7 f9bb 	bl	80057cc <GUI_ALLOC_LockH>
 800e456:	4603      	mov	r3, r0
 800e458:	a80c      	add	r0, sp, #48	; 0x30
 800e45a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e45e:	f8d3 900c 	ldr.w	r9, [r3, #12]
 800e462:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e466:	1aa4      	subs	r4, r4, r2
 800e468:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e46c:	eba8 0802 	sub.w	r8, r8, r2
 800e470:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800e474:	fb09 8404 	mla	r4, r9, r4, r8
 800e478:	3418      	adds	r4, #24
 800e47a:	441c      	add	r4, r3
 800e47c:	f7f7 f9b4 	bl	80057e8 <GUI_ALLOC_UnlockH>
 800e480:	2c00      	cmp	r4, #0
 800e482:	d0a0      	beq.n	800e3c6 <GUI_MEMDEV__WriteToActiveAlpha+0x2e>
 800e484:	9601      	str	r6, [sp, #4]
 800e486:	f8cd 9000 	str.w	r9, [sp]
 800e48a:	682d      	ldr	r5, [r5, #0]
 800e48c:	9b07      	ldr	r3, [sp, #28]
 800e48e:	9a06      	ldr	r2, [sp, #24]
 800e490:	4639      	mov	r1, r7
 800e492:	4620      	mov	r0, r4
 800e494:	47a8      	blx	r5
 800e496:	e796      	b.n	800e3c6 <GUI_MEMDEV__WriteToActiveAlpha+0x2e>
 800e498:	7c58      	ldrb	r0, [r3, #17]
 800e49a:	9b07      	ldr	r3, [sp, #28]
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	9b06      	ldr	r3, [sp, #24]
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	00a4      	lsls	r4, r4, #2
 800e4a4:	4b06      	ldr	r3, [pc, #24]	; (800e4c0 <GUI_MEMDEV__WriteToActiveAlpha+0x128>)
 800e4a6:	9402      	str	r4, [sp, #8]
 800e4a8:	681c      	ldr	r4, [r3, #0]
 800e4aa:	9a04      	ldr	r2, [sp, #16]
 800e4ac:	9905      	ldr	r1, [sp, #20]
 800e4ae:	463b      	mov	r3, r7
 800e4b0:	47a0      	blx	r4
 800e4b2:	e788      	b.n	800e3c6 <GUI_MEMDEV__WriteToActiveAlpha+0x2e>
 800e4b4:	200089b8 	.word	0x200089b8
 800e4b8:	20008a1c 	.word	0x20008a1c
 800e4bc:	08010d18 	.word	0x08010d18
 800e4c0:	20008a18 	.word	0x20008a18
 800e4c4:	200000d8 	.word	0x200000d8

0800e4c8 <__errno>:
 800e4c8:	4b01      	ldr	r3, [pc, #4]	; (800e4d0 <__errno+0x8>)
 800e4ca:	6818      	ldr	r0, [r3, #0]
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	20000138 	.word	0x20000138

0800e4d4 <__libc_init_array>:
 800e4d4:	b570      	push	{r4, r5, r6, lr}
 800e4d6:	4d0d      	ldr	r5, [pc, #52]	; (800e50c <__libc_init_array+0x38>)
 800e4d8:	4c0d      	ldr	r4, [pc, #52]	; (800e510 <__libc_init_array+0x3c>)
 800e4da:	1b64      	subs	r4, r4, r5
 800e4dc:	10a4      	asrs	r4, r4, #2
 800e4de:	2600      	movs	r6, #0
 800e4e0:	42a6      	cmp	r6, r4
 800e4e2:	d109      	bne.n	800e4f8 <__libc_init_array+0x24>
 800e4e4:	4d0b      	ldr	r5, [pc, #44]	; (800e514 <__libc_init_array+0x40>)
 800e4e6:	4c0c      	ldr	r4, [pc, #48]	; (800e518 <__libc_init_array+0x44>)
 800e4e8:	f000 f8d0 	bl	800e68c <_init>
 800e4ec:	1b64      	subs	r4, r4, r5
 800e4ee:	10a4      	asrs	r4, r4, #2
 800e4f0:	2600      	movs	r6, #0
 800e4f2:	42a6      	cmp	r6, r4
 800e4f4:	d105      	bne.n	800e502 <__libc_init_array+0x2e>
 800e4f6:	bd70      	pop	{r4, r5, r6, pc}
 800e4f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4fc:	4798      	blx	r3
 800e4fe:	3601      	adds	r6, #1
 800e500:	e7ee      	b.n	800e4e0 <__libc_init_array+0xc>
 800e502:	f855 3b04 	ldr.w	r3, [r5], #4
 800e506:	4798      	blx	r3
 800e508:	3601      	adds	r6, #1
 800e50a:	e7f2      	b.n	800e4f2 <__libc_init_array+0x1e>
 800e50c:	08010ee0 	.word	0x08010ee0
 800e510:	08010ee0 	.word	0x08010ee0
 800e514:	08010ee0 	.word	0x08010ee0
 800e518:	08010ee4 	.word	0x08010ee4

0800e51c <malloc>:
 800e51c:	4b02      	ldr	r3, [pc, #8]	; (800e528 <malloc+0xc>)
 800e51e:	4601      	mov	r1, r0
 800e520:	6818      	ldr	r0, [r3, #0]
 800e522:	f000 b833 	b.w	800e58c <_malloc_r>
 800e526:	bf00      	nop
 800e528:	20000138 	.word	0x20000138

0800e52c <memcpy>:
 800e52c:	440a      	add	r2, r1
 800e52e:	4291      	cmp	r1, r2
 800e530:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e534:	d100      	bne.n	800e538 <memcpy+0xc>
 800e536:	4770      	bx	lr
 800e538:	b510      	push	{r4, lr}
 800e53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e53e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e542:	4291      	cmp	r1, r2
 800e544:	d1f9      	bne.n	800e53a <memcpy+0xe>
 800e546:	bd10      	pop	{r4, pc}

0800e548 <memmove>:
 800e548:	4288      	cmp	r0, r1
 800e54a:	b510      	push	{r4, lr}
 800e54c:	eb01 0402 	add.w	r4, r1, r2
 800e550:	d902      	bls.n	800e558 <memmove+0x10>
 800e552:	4284      	cmp	r4, r0
 800e554:	4623      	mov	r3, r4
 800e556:	d807      	bhi.n	800e568 <memmove+0x20>
 800e558:	1e43      	subs	r3, r0, #1
 800e55a:	42a1      	cmp	r1, r4
 800e55c:	d008      	beq.n	800e570 <memmove+0x28>
 800e55e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e562:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e566:	e7f8      	b.n	800e55a <memmove+0x12>
 800e568:	4402      	add	r2, r0
 800e56a:	4601      	mov	r1, r0
 800e56c:	428a      	cmp	r2, r1
 800e56e:	d100      	bne.n	800e572 <memmove+0x2a>
 800e570:	bd10      	pop	{r4, pc}
 800e572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e57a:	e7f7      	b.n	800e56c <memmove+0x24>

0800e57c <memset>:
 800e57c:	4402      	add	r2, r0
 800e57e:	4603      	mov	r3, r0
 800e580:	4293      	cmp	r3, r2
 800e582:	d100      	bne.n	800e586 <memset+0xa>
 800e584:	4770      	bx	lr
 800e586:	f803 1b01 	strb.w	r1, [r3], #1
 800e58a:	e7f9      	b.n	800e580 <memset+0x4>

0800e58c <_malloc_r>:
 800e58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58e:	1ccd      	adds	r5, r1, #3
 800e590:	f025 0503 	bic.w	r5, r5, #3
 800e594:	3508      	adds	r5, #8
 800e596:	2d0c      	cmp	r5, #12
 800e598:	bf38      	it	cc
 800e59a:	250c      	movcc	r5, #12
 800e59c:	2d00      	cmp	r5, #0
 800e59e:	4606      	mov	r6, r0
 800e5a0:	db01      	blt.n	800e5a6 <_malloc_r+0x1a>
 800e5a2:	42a9      	cmp	r1, r5
 800e5a4:	d903      	bls.n	800e5ae <_malloc_r+0x22>
 800e5a6:	230c      	movs	r3, #12
 800e5a8:	6033      	str	r3, [r6, #0]
 800e5aa:	2000      	movs	r0, #0
 800e5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5ae:	f000 f85f 	bl	800e670 <__malloc_lock>
 800e5b2:	4921      	ldr	r1, [pc, #132]	; (800e638 <_malloc_r+0xac>)
 800e5b4:	680a      	ldr	r2, [r1, #0]
 800e5b6:	4614      	mov	r4, r2
 800e5b8:	b99c      	cbnz	r4, 800e5e2 <_malloc_r+0x56>
 800e5ba:	4f20      	ldr	r7, [pc, #128]	; (800e63c <_malloc_r+0xb0>)
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	b923      	cbnz	r3, 800e5ca <_malloc_r+0x3e>
 800e5c0:	4621      	mov	r1, r4
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	f000 f83c 	bl	800e640 <_sbrk_r>
 800e5c8:	6038      	str	r0, [r7, #0]
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	f000 f837 	bl	800e640 <_sbrk_r>
 800e5d2:	1c43      	adds	r3, r0, #1
 800e5d4:	d123      	bne.n	800e61e <_malloc_r+0x92>
 800e5d6:	230c      	movs	r3, #12
 800e5d8:	6033      	str	r3, [r6, #0]
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f000 f84e 	bl	800e67c <__malloc_unlock>
 800e5e0:	e7e3      	b.n	800e5aa <_malloc_r+0x1e>
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	1b5b      	subs	r3, r3, r5
 800e5e6:	d417      	bmi.n	800e618 <_malloc_r+0x8c>
 800e5e8:	2b0b      	cmp	r3, #11
 800e5ea:	d903      	bls.n	800e5f4 <_malloc_r+0x68>
 800e5ec:	6023      	str	r3, [r4, #0]
 800e5ee:	441c      	add	r4, r3
 800e5f0:	6025      	str	r5, [r4, #0]
 800e5f2:	e004      	b.n	800e5fe <_malloc_r+0x72>
 800e5f4:	6863      	ldr	r3, [r4, #4]
 800e5f6:	42a2      	cmp	r2, r4
 800e5f8:	bf0c      	ite	eq
 800e5fa:	600b      	streq	r3, [r1, #0]
 800e5fc:	6053      	strne	r3, [r2, #4]
 800e5fe:	4630      	mov	r0, r6
 800e600:	f000 f83c 	bl	800e67c <__malloc_unlock>
 800e604:	f104 000b 	add.w	r0, r4, #11
 800e608:	1d23      	adds	r3, r4, #4
 800e60a:	f020 0007 	bic.w	r0, r0, #7
 800e60e:	1ac2      	subs	r2, r0, r3
 800e610:	d0cc      	beq.n	800e5ac <_malloc_r+0x20>
 800e612:	1a1b      	subs	r3, r3, r0
 800e614:	50a3      	str	r3, [r4, r2]
 800e616:	e7c9      	b.n	800e5ac <_malloc_r+0x20>
 800e618:	4622      	mov	r2, r4
 800e61a:	6864      	ldr	r4, [r4, #4]
 800e61c:	e7cc      	b.n	800e5b8 <_malloc_r+0x2c>
 800e61e:	1cc4      	adds	r4, r0, #3
 800e620:	f024 0403 	bic.w	r4, r4, #3
 800e624:	42a0      	cmp	r0, r4
 800e626:	d0e3      	beq.n	800e5f0 <_malloc_r+0x64>
 800e628:	1a21      	subs	r1, r4, r0
 800e62a:	4630      	mov	r0, r6
 800e62c:	f000 f808 	bl	800e640 <_sbrk_r>
 800e630:	3001      	adds	r0, #1
 800e632:	d1dd      	bne.n	800e5f0 <_malloc_r+0x64>
 800e634:	e7cf      	b.n	800e5d6 <_malloc_r+0x4a>
 800e636:	bf00      	nop
 800e638:	20008784 	.word	0x20008784
 800e63c:	20008788 	.word	0x20008788

0800e640 <_sbrk_r>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	4d06      	ldr	r5, [pc, #24]	; (800e65c <_sbrk_r+0x1c>)
 800e644:	2300      	movs	r3, #0
 800e646:	4604      	mov	r4, r0
 800e648:	4608      	mov	r0, r1
 800e64a:	602b      	str	r3, [r5, #0]
 800e64c:	f7f2 faa0 	bl	8000b90 <_sbrk>
 800e650:	1c43      	adds	r3, r0, #1
 800e652:	d102      	bne.n	800e65a <_sbrk_r+0x1a>
 800e654:	682b      	ldr	r3, [r5, #0]
 800e656:	b103      	cbz	r3, 800e65a <_sbrk_r+0x1a>
 800e658:	6023      	str	r3, [r4, #0]
 800e65a:	bd38      	pop	{r3, r4, r5, pc}
 800e65c:	20008a20 	.word	0x20008a20

0800e660 <strcpy>:
 800e660:	4603      	mov	r3, r0
 800e662:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e666:	f803 2b01 	strb.w	r2, [r3], #1
 800e66a:	2a00      	cmp	r2, #0
 800e66c:	d1f9      	bne.n	800e662 <strcpy+0x2>
 800e66e:	4770      	bx	lr

0800e670 <__malloc_lock>:
 800e670:	4801      	ldr	r0, [pc, #4]	; (800e678 <__malloc_lock+0x8>)
 800e672:	f000 b809 	b.w	800e688 <__retarget_lock_acquire_recursive>
 800e676:	bf00      	nop
 800e678:	20008a28 	.word	0x20008a28

0800e67c <__malloc_unlock>:
 800e67c:	4801      	ldr	r0, [pc, #4]	; (800e684 <__malloc_unlock+0x8>)
 800e67e:	f000 b804 	b.w	800e68a <__retarget_lock_release_recursive>
 800e682:	bf00      	nop
 800e684:	20008a28 	.word	0x20008a28

0800e688 <__retarget_lock_acquire_recursive>:
 800e688:	4770      	bx	lr

0800e68a <__retarget_lock_release_recursive>:
 800e68a:	4770      	bx	lr

0800e68c <_init>:
 800e68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68e:	bf00      	nop
 800e690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e692:	bc08      	pop	{r3}
 800e694:	469e      	mov	lr, r3
 800e696:	4770      	bx	lr

0800e698 <_fini>:
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	bf00      	nop
 800e69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e69e:	bc08      	pop	{r3}
 800e6a0:	469e      	mov	lr, r3
 800e6a2:	4770      	bx	lr
